
Robo_TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004998  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004aa8  08004aa8  00014aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004b30  08004b30  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b30  08004b30  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08004b38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b98  200000e0  08004c14  000200e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c78  08004c14  00020c78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef15  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d07  00000000  00000000  0002f01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a331  00000000  00000000  00030d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0003b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b80  00000000  00000000  0003bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017521  00000000  00000000  0003c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010190  00000000  00000000  00053cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a0b6  00000000  00000000  00063e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000edf07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002438  00000000  00000000  000edf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e0 	.word	0x200000e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a90 	.word	0x08004a90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e4 	.word	0x200000e4
 800014c:	08004a90 	.word	0x08004a90

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <speedGet>:
		flag_velocidade	= true;
	}
}

// Medição da velocidade -> acontece simuntanea ao controlador
void speedGet(void){
 8000ab8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}

	// Ajusta o valor do duty cycle do PWM atualizando a velocidade do robô
	flag_velocidade = false;
 8000abc:	4b8a      	ldr	r3, [pc, #552]	; (8000ce8 <speedGet+0x230>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]

	if(controlar == true){
 8000ac2:	4b8a      	ldr	r3, [pc, #552]	; (8000cec <speedGet+0x234>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	f000 80bd 	beq.w	8000c46 <speedGet+0x18e>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwmM1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmM2);
		}
	}
	else{
		if(stopMedir == false && medir_vel == true){
 8000acc:	4b88      	ldr	r3, [pc, #544]	; (8000cf0 <speedGet+0x238>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f000 80d6 	beq.w	8000c82 <speedGet+0x1ca>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM_testM1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_testM2);
		}
	}

	cppM1[0] = TIM3->CNT;
 8000ad6:	4a87      	ldr	r2, [pc, #540]	; (8000cf4 <speedGet+0x23c>)
 8000ad8:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8000ada:	4b87      	ldr	r3, [pc, #540]	; (8000cf8 <speedGet+0x240>)
 8000adc:	601e      	str	r6, [r3, #0]
	cppM2[0] = TIM4->CNT;
 8000ade:	4987      	ldr	r1, [pc, #540]	; (8000cfc <speedGet+0x244>)
 8000ae0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8000ae2:	4987      	ldr	r1, [pc, #540]	; (8000d00 <speedGet+0x248>)
 8000ae4:	600d      	str	r5, [r1, #0]

	// Começa o update

	// Checagem do sentido de rotação das rodas e calculo da velocidade

	if (TIM3->CNT >= cppM1[1]){
 8000ae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ae8:	685c      	ldr	r4, [r3, #4]
 8000aea:	42a2      	cmp	r2, r4
 8000aec:	d31b      	bcc.n	8000b26 <speedGet+0x6e>
		sentidoM1 = 1;
 8000aee:	4b85      	ldr	r3, [pc, #532]	; (8000d04 <speedGet+0x24c>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
		w_rodaM1[0] = (2*M_PI*(TIM3->CNT-cppM1[1]))/(npulsos);
 8000af4:	4b7f      	ldr	r3, [pc, #508]	; (8000cf4 <speedGet+0x23c>)
 8000af6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000af8:	1b00      	subs	r0, r0, r4
 8000afa:	f7ff fc6b 	bl	80003d4 <__aeabi_ui2d>
 8000afe:	a378      	add	r3, pc, #480	; (adr r3, 8000ce0 <speedGet+0x228>)
 8000b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b04:	f7ff fce0 	bl	80004c8 <__aeabi_dmul>
 8000b08:	4680      	mov	r8, r0
 8000b0a:	4689      	mov	r9, r1
 8000b0c:	4b7e      	ldr	r3, [pc, #504]	; (8000d08 <speedGet+0x250>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	f7ff fc70 	bl	80003f4 <__aeabi_i2d>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4640      	mov	r0, r8
 8000b1a:	4649      	mov	r1, r9
 8000b1c:	f7ff fdfe 	bl	800071c <__aeabi_ddiv>
 8000b20:	4b7a      	ldr	r3, [pc, #488]	; (8000d0c <speedGet+0x254>)
 8000b22:	e9c3 0100 	strd	r0, r1, [r3]
	}

	if (TIM3->CNT < cppM1[1]) {
 8000b26:	4b73      	ldr	r3, [pc, #460]	; (8000cf4 <speedGet+0x23c>)
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	d91b      	bls.n	8000b66 <speedGet+0xae>
		sentidoM1 = 0;
 8000b2e:	4b75      	ldr	r3, [pc, #468]	; (8000d04 <speedGet+0x24c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
		w_rodaM1[0] = (2*M_PI*(cppM1[1]-TIM3->CNT))/(npulsos);
 8000b34:	4b6f      	ldr	r3, [pc, #444]	; (8000cf4 <speedGet+0x23c>)
 8000b36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b38:	1a20      	subs	r0, r4, r0
 8000b3a:	f7ff fc4b 	bl	80003d4 <__aeabi_ui2d>
 8000b3e:	a368      	add	r3, pc, #416	; (adr r3, 8000ce0 <speedGet+0x228>)
 8000b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b44:	f7ff fcc0 	bl	80004c8 <__aeabi_dmul>
 8000b48:	4680      	mov	r8, r0
 8000b4a:	4689      	mov	r9, r1
 8000b4c:	4b6e      	ldr	r3, [pc, #440]	; (8000d08 <speedGet+0x250>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	f7ff fc50 	bl	80003f4 <__aeabi_i2d>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	4640      	mov	r0, r8
 8000b5a:	4649      	mov	r1, r9
 8000b5c:	f7ff fdde 	bl	800071c <__aeabi_ddiv>
 8000b60:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <speedGet+0x254>)
 8000b62:	e9c3 0100 	strd	r0, r1, [r3]
	}

	if (TIM4->CNT >= cppM2[1]){
 8000b66:	4b65      	ldr	r3, [pc, #404]	; (8000cfc <speedGet+0x244>)
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6a:	4a65      	ldr	r2, [pc, #404]	; (8000d00 <speedGet+0x248>)
 8000b6c:	6854      	ldr	r4, [r2, #4]
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d31b      	bcc.n	8000baa <speedGet+0xf2>
		sentidoM2 = 1;
 8000b72:	4b67      	ldr	r3, [pc, #412]	; (8000d10 <speedGet+0x258>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
		w_rodaM2[0] = (2*M_PI*(TIM4->CNT-cppM2[1]))/(npulsos);
 8000b78:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <speedGet+0x244>)
 8000b7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b7c:	1b00      	subs	r0, r0, r4
 8000b7e:	f7ff fc29 	bl	80003d4 <__aeabi_ui2d>
 8000b82:	a357      	add	r3, pc, #348	; (adr r3, 8000ce0 <speedGet+0x228>)
 8000b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b88:	f7ff fc9e 	bl	80004c8 <__aeabi_dmul>
 8000b8c:	4680      	mov	r8, r0
 8000b8e:	4689      	mov	r9, r1
 8000b90:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <speedGet+0x250>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	f7ff fc2e 	bl	80003f4 <__aeabi_i2d>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	f7ff fdbc 	bl	800071c <__aeabi_ddiv>
 8000ba4:	4b5b      	ldr	r3, [pc, #364]	; (8000d14 <speedGet+0x25c>)
 8000ba6:	e9c3 0100 	strd	r0, r1, [r3]
	}

	if (TIM4->CNT < cppM2[1]){
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <speedGet+0x244>)
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	d91b      	bls.n	8000bea <speedGet+0x132>
		sentidoM2 = 0;
 8000bb2:	4b57      	ldr	r3, [pc, #348]	; (8000d10 <speedGet+0x258>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
		w_rodaM2[0] = (2*M_PI*(cppM2[1]-TIM4->CNT))/(npulsos);
 8000bb8:	4b50      	ldr	r3, [pc, #320]	; (8000cfc <speedGet+0x244>)
 8000bba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000bbc:	1a20      	subs	r0, r4, r0
 8000bbe:	f7ff fc09 	bl	80003d4 <__aeabi_ui2d>
 8000bc2:	a347      	add	r3, pc, #284	; (adr r3, 8000ce0 <speedGet+0x228>)
 8000bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc8:	f7ff fc7e 	bl	80004c8 <__aeabi_dmul>
 8000bcc:	4680      	mov	r8, r0
 8000bce:	4689      	mov	r9, r1
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <speedGet+0x250>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f7ff fc0e 	bl	80003f4 <__aeabi_i2d>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4640      	mov	r0, r8
 8000bde:	4649      	mov	r1, r9
 8000be0:	f7ff fd9c 	bl	800071c <__aeabi_ddiv>
 8000be4:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <speedGet+0x25c>)
 8000be6:	e9c3 0100 	strd	r0, r1, [r3]
	}

	if (medir_vel == true && cont_vel <= vetor_dados){
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <speedGet+0x260>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d055      	beq.n	8000c9e <speedGet+0x1e6>

		uint8_t time[] = {'T','i','m',':','i','a','d','o','!','\n'};
		HAL_UART_Transmit_IT(&huart2, init, 10);*/
	}
	// Filtro para o estouro do encoder
	if (w_rodaM1[0] > 35) w_rodaM1[0] = w_rodaM1[1];
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <speedGet+0x264>)
 8000bf6:	4945      	ldr	r1, [pc, #276]	; (8000d0c <speedGet+0x254>)
 8000bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bfc:	f7ff fef4 	bl	80009e8 <__aeabi_dcmpgt>
 8000c00:	b120      	cbz	r0, 8000c0c <speedGet+0x154>
 8000c02:	4942      	ldr	r1, [pc, #264]	; (8000d0c <speedGet+0x254>)
 8000c04:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000c08:	e9c1 2300 	strd	r2, r3, [r1]
	if (w_rodaM2[0] > 35) w_rodaM2[0] = w_rodaM2[1];
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <speedGet+0x264>)
 8000c10:	4940      	ldr	r1, [pc, #256]	; (8000d14 <speedGet+0x25c>)
 8000c12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c16:	f7ff fee7 	bl	80009e8 <__aeabi_dcmpgt>
 8000c1a:	b120      	cbz	r0, 8000c26 <speedGet+0x16e>
 8000c1c:	493d      	ldr	r1, [pc, #244]	; (8000d14 <speedGet+0x25c>)
 8000c1e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000c22:	e9c1 2300 	strd	r2, r3, [r1]


	// Fim do update

	w_rodaM1[1] = w_rodaM1[0];
 8000c26:	4939      	ldr	r1, [pc, #228]	; (8000d0c <speedGet+0x254>)
 8000c28:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000c2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	w_rodaM2[1] = w_rodaM2[0];
 8000c30:	4938      	ldr	r1, [pc, #224]	; (8000d14 <speedGet+0x25c>)
 8000c32:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000c36:	e9c1 2302 	strd	r2, r3, [r1, #8]

	cppM1[1] = cppM1[0];
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <speedGet+0x240>)
 8000c3c:	605e      	str	r6, [r3, #4]
	cppM2[1] = cppM2[0];
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <speedGet+0x248>)
 8000c40:	605d      	str	r5, [r3, #4]

}
 8000c42:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		if(stopMedir == false && medir_vel == true){
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <speedGet+0x238>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b16b      	cbz	r3, 8000c68 <speedGet+0x1b0>
		if(runMode == true){
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <speedGet+0x268>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	f47f af40 	bne.w	8000ad6 <speedGet+0x1e>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwmM1);
 8000c56:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <speedGet+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <speedGet+0x270>)
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmM2);
 8000c60:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <speedGet+0x274>)
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	639a      	str	r2, [r3, #56]	; 0x38
 8000c66:	e736      	b.n	8000ad6 <speedGet+0x1e>
		if(stopMedir == false && medir_vel == true){
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <speedGet+0x260>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d1ed      	bne.n	8000c4c <speedGet+0x194>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwmM1);
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <speedGet+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <speedGet+0x270>)
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmM2);
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <speedGet+0x274>)
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c80:	e7e4      	b.n	8000c4c <speedGet+0x194>
		if(stopMedir == false && medir_vel == true){
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <speedGet+0x260>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	f47f af25 	bne.w	8000ad6 <speedGet+0x1e>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM_testM1);
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <speedGet+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <speedGet+0x278>)
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_testM2);
 8000c96:	4a27      	ldr	r2, [pc, #156]	; (8000d34 <speedGet+0x27c>)
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c9c:	e71b      	b.n	8000ad6 <speedGet+0x1e>
	if (medir_vel == true && cont_vel <= vetor_dados){
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <speedGet+0x280>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <speedGet+0x284>)
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	dca3      	bgt.n	8000bf2 <speedGet+0x13a>
		velocidadesM1[cont_vel] = w_rodaM1[0];
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <speedGet+0x254>)
 8000cac:	e9d2 0100 	ldrd	r0, r1, [r2]
 8000cb0:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <speedGet+0x288>)
 8000cb2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000cb6:	e9c2 0100 	strd	r0, r1, [r2]
		velocidadesM2[cont_vel] = w_rodaM2[0];
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <speedGet+0x25c>)
 8000cbc:	e9d2 0100 	ldrd	r0, r1, [r2]
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <speedGet+0x28c>)
 8000cc2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000cc6:	e9c2 0100 	strd	r0, r1, [r2]
		cont_vel ++;
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <speedGet+0x280>)
 8000cce:	6013      	str	r3, [r2, #0]
		contTempo ++;
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <speedGet+0x290>)
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	e78b      	b.n	8000bf2 <speedGet+0x13a>
 8000cda:	bf00      	nop
 8000cdc:	f3af 8000 	nop.w
 8000ce0:	54442d18 	.word	0x54442d18
 8000ce4:	401921fb 	.word	0x401921fb
 8000ce8:	2000017c 	.word	0x2000017c
 8000cec:	20000044 	.word	0x20000044
 8000cf0:	20000054 	.word	0x20000054
 8000cf4:	40000400 	.word	0x40000400
 8000cf8:	20000134 	.word	0x20000134
 8000cfc:	40000800 	.word	0x40000800
 8000d00:	2000013c 	.word	0x2000013c
 8000d04:	20000190 	.word	0x20000190
 8000d08:	20000048 	.word	0x20000048
 8000d0c:	20000b08 	.word	0x20000b08
 8000d10:	20000194 	.word	0x20000194
 8000d14:	20000b18 	.word	0x20000b18
 8000d18:	20000180 	.word	0x20000180
 8000d1c:	40418000 	.word	0x40418000
 8000d20:	2000004c 	.word	0x2000004c
 8000d24:	20000be8 	.word	0x20000be8
 8000d28:	20000184 	.word	0x20000184
 8000d2c:	20000188 	.word	0x20000188
 8000d30:	200000fc 	.word	0x200000fc
 8000d34:	20000100 	.word	0x20000100
 8000d38:	20000130 	.word	0x20000130
 8000d3c:	20000064 	.word	0x20000064
 8000d40:	200001a8 	.word	0x200001a8
 8000d44:	20000658 	.word	0x20000658
 8000d48:	20000128 	.word	0x20000128

08000d4c <returnMsg>:
	HAL_Delay(500);

	HAL_GPIO_TogglePin(Led_i_GPIO_Port,Led_i_Pin);
}

void returnMsg(void){
 8000d4c:	b508      	push	{r3, lr}
	for(int i = 0; i < size_msg; i++ ){ // Clona e envia a msg recebida
 8000d4e:	2300      	movs	r3, #0
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <returnMsg+0x24>)
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dd05      	ble.n	8000d64 <returnMsg+0x18>
		tx_buffer[i] = rx_buffer[i];
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <returnMsg+0x28>)
 8000d5a:	5cd1      	ldrb	r1, [r2, r3]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <returnMsg+0x2c>)
 8000d5e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < size_msg; i++ ){ // Clona e envia a msg recebida
 8000d60:	3301      	adds	r3, #1
 8000d62:	e7f5      	b.n	8000d50 <returnMsg+0x4>
	}
	HAL_UART_Transmit_IT(&huart2, tx_buffer, 10);
 8000d64:	220a      	movs	r2, #10
 8000d66:	4904      	ldr	r1, [pc, #16]	; (8000d78 <returnMsg+0x2c>)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <returnMsg+0x30>)
 8000d6a:	f002 fbfa 	bl	8003562 <HAL_UART_Transmit_IT>
}
 8000d6e:	bd08      	pop	{r3, pc}
 8000d70:	20000050 	.word	0x20000050
 8000d74:	20000bc8 	.word	0x20000bc8
 8000d78:	20000058 	.word	0x20000058
 8000d7c:	20000c30 	.word	0x20000c30

08000d80 <MX_GPIO_Init>:
{
 8000d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d84:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	2400      	movs	r4, #0
 8000d88:	9404      	str	r4, [sp, #16]
 8000d8a:	9405      	str	r4, [sp, #20]
 8000d8c:	9406      	str	r4, [sp, #24]
 8000d8e:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <MX_GPIO_Init+0xbc>)
 8000d92:	699a      	ldr	r2, [r3, #24]
 8000d94:	f042 0210 	orr.w	r2, r2, #16
 8000d98:	619a      	str	r2, [r3, #24]
 8000d9a:	699a      	ldr	r2, [r3, #24]
 8000d9c:	f002 0210 	and.w	r2, r2, #16
 8000da0:	9201      	str	r2, [sp, #4]
 8000da2:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	f042 0204 	orr.w	r2, r2, #4
 8000daa:	619a      	str	r2, [r3, #24]
 8000dac:	699a      	ldr	r2, [r3, #24]
 8000dae:	f002 0204 	and.w	r2, r2, #4
 8000db2:	9202      	str	r2, [sp, #8]
 8000db4:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	699a      	ldr	r2, [r3, #24]
 8000db8:	f042 0208 	orr.w	r2, r2, #8
 8000dbc:	619a      	str	r2, [r3, #24]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	9303      	str	r3, [sp, #12]
 8000dc6:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(Led_i_GPIO_Port, Led_i_Pin, GPIO_PIN_RESET);
 8000dc8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000e44 <MX_GPIO_Init+0xc4>
 8000dcc:	4622      	mov	r2, r4
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	4648      	mov	r0, r9
 8000dd4:	f001 faec 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M2A_Pin|M2B_Pin|M1A_Pin|M1B_Pin, GPIO_PIN_RESET);
 8000dd8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000e48 <MX_GPIO_Init+0xc8>
 8000ddc:	4622      	mov	r2, r4
 8000dde:	f243 0130 	movw	r1, #12336	; 0x3030
 8000de2:	4640      	mov	r0, r8
 8000de4:	f001 fae4 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Hbridge_GPIO_Port, Hbridge_Pin, GPIO_PIN_RESET);
 8000de8:	4f15      	ldr	r7, [pc, #84]	; (8000e40 <MX_GPIO_Init+0xc0>)
 8000dea:	4622      	mov	r2, r4
 8000dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df0:	4638      	mov	r0, r7
 8000df2:	f001 fadd 	bl	80023b0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Led_i_Pin;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2601      	movs	r6, #1
 8000dfe:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2502      	movs	r5, #2
 8000e04:	9507      	str	r5, [sp, #28]
	HAL_GPIO_Init(Led_i_GPIO_Port, &GPIO_InitStruct);
 8000e06:	a904      	add	r1, sp, #16
 8000e08:	4648      	mov	r0, r9
 8000e0a:	f001 f9c1 	bl	8002190 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = M2A_Pin|M2B_Pin|M1A_Pin|M1B_Pin;
 8000e0e:	f243 0330 	movw	r3, #12336	; 0x3030
 8000e12:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	9507      	str	r5, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	a904      	add	r1, sp, #16
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	f001 f9b7 	bl	8002190 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Hbridge_Pin;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	9507      	str	r5, [sp, #28]
	HAL_GPIO_Init(Hbridge_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	a904      	add	r1, sp, #16
 8000e30:	4638      	mov	r0, r7
 8000e32:	f001 f9ad 	bl	8002190 <HAL_GPIO_Init>
}
 8000e36:	b009      	add	sp, #36	; 0x24
 8000e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010800 	.word	0x40010800
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40010c00 	.word	0x40010c00

08000e4c <testPulsos>:
void testPulsos(void){
 8000e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e50:	b083      	sub	sp, #12
	int M1 = TIM3->CNT;
 8000e52:	4b57      	ldr	r3, [pc, #348]	; (8000fb0 <testPulsos+0x164>)
 8000e54:	6a58      	ldr	r0, [r3, #36]	; 0x24
	int M2 = TIM4->CNT;
 8000e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	9301      	str	r3, [sp, #4]
	pulsos_motors[0] = 'M';
 8000e5e:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <testPulsos+0x168>)
 8000e60:	214d      	movs	r1, #77	; 0x4d
 8000e62:	7019      	strb	r1, [r3, #0]
	pulsos_motors[1] = '1';
 8000e64:	2231      	movs	r2, #49	; 0x31
 8000e66:	705a      	strb	r2, [r3, #1]
	pulsos_motors[2] = ':';
 8000e68:	223a      	movs	r2, #58	; 0x3a
 8000e6a:	709a      	strb	r2, [r3, #2]
	pulsos_motors[8] = 'M';
 8000e6c:	7219      	strb	r1, [r3, #8]
	pulsos_motors[9] = '2';
 8000e6e:	2132      	movs	r1, #50	; 0x32
 8000e70:	7259      	strb	r1, [r3, #9]
	pulsos_motors[10] = ':';
 8000e72:	729a      	strb	r2, [r3, #10]
	pulsos_motors[17] = '!';
 8000e74:	2221      	movs	r2, #33	; 0x21
 8000e76:	745a      	strb	r2, [r3, #17]
	pulsos_motors[18] = '\n';
 8000e78:	220a      	movs	r2, #10
 8000e7a:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i<5; i++ ){
 8000e7c:	f04f 0b00 	mov.w	fp, #0
 8000e80:	f1bb 0f04 	cmp.w	fp, #4
 8000e84:	dc3d      	bgt.n	8000f02 <testPulsos+0xb6>
		aux = aux1/pow(10,4-i);
 8000e86:	f7ff fab5 	bl	80003f4 <__aeabi_i2d>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460d      	mov	r5, r1
 8000e8e:	f1cb 0004 	rsb	r0, fp, #4
 8000e92:	f7ff faaf 	bl	80003f4 <__aeabi_i2d>
 8000e96:	4606      	mov	r6, r0
 8000e98:	460f      	mov	r7, r1
 8000e9a:	f04f 0800 	mov.w	r8, #0
 8000e9e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000fc0 <testPulsos+0x174>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4640      	mov	r0, r8
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	f002 fe39 	bl	8003b20 <pow>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	f7ff fc31 	bl	800071c <__aeabi_ddiv>
 8000eba:	f7ff fdb5 	bl	8000a28 <__aeabi_d2iz>
 8000ebe:	4682      	mov	sl, r0
		aux1 = aux1- aux*pow(10,4-i);
 8000ec0:	4632      	mov	r2, r6
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	f002 fe2a 	bl	8003b20 <pow>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	460f      	mov	r7, r1
 8000ed0:	4650      	mov	r0, sl
 8000ed2:	f7ff fa8f 	bl	80003f4 <__aeabi_i2d>
 8000ed6:	4632      	mov	r2, r6
 8000ed8:	463b      	mov	r3, r7
 8000eda:	f7ff faf5 	bl	80004c8 <__aeabi_dmul>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	f7ff f937 	bl	8000158 <__aeabi_dsub>
 8000eea:	f7ff fd9d 	bl	8000a28 <__aeabi_d2iz>
		pulsos_motors[i+3] = aux +'0';
 8000eee:	f10b 0303 	add.w	r3, fp, #3
 8000ef2:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <testPulsos+0x168>)
 8000ef8:	f802 a003 	strb.w	sl, [r2, r3]
	for(int i = 0; i<5; i++ ){
 8000efc:	f10b 0b01 	add.w	fp, fp, #1
 8000f00:	e7be      	b.n	8000e80 <testPulsos+0x34>
	for(int i = 0; i<5; i++ ){
 8000f02:	f04f 0b00 	mov.w	fp, #0
 8000f06:	f1bb 0f04 	cmp.w	fp, #4
 8000f0a:	dc3f      	bgt.n	8000f8c <testPulsos+0x140>
		aux = aux1/pow(10,4-i);
 8000f0c:	9801      	ldr	r0, [sp, #4]
 8000f0e:	f7ff fa71 	bl	80003f4 <__aeabi_i2d>
 8000f12:	4604      	mov	r4, r0
 8000f14:	460d      	mov	r5, r1
 8000f16:	f1cb 0004 	rsb	r0, fp, #4
 8000f1a:	f7ff fa6b 	bl	80003f4 <__aeabi_i2d>
 8000f1e:	4606      	mov	r6, r0
 8000f20:	460f      	mov	r7, r1
 8000f22:	f04f 0800 	mov.w	r8, #0
 8000f26:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8000fc0 <testPulsos+0x174>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4640      	mov	r0, r8
 8000f30:	4649      	mov	r1, r9
 8000f32:	f002 fdf5 	bl	8003b20 <pow>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff fbed 	bl	800071c <__aeabi_ddiv>
 8000f42:	f7ff fd71 	bl	8000a28 <__aeabi_d2iz>
 8000f46:	4682      	mov	sl, r0
		aux1 = aux1- aux*pow(10,4-i);
 8000f48:	4632      	mov	r2, r6
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f002 fde6 	bl	8003b20 <pow>
 8000f54:	4606      	mov	r6, r0
 8000f56:	460f      	mov	r7, r1
 8000f58:	4650      	mov	r0, sl
 8000f5a:	f7ff fa4b 	bl	80003f4 <__aeabi_i2d>
 8000f5e:	4632      	mov	r2, r6
 8000f60:	463b      	mov	r3, r7
 8000f62:	f7ff fab1 	bl	80004c8 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f7ff f8f3 	bl	8000158 <__aeabi_dsub>
 8000f72:	f7ff fd59 	bl	8000a28 <__aeabi_d2iz>
 8000f76:	9001      	str	r0, [sp, #4]
		pulsos_motors[i+11] = aux +'0';
 8000f78:	f10b 030b 	add.w	r3, fp, #11
 8000f7c:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <testPulsos+0x168>)
 8000f82:	f802 a003 	strb.w	sl, [r2, r3]
	for(int i = 0; i<5; i++ ){
 8000f86:	f10b 0b01 	add.w	fp, fp, #1
 8000f8a:	e7bc      	b.n	8000f06 <testPulsos+0xba>
	HAL_UART_Transmit_IT(&huart2, pulsos_motors, 19);
 8000f8c:	2213      	movs	r2, #19
 8000f8e:	4909      	ldr	r1, [pc, #36]	; (8000fb4 <testPulsos+0x168>)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <testPulsos+0x16c>)
 8000f92:	f002 fae6 	bl	8003562 <HAL_UART_Transmit_IT>
	HAL_Delay(500);
 8000f96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9a:	f001 f80d 	bl	8001fb8 <HAL_Delay>
	HAL_GPIO_TogglePin(Led_i_GPIO_Port,Led_i_Pin);
 8000f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <testPulsos+0x170>)
 8000fa4:	f001 fa0a 	bl	80023bc <HAL_GPIO_TogglePin>
}
 8000fa8:	b003      	add	sp, #12
 8000faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fae:	bf00      	nop
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	20000bd4 	.word	0x20000bd4
 8000fb8:	20000c30 	.word	0x20000c30
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40240000 	.word	0x40240000

08000fc4 <controlador>:
void controlador(void){
 8000fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc8:	b087      	sub	sp, #28
	flag_controle = false;
 8000fca:	4b63      	ldr	r3, [pc, #396]	; (8001158 <controlador+0x194>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	acaoM1[0] += K1*(M1A1*erroM1[0] + M1A2*erroM1[1] + M1A3*erroM1[2]);
 8000fd0:	4e62      	ldr	r6, [pc, #392]	; (800115c <controlador+0x198>)
 8000fd2:	e9d6 3400 	ldrd	r3, r4, [r6]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	4621      	mov	r1, r4
 8000fda:	e9cd 0100 	strd	r0, r1, [sp]
 8000fde:	4b60      	ldr	r3, [pc, #384]	; (8001160 <controlador+0x19c>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fa70 	bl	80004c8 <__aeabi_dmul>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <controlador+0x1a0>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff fa63 	bl	80004c8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff f8a7 	bl	800015c <__adddf3>
 800100e:	4604      	mov	r4, r0
 8001010:	460d      	mov	r5, r1
 8001012:	4b55      	ldr	r3, [pc, #340]	; (8001168 <controlador+0x1a4>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 800101c:	f7ff fa54 	bl	80004c8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f898 	bl	800015c <__adddf3>
 800102c:	2200      	movs	r2, #0
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <controlador+0x1a8>)
 8001030:	f7ff fa4a 	bl	80004c8 <__aeabi_dmul>
 8001034:	4e4e      	ldr	r6, [pc, #312]	; (8001170 <controlador+0x1ac>)
 8001036:	e9d6 2300 	ldrd	r2, r3, [r6]
 800103a:	f7ff f88f 	bl	800015c <__adddf3>
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	e9c6 4500 	strd	r4, r5, [r6]
	acaoM2[0] += K2*(M2A1*erroM2[0] + M2A2*erroM2[1] + M2A3*erroM2[2]);
 8001046:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800119c <controlador+0x1d8>
 800104a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <controlador+0x1b0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fa34 	bl	80004c8 <__aeabi_dmul>
 8001060:	4606      	mov	r6, r0
 8001062:	460f      	mov	r7, r1
 8001064:	e9d8 ab02 	ldrd	sl, fp, [r8, #8]
 8001068:	4b43      	ldr	r3, [pc, #268]	; (8001178 <controlador+0x1b4>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	4650      	mov	r0, sl
 8001070:	4659      	mov	r1, fp
 8001072:	f7ff fa29 	bl	80004c8 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4630      	mov	r0, r6
 800107c:	4639      	mov	r1, r7
 800107e:	f7ff f86d 	bl	800015c <__adddf3>
 8001082:	4606      	mov	r6, r0
 8001084:	460f      	mov	r7, r1
 8001086:	4b3d      	ldr	r3, [pc, #244]	; (800117c <controlador+0x1b8>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 8001090:	f7ff fa1a 	bl	80004c8 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4630      	mov	r0, r6
 800109a:	4639      	mov	r1, r7
 800109c:	f7ff f85e 	bl	800015c <__adddf3>
 80010a0:	2200      	movs	r2, #0
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <controlador+0x1a8>)
 80010a4:	f7ff fa10 	bl	80004c8 <__aeabi_dmul>
 80010a8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001198 <controlador+0x1d4>
 80010ac:	e9d8 2300 	ldrd	r2, r3, [r8]
 80010b0:	f7ff f854 	bl	800015c <__adddf3>
 80010b4:	4606      	mov	r6, r0
 80010b6:	460f      	mov	r7, r1
 80010b8:	e9c8 6700 	strd	r6, r7, [r8]
	pwmM1 = ceil(acaoM1[0]);
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f002 fc2e 	bl	8003920 <ceil>
 80010c4:	f7ff fcd8 	bl	8000a78 <__aeabi_d2uiz>
 80010c8:	4680      	mov	r8, r0
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <controlador+0x1bc>)
 80010cc:	6018      	str	r0, [r3, #0]
	pwmM2 = ceil(acaoM2[0]);
 80010ce:	4630      	mov	r0, r6
 80010d0:	4639      	mov	r1, r7
 80010d2:	f002 fc25 	bl	8003920 <ceil>
 80010d6:	f7ff fccf 	bl	8000a78 <__aeabi_d2uiz>
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <controlador+0x1c0>)
 80010dc:	6018      	str	r0, [r3, #0]
	if (pwmM1 > 2000)	pwmM1 = 2000;
 80010de:	f5b8 6ffa 	cmp.w	r8, #2000	; 0x7d0
 80010e2:	d903      	bls.n	80010ec <controlador+0x128>
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <controlador+0x1bc>)
 80010e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010ea:	601a      	str	r2, [r3, #0]
	if (pwmM2 > 2000) pwmM2 = 2000;
 80010ec:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80010f0:	d903      	bls.n	80010fa <controlador+0x136>
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <controlador+0x1c0>)
 80010f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010f8:	601a      	str	r2, [r3, #0]
	erroM1[2] = erroM1[1];
 80010fa:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800115c <controlador+0x198>
 80010fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001102:	e9c8 2304 	strd	r2, r3, [r8, #16]
	erroM2[2] = erroM2[1];
 8001106:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800119c <controlador+0x1d8>
 800110a:	e9c9 ab04 	strd	sl, fp, [r9, #16]
	erroM1[1] = erroM1[0];
 800110e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001112:	e9c8 2302 	strd	r2, r3, [r8, #8]
	erroM2[1] = erroM2[0];
 8001116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800111a:	e9c9 2302 	strd	r2, r3, [r9, #8]
	erroM1[0] = w_targetM1 - w_rodaM1[0];
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <controlador+0x1c4>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	4919      	ldr	r1, [pc, #100]	; (800118c <controlador+0x1c8>)
 8001126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800112a:	f7ff f815 	bl	8000158 <__aeabi_dsub>
 800112e:	e9c8 0100 	strd	r0, r1, [r8]
	erroM2[0] = w_targetM2 - w_rodaM2[0];
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <controlador+0x1cc>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	4916      	ldr	r1, [pc, #88]	; (8001194 <controlador+0x1d0>)
 800113a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800113e:	f7ff f80b 	bl	8000158 <__aeabi_dsub>
 8001142:	e9c9 0100 	strd	r0, r1, [r9]
	acaoM1[1] = acaoM1[0];
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <controlador+0x1ac>)
 8001148:	e9c3 4502 	strd	r4, r5, [r3, #8]
	acaoM2[1] = acaoM2[0];
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <controlador+0x1d4>)
 800114e:	e9c3 6702 	strd	r6, r7, [r3, #8]
}
 8001152:	b007      	add	sp, #28
 8001154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001158:	20000178 	.word	0x20000178
 800115c:	20000148 	.word	0x20000148
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000010 	.word	0x20000010
 800116c:	40320000 	.word	0x40320000
 8001170:	20000108 	.word	0x20000108
 8001174:	20000018 	.word	0x20000018
 8001178:	20000020 	.word	0x20000020
 800117c:	20000028 	.word	0x20000028
 8001180:	20000184 	.word	0x20000184
 8001184:	20000188 	.word	0x20000188
 8001188:	20000b08 	.word	0x20000b08
 800118c:	20000b28 	.word	0x20000b28
 8001190:	20000b18 	.word	0x20000b18
 8001194:	20000b30 	.word	0x20000b30
 8001198:	20000118 	.word	0x20000118
 800119c:	20000160 	.word	0x20000160

080011a0 <medir>:
void medir(void){
 80011a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011a4:	b089      	sub	sp, #36	; 0x24
	uint8_t motor1[] = {'M','O','T','O','R','_','1',' ','\n','\n'};
 80011a6:	4a8c      	ldr	r2, [pc, #560]	; (80013d8 <medir+0x238>)
 80011a8:	ab05      	add	r3, sp, #20
 80011aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ac:	c303      	stmia	r3!, {r0, r1}
 80011ae:	801a      	strh	r2, [r3, #0]
	uint8_t motor2[] = {'\n','M','O','T','O','R','_','2',' ','\n','\n'};
 80011b0:	4a8a      	ldr	r2, [pc, #552]	; (80013dc <medir+0x23c>)
 80011b2:	ab02      	add	r3, sp, #8
 80011b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b6:	c303      	stmia	r3!, {r0, r1}
 80011b8:	f823 2b02 	strh.w	r2, [r3], #2
 80011bc:	0c12      	lsrs	r2, r2, #16
 80011be:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, motor1, 10);
 80011c0:	220a      	movs	r2, #10
 80011c2:	a905      	add	r1, sp, #20
 80011c4:	4886      	ldr	r0, [pc, #536]	; (80013e0 <medir+0x240>)
 80011c6:	f002 f9cc 	bl	8003562 <HAL_UART_Transmit_IT>
	for(int j = 0; j< vetor_dados; j++ ){
 80011ca:	2300      	movs	r3, #0
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	e022      	b.n	8001216 <medir+0x76>
		for (int i = 0; i<3; i++ ) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	e007      	b.n	80011e4 <medir+0x44>
			buffer_vel[5-i] = buffer_vel[4-i];
 80011d4:	f1c3 0004 	rsb	r0, r3, #4
 80011d8:	f1c3 0105 	rsb	r1, r3, #5
 80011dc:	4a81      	ldr	r2, [pc, #516]	; (80013e4 <medir+0x244>)
 80011de:	5c10      	ldrb	r0, [r2, r0]
 80011e0:	5450      	strb	r0, [r2, r1]
		for (int i = 0; i<3; i++ ) {
 80011e2:	3301      	adds	r3, #1
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	ddf5      	ble.n	80011d4 <medir+0x34>
		buffer_vel[2] =',';
 80011e8:	497e      	ldr	r1, [pc, #504]	; (80013e4 <medir+0x244>)
 80011ea:	232c      	movs	r3, #44	; 0x2c
 80011ec:	708b      	strb	r3, [r1, #2]
		buffer_vel[6] = '\n';
 80011ee:	240a      	movs	r4, #10
 80011f0:	718c      	strb	r4, [r1, #6]
		HAL_UART_Transmit_IT(&huart2, buffer_vel, 7);
 80011f2:	2207      	movs	r2, #7
 80011f4:	487a      	ldr	r0, [pc, #488]	; (80013e0 <medir+0x240>)
 80011f6:	f002 f9b4 	bl	8003562 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f000 fedc 	bl	8001fb8 <HAL_Delay>
		w_targetM1 = 0;
 8001200:	2200      	movs	r2, #0
 8001202:	2300      	movs	r3, #0
 8001204:	4978      	ldr	r1, [pc, #480]	; (80013e8 <medir+0x248>)
 8001206:	e9c1 2300 	strd	r2, r3, [r1]
		w_targetM2 = 0;
 800120a:	4978      	ldr	r1, [pc, #480]	; (80013ec <medir+0x24c>)
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
	for(int j = 0; j< vetor_dados; j++ ){
 8001210:	9b01      	ldr	r3, [sp, #4]
 8001212:	3301      	adds	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <medir+0x250>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	9a01      	ldr	r2, [sp, #4]
 800121c:	4293      	cmp	r3, r2
 800121e:	dd4e      	ble.n	80012be <medir+0x11e>
		aux1 = floor(velocidadesM1[j]*1000);
 8001220:	4974      	ldr	r1, [pc, #464]	; (80013f4 <medir+0x254>)
 8001222:	9b01      	ldr	r3, [sp, #4]
 8001224:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001228:	2200      	movs	r2, #0
 800122a:	4b73      	ldr	r3, [pc, #460]	; (80013f8 <medir+0x258>)
 800122c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001230:	f7ff f94a 	bl	80004c8 <__aeabi_dmul>
 8001234:	f002 fbf4 	bl	8003a20 <floor>
 8001238:	f7ff fbf6 	bl	8000a28 <__aeabi_d2iz>
		for(int i = 0; i<5; i++ ){
 800123c:	f04f 0b00 	mov.w	fp, #0
 8001240:	f1bb 0f04 	cmp.w	fp, #4
 8001244:	dcc4      	bgt.n	80011d0 <medir+0x30>
			aux = aux1/pow(10,4-i);
 8001246:	f7ff f8d5 	bl	80003f4 <__aeabi_i2d>
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	f1cb 0004 	rsb	r0, fp, #4
 8001252:	f7ff f8cf 	bl	80003f4 <__aeabi_i2d>
 8001256:	4606      	mov	r6, r0
 8001258:	460f      	mov	r7, r1
 800125a:	f04f 0800 	mov.w	r8, #0
 800125e:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001410 <medir+0x270>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4640      	mov	r0, r8
 8001268:	4649      	mov	r1, r9
 800126a:	f002 fc59 	bl	8003b20 <pow>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff fa51 	bl	800071c <__aeabi_ddiv>
 800127a:	f7ff fbd5 	bl	8000a28 <__aeabi_d2iz>
 800127e:	4682      	mov	sl, r0
			aux1 = aux1- aux*pow(10,4-i);
 8001280:	4632      	mov	r2, r6
 8001282:	463b      	mov	r3, r7
 8001284:	4640      	mov	r0, r8
 8001286:	4649      	mov	r1, r9
 8001288:	f002 fc4a 	bl	8003b20 <pow>
 800128c:	4606      	mov	r6, r0
 800128e:	460f      	mov	r7, r1
 8001290:	4650      	mov	r0, sl
 8001292:	f7ff f8af 	bl	80003f4 <__aeabi_i2d>
 8001296:	4632      	mov	r2, r6
 8001298:	463b      	mov	r3, r7
 800129a:	f7ff f915 	bl	80004c8 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7fe ff57 	bl	8000158 <__aeabi_dsub>
 80012aa:	f7ff fbbd 	bl	8000a28 <__aeabi_d2iz>
			buffer_vel[i] = aux +'0';
 80012ae:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80012b2:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <medir+0x244>)
 80012b4:	f803 a00b 	strb.w	sl, [r3, fp]
		for(int i = 0; i<5; i++ ){
 80012b8:	f10b 0b01 	add.w	fp, fp, #1
 80012bc:	e7c0      	b.n	8001240 <medir+0xa0>
	HAL_Delay(500);
 80012be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c2:	f000 fe79 	bl	8001fb8 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, motor2, 11);
 80012c6:	220b      	movs	r2, #11
 80012c8:	a902      	add	r1, sp, #8
 80012ca:	4845      	ldr	r0, [pc, #276]	; (80013e0 <medir+0x240>)
 80012cc:	f002 f949 	bl	8003562 <HAL_UART_Transmit_IT>
	HAL_Delay(500);
 80012d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d4:	f000 fe70 	bl	8001fb8 <HAL_Delay>
	for(int j = 0; j< vetor_dados; j++ ){
 80012d8:	2300      	movs	r3, #0
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	e01a      	b.n	8001314 <medir+0x174>
		for (int i = 0; i<3; i++ ) {
 80012de:	2300      	movs	r3, #0
 80012e0:	e007      	b.n	80012f2 <medir+0x152>
			buffer_vel[5-i] = buffer_vel[4-i];
 80012e2:	f1c3 0004 	rsb	r0, r3, #4
 80012e6:	f1c3 0105 	rsb	r1, r3, #5
 80012ea:	4a3e      	ldr	r2, [pc, #248]	; (80013e4 <medir+0x244>)
 80012ec:	5c10      	ldrb	r0, [r2, r0]
 80012ee:	5450      	strb	r0, [r2, r1]
		for (int i = 0; i<3; i++ ) {
 80012f0:	3301      	adds	r3, #1
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddf5      	ble.n	80012e2 <medir+0x142>
		buffer_vel[2] =',';
 80012f6:	493b      	ldr	r1, [pc, #236]	; (80013e4 <medir+0x244>)
 80012f8:	232c      	movs	r3, #44	; 0x2c
 80012fa:	708b      	strb	r3, [r1, #2]
		buffer_vel[6] = '\n';
 80012fc:	240a      	movs	r4, #10
 80012fe:	718c      	strb	r4, [r1, #6]
		HAL_UART_Transmit_IT(&huart2, buffer_vel, 7);
 8001300:	2207      	movs	r2, #7
 8001302:	4837      	ldr	r0, [pc, #220]	; (80013e0 <medir+0x240>)
 8001304:	f002 f92d 	bl	8003562 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001308:	4620      	mov	r0, r4
 800130a:	f000 fe55 	bl	8001fb8 <HAL_Delay>
	for(int j = 0; j< vetor_dados; j++ ){
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <medir+0x250>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	9a01      	ldr	r2, [sp, #4]
 800131a:	4293      	cmp	r3, r2
 800131c:	dd4e      	ble.n	80013bc <medir+0x21c>
		aux1 = floor(velocidadesM2[j]*1000);
 800131e:	4937      	ldr	r1, [pc, #220]	; (80013fc <medir+0x25c>)
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001326:	2200      	movs	r2, #0
 8001328:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <medir+0x258>)
 800132a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800132e:	f7ff f8cb 	bl	80004c8 <__aeabi_dmul>
 8001332:	f002 fb75 	bl	8003a20 <floor>
 8001336:	f7ff fb77 	bl	8000a28 <__aeabi_d2iz>
		for(int i = 0; i<5; i++ ){
 800133a:	f04f 0b00 	mov.w	fp, #0
 800133e:	f1bb 0f04 	cmp.w	fp, #4
 8001342:	dccc      	bgt.n	80012de <medir+0x13e>
			aux = aux1/pow(10,4-i);
 8001344:	f7ff f856 	bl	80003f4 <__aeabi_i2d>
 8001348:	4604      	mov	r4, r0
 800134a:	460d      	mov	r5, r1
 800134c:	f1cb 0004 	rsb	r0, fp, #4
 8001350:	f7ff f850 	bl	80003f4 <__aeabi_i2d>
 8001354:	4606      	mov	r6, r0
 8001356:	460f      	mov	r7, r1
 8001358:	f04f 0800 	mov.w	r8, #0
 800135c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001410 <medir+0x270>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4640      	mov	r0, r8
 8001366:	4649      	mov	r1, r9
 8001368:	f002 fbda 	bl	8003b20 <pow>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7ff f9d2 	bl	800071c <__aeabi_ddiv>
 8001378:	f7ff fb56 	bl	8000a28 <__aeabi_d2iz>
 800137c:	4682      	mov	sl, r0
			aux1 = aux1- aux*pow(10,4-i);
 800137e:	4632      	mov	r2, r6
 8001380:	463b      	mov	r3, r7
 8001382:	4640      	mov	r0, r8
 8001384:	4649      	mov	r1, r9
 8001386:	f002 fbcb 	bl	8003b20 <pow>
 800138a:	4606      	mov	r6, r0
 800138c:	460f      	mov	r7, r1
 800138e:	4650      	mov	r0, sl
 8001390:	f7ff f830 	bl	80003f4 <__aeabi_i2d>
 8001394:	4632      	mov	r2, r6
 8001396:	463b      	mov	r3, r7
 8001398:	f7ff f896 	bl	80004c8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7fe fed8 	bl	8000158 <__aeabi_dsub>
 80013a8:	f7ff fb3e 	bl	8000a28 <__aeabi_d2iz>
			buffer_vel[i] = aux +'0';
 80013ac:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <medir+0x244>)
 80013b2:	f803 a00b 	strb.w	sl, [r3, fp]
		for(int i = 0; i<5; i++ ){
 80013b6:	f10b 0b01 	add.w	fp, fp, #1
 80013ba:	e7c0      	b.n	800133e <medir+0x19e>
	medir_vel = false;
 80013bc:	2300      	movs	r3, #0
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <medir+0x260>)
 80013c0:	6013      	str	r3, [r2, #0]
	configFlag[5] = '0';
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <medir+0x264>)
 80013c4:	2130      	movs	r1, #48	; 0x30
 80013c6:	7151      	strb	r1, [r2, #5]
	stopMedir = true;
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <medir+0x268>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	6011      	str	r1, [r2, #0]
	cont_vel = 0;
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <medir+0x26c>)
 80013d0:	6013      	str	r3, [r2, #0]
}
 80013d2:	b009      	add	sp, #36	; 0x24
 80013d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d8:	08004aa8 	.word	0x08004aa8
 80013dc:	08004ab4 	.word	0x08004ab4
 80013e0:	20000c30 	.word	0x20000c30
 80013e4:	20000030 	.word	0x20000030
 80013e8:	20000b28 	.word	0x20000b28
 80013ec:	20000b30 	.word	0x20000b30
 80013f0:	20000064 	.word	0x20000064
 80013f4:	200001a8 	.word	0x200001a8
 80013f8:	408f4000 	.word	0x408f4000
 80013fc:	20000658 	.word	0x20000658
 8001400:	20000180 	.word	0x20000180
 8001404:	20000038 	.word	0x20000038
 8001408:	20000054 	.word	0x20000054
 800140c:	20000130 	.word	0x20000130
 8001410:	40240000 	.word	0x40240000

08001414 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001414:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_TogglePin(Led_i_GPIO_Port,Led_i_Pin);
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	48ae      	ldr	r0, [pc, #696]	; (80016d4 <HAL_UART_RxCpltCallback+0x2c0>)
 800141c:	f000 ffce 	bl	80023bc <HAL_GPIO_TogglePin>
	if(rx_buffer[0] == 'G'){// Função que inicia o PWM
 8001420:	4bad      	ldr	r3, [pc, #692]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b47      	cmp	r3, #71	; 0x47
 8001426:	d074      	beq.n	8001512 <HAL_UART_RxCpltCallback+0xfe>
	if(rx_buffer[0] == '%'){// Função vira para a direita
 8001428:	4bab      	ldr	r3, [pc, #684]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b25      	cmp	r3, #37	; 0x25
 800142e:	d075      	beq.n	800151c <HAL_UART_RxCpltCallback+0x108>
		speedM1 = 1000*(rx_buffer[1]-'0') + 100*(rx_buffer[2]-'0') + 10*(rx_buffer[3]-'0') + (rx_buffer[4]-'0');
 8001430:	49a9      	ldr	r1, [pc, #676]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 8001432:	784a      	ldrb	r2, [r1, #1]
 8001434:	3a30      	subs	r2, #48	; 0x30
 8001436:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800143a:	7888      	ldrb	r0, [r1, #2]
 800143c:	3830      	subs	r0, #48	; 0x30
 800143e:	2564      	movs	r5, #100	; 0x64
 8001440:	fb05 f000 	mul.w	r0, r5, r0
 8001444:	fb04 0202 	mla	r2, r4, r2, r0
 8001448:	78c8      	ldrb	r0, [r1, #3]
 800144a:	3830      	subs	r0, #48	; 0x30
 800144c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001450:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8001454:	790b      	ldrb	r3, [r1, #4]
 8001456:	3b30      	subs	r3, #48	; 0x30
 8001458:	441a      	add	r2, r3
 800145a:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <HAL_UART_RxCpltCallback+0x2c8>)
 800145c:	601a      	str	r2, [r3, #0]
		speedM2 = 1000*(rx_buffer[6]-'0') + 100*(rx_buffer[7]-'0') + 10*(rx_buffer[8]-'0') + (rx_buffer[9]-'0');
 800145e:	798b      	ldrb	r3, [r1, #6]
 8001460:	3b30      	subs	r3, #48	; 0x30
 8001462:	79ca      	ldrb	r2, [r1, #7]
 8001464:	3a30      	subs	r2, #48	; 0x30
 8001466:	fb05 f502 	mul.w	r5, r5, r2
 800146a:	fb04 5303 	mla	r3, r4, r3, r5
 800146e:	7a0a      	ldrb	r2, [r1, #8]
 8001470:	3a30      	subs	r2, #48	; 0x30
 8001472:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001476:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800147a:	7a4a      	ldrb	r2, [r1, #9]
 800147c:	3a30      	subs	r2, #48	; 0x30
 800147e:	4413      	add	r3, r2
 8001480:	4a97      	ldr	r2, [pc, #604]	; (80016e0 <HAL_UART_RxCpltCallback+0x2cc>)
 8001482:	6013      	str	r3, [r2, #0]
	if (speedM1 > 2200){
 8001484:	4b95      	ldr	r3, [pc, #596]	; (80016dc <HAL_UART_RxCpltCallback+0x2c8>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f640 0398 	movw	r3, #2200	; 0x898
 800148c:	429a      	cmp	r2, r3
 800148e:	dd03      	ble.n	8001498 <HAL_UART_RxCpltCallback+0x84>
		speedM1 = 2200;
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <HAL_UART_RxCpltCallback+0x2c8>)
 8001492:	f640 0298 	movw	r2, #2200	; 0x898
 8001496:	601a      	str	r2, [r3, #0]
	if(speedM2 > 2200){
 8001498:	4b91      	ldr	r3, [pc, #580]	; (80016e0 <HAL_UART_RxCpltCallback+0x2cc>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f640 0398 	movw	r3, #2200	; 0x898
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dd03      	ble.n	80014ac <HAL_UART_RxCpltCallback+0x98>
		speedM2 = 2200;
 80014a4:	4b8e      	ldr	r3, [pc, #568]	; (80016e0 <HAL_UART_RxCpltCallback+0x2cc>)
 80014a6:	f640 0298 	movw	r2, #2200	; 0x898
 80014aa:	601a      	str	r2, [r3, #0]
	if(rx_buffer[0] == 'F'){// Função vira para a direita
 80014ac:	4b8a      	ldr	r3, [pc, #552]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b46      	cmp	r3, #70	; 0x46
 80014b2:	f000 8103 	beq.w	80016bc <HAL_UART_RxCpltCallback+0x2a8>
	if(rx_buffer[0] == 'T'){// Função vira para a esquerda
 80014b6:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b54      	cmp	r3, #84	; 0x54
 80014bc:	f000 8132 	beq.w	8001724 <HAL_UART_RxCpltCallback+0x310>
	if(rx_buffer[0] == 'S'){// Função que par aos motores
 80014c0:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b53      	cmp	r3, #83	; 0x53
 80014c6:	f000 8139 	beq.w	800173c <HAL_UART_RxCpltCallback+0x328>
	if(rx_buffer[5] == 'F'){// Função vira para a direita
 80014ca:	4b83      	ldr	r3, [pc, #524]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80014cc:	795b      	ldrb	r3, [r3, #5]
 80014ce:	2b46      	cmp	r3, #70	; 0x46
 80014d0:	f000 8138 	beq.w	8001744 <HAL_UART_RxCpltCallback+0x330>
	if(rx_buffer[5] == 'T'){// Função vira para a esquerda
 80014d4:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80014d6:	795b      	ldrb	r3, [r3, #5]
 80014d8:	2b54      	cmp	r3, #84	; 0x54
 80014da:	f000 8141 	beq.w	8001760 <HAL_UART_RxCpltCallback+0x34c>
	if(rx_buffer[5] == 'S'){// Função que par aos motores
 80014de:	4b7e      	ldr	r3, [pc, #504]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80014e0:	795b      	ldrb	r3, [r3, #5]
 80014e2:	2b53      	cmp	r3, #83	; 0x53
 80014e4:	f000 814a 	beq.w	800177c <HAL_UART_RxCpltCallback+0x368>
		__NOP();// Adicionado para fins de Debug portanto não faz nada
 80014e8:	bf00      	nop
	if(medir_vel == false && runMode == false){
 80014ea:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <HAL_UART_RxCpltCallback+0x2d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8155 	beq.w	800179e <HAL_UART_RxCpltCallback+0x38a>
	if(medir_vel == false && runMode == true){
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8160 	beq.w	80017ba <HAL_UART_RxCpltCallback+0x3a6>
	if(retorno == 1) returnMsg();
 80014fa:	4b7b      	ldr	r3, [pc, #492]	; (80016e8 <HAL_UART_RxCpltCallback+0x2d4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	f000 8177 	beq.w	80017f2 <HAL_UART_RxCpltCallback+0x3de>
	HAL_UART_Receive_IT(&huart2, rx_buffer, size_msg);// Liga a recepção para a próxima msg
 8001504:	4b79      	ldr	r3, [pc, #484]	; (80016ec <HAL_UART_RxCpltCallback+0x2d8>)
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	4973      	ldr	r1, [pc, #460]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 800150a:	4879      	ldr	r0, [pc, #484]	; (80016f0 <HAL_UART_RxCpltCallback+0x2dc>)
 800150c:	f002 f9eb 	bl	80038e6 <HAL_UART_Receive_IT>
}
 8001510:	bd38      	pop	{r3, r4, r5, pc}
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001512:	2104      	movs	r1, #4
 8001514:	4877      	ldr	r0, [pc, #476]	; (80016f4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001516:	f001 fe5b 	bl	80031d0 <HAL_TIM_PWM_Start>
 800151a:	e785      	b.n	8001428 <HAL_UART_RxCpltCallback+0x14>
		if(rx_buffer[1] == 'R'){// Função vira para a direita
 800151c:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	2b52      	cmp	r3, #82	; 0x52
 8001522:	d015      	beq.n	8001550 <HAL_UART_RxCpltCallback+0x13c>
		if(rx_buffer[1] == 'E'){// Função vira para a direita
 8001524:	2b45      	cmp	r3, #69	; 0x45
 8001526:	d025      	beq.n	8001574 <HAL_UART_RxCpltCallback+0x160>
		if(rx_buffer[1] == 'M'){// Função vira para a direita
 8001528:	2b4d      	cmp	r3, #77	; 0x4d
 800152a:	d035      	beq.n	8001598 <HAL_UART_RxCpltCallback+0x184>
		if(rx_buffer[1] == 'C'){// Função vira para a direita
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	2b43      	cmp	r3, #67	; 0x43
 8001532:	f000 8099 	beq.w	8001668 <HAL_UART_RxCpltCallback+0x254>
		if(rx_buffer[1] == 'G'){// Função vira para a direita
 8001536:	2b47      	cmp	r3, #71	; 0x47
 8001538:	f000 80a8 	beq.w	800168c <HAL_UART_RxCpltCallback+0x278>
		if(rx_buffer[2] == '%'){// Função vira para a direita
 800153c:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 800153e:	789b      	ldrb	r3, [r3, #2]
 8001540:	2b25      	cmp	r3, #37	; 0x25
 8001542:	d19f      	bne.n	8001484 <HAL_UART_RxCpltCallback+0x70>
			HAL_UART_Transmit_IT(&huart2, configFlag, 11);
 8001544:	220b      	movs	r2, #11
 8001546:	496c      	ldr	r1, [pc, #432]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001548:	4869      	ldr	r0, [pc, #420]	; (80016f0 <HAL_UART_RxCpltCallback+0x2dc>)
 800154a:	f002 f80a 	bl	8003562 <HAL_UART_Transmit_IT>
 800154e:	e799      	b.n	8001484 <HAL_UART_RxCpltCallback+0x70>
			if (retorno == true){
 8001550:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <HAL_UART_RxCpltCallback+0x2d4>)
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	2a01      	cmp	r2, #1
 8001556:	d006      	beq.n	8001566 <HAL_UART_RxCpltCallback+0x152>
				retorno = true;
 8001558:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <HAL_UART_RxCpltCallback+0x2d4>)
 800155a:	2101      	movs	r1, #1
 800155c:	6011      	str	r1, [r2, #0]
				configFlag[1] = '1';
 800155e:	4a66      	ldr	r2, [pc, #408]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001560:	2131      	movs	r1, #49	; 0x31
 8001562:	7051      	strb	r1, [r2, #1]
 8001564:	e7de      	b.n	8001524 <HAL_UART_RxCpltCallback+0x110>
				retorno = false;
 8001566:	4a60      	ldr	r2, [pc, #384]	; (80016e8 <HAL_UART_RxCpltCallback+0x2d4>)
 8001568:	2100      	movs	r1, #0
 800156a:	6011      	str	r1, [r2, #0]
				configFlag[1] = '0';
 800156c:	4a62      	ldr	r2, [pc, #392]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 800156e:	2130      	movs	r1, #48	; 0x30
 8001570:	7051      	strb	r1, [r2, #1]
 8001572:	e7d7      	b.n	8001524 <HAL_UART_RxCpltCallback+0x110>
			if (testEncoder == true){
 8001574:	4a61      	ldr	r2, [pc, #388]	; (80016fc <HAL_UART_RxCpltCallback+0x2e8>)
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	2a01      	cmp	r2, #1
 800157a:	d006      	beq.n	800158a <HAL_UART_RxCpltCallback+0x176>
				testEncoder = true;
 800157c:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_UART_RxCpltCallback+0x2e8>)
 800157e:	2101      	movs	r1, #1
 8001580:	6011      	str	r1, [r2, #0]
				configFlag[3] = '1';
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001584:	2131      	movs	r1, #49	; 0x31
 8001586:	70d1      	strb	r1, [r2, #3]
 8001588:	e7ce      	b.n	8001528 <HAL_UART_RxCpltCallback+0x114>
				testEncoder = false;
 800158a:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_UART_RxCpltCallback+0x2e8>)
 800158c:	2100      	movs	r1, #0
 800158e:	6011      	str	r1, [r2, #0]
				configFlag[3] = '0';
 8001590:	4a59      	ldr	r2, [pc, #356]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001592:	2130      	movs	r1, #48	; 0x30
 8001594:	70d1      	strb	r1, [r2, #3]
 8001596:	e7c7      	b.n	8001528 <HAL_UART_RxCpltCallback+0x114>
			if (medir_vel == true){
 8001598:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <HAL_UART_RxCpltCallback+0x2d0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_UART_RxCpltCallback+0x19a>
				medir_vel = false;
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_UART_RxCpltCallback+0x2d0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
				configFlag[5] = '0';
 80015a6:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 80015a8:	2230      	movs	r2, #48	; 0x30
 80015aa:	715a      	strb	r2, [r3, #5]
 80015ac:	e7be      	b.n	800152c <HAL_UART_RxCpltCallback+0x118>
				medir_vel = true;
 80015ae:	2501      	movs	r5, #1
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_UART_RxCpltCallback+0x2d0>)
 80015b2:	601d      	str	r5, [r3, #0]
				configFlag[5] = '1';
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 80015b6:	2231      	movs	r2, #49	; 0x31
 80015b8:	715a      	strb	r2, [r3, #5]
				stopMedir = true;
 80015ba:	4b51      	ldr	r3, [pc, #324]	; (8001700 <HAL_UART_RxCpltCallback+0x2ec>)
 80015bc:	601d      	str	r5, [r3, #0]
				HAL_GPIO_WritePin(M1A_GPIO_Port, M1A_Pin, SET);
 80015be:	4c51      	ldr	r4, [pc, #324]	; (8001704 <HAL_UART_RxCpltCallback+0x2f0>)
 80015c0:	462a      	mov	r2, r5
 80015c2:	2110      	movs	r1, #16
 80015c4:	4620      	mov	r0, r4
 80015c6:	f000 fef3 	bl	80023b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1B_GPIO_Port, M1B_Pin, RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2120      	movs	r1, #32
 80015ce:	4620      	mov	r0, r4
 80015d0:	f000 feee 	bl	80023b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M2A_GPIO_Port, M2A_Pin, SET);
 80015d4:	462a      	mov	r2, r5
 80015d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015da:	4620      	mov	r0, r4
 80015dc:	f000 fee8 	bl	80023b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M2B_GPIO_Port, M2B_Pin, RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e6:	4620      	mov	r0, r4
 80015e8:	f000 fee2 	bl	80023b0 <HAL_GPIO_WritePin>
				PWM_testM1 = 1000*(rx_buffer[2]-'0') + 100*(rx_buffer[3]-'0') + 10*(rx_buffer[4]-'0') + (rx_buffer[5]-'0');
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80015ee:	7898      	ldrb	r0, [r3, #2]
 80015f0:	3830      	subs	r0, #48	; 0x30
 80015f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015f6:	78da      	ldrb	r2, [r3, #3]
 80015f8:	3a30      	subs	r2, #48	; 0x30
 80015fa:	2564      	movs	r5, #100	; 0x64
 80015fc:	fb05 f202 	mul.w	r2, r5, r2
 8001600:	fb01 2000 	mla	r0, r1, r0, r2
 8001604:	791a      	ldrb	r2, [r3, #4]
 8001606:	3a30      	subs	r2, #48	; 0x30
 8001608:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800160c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8001610:	795a      	ldrb	r2, [r3, #5]
 8001612:	3a30      	subs	r2, #48	; 0x30
 8001614:	4410      	add	r0, r2
 8001616:	4a3c      	ldr	r2, [pc, #240]	; (8001708 <HAL_UART_RxCpltCallback+0x2f4>)
 8001618:	6010      	str	r0, [r2, #0]
				PWM_testM2 = 1000*(rx_buffer[6]-'0') + 100*(rx_buffer[7]-'0') + 10*(rx_buffer[8]-'0') + (rx_buffer[9]-'0');
 800161a:	799c      	ldrb	r4, [r3, #6]
 800161c:	3c30      	subs	r4, #48	; 0x30
 800161e:	79da      	ldrb	r2, [r3, #7]
 8001620:	3a30      	subs	r2, #48	; 0x30
 8001622:	fb05 f502 	mul.w	r5, r5, r2
 8001626:	fb01 5404 	mla	r4, r1, r4, r5
 800162a:	7a1a      	ldrb	r2, [r3, #8]
 800162c:	3a30      	subs	r2, #48	; 0x30
 800162e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001632:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8001636:	7a5b      	ldrb	r3, [r3, #9]
 8001638:	3b30      	subs	r3, #48	; 0x30
 800163a:	441c      	add	r4, r3
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_UART_RxCpltCallback+0x2f8>)
 800163e:	601c      	str	r4, [r3, #0]
					w_targetM1 = PWM_testM1/100.0;
 8001640:	f7fe fed8 	bl	80003f4 <__aeabi_i2d>
 8001644:	2200      	movs	r2, #0
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_UART_RxCpltCallback+0x2fc>)
 8001648:	f7ff f868 	bl	800071c <__aeabi_ddiv>
 800164c:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_UART_RxCpltCallback+0x300>)
 800164e:	e9c3 0100 	strd	r0, r1, [r3]
					w_targetM2 = PWM_testM2/100.0;
 8001652:	4620      	mov	r0, r4
 8001654:	f7fe fece 	bl	80003f4 <__aeabi_i2d>
 8001658:	2200      	movs	r2, #0
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_UART_RxCpltCallback+0x2fc>)
 800165c:	f7ff f85e 	bl	800071c <__aeabi_ddiv>
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_UART_RxCpltCallback+0x304>)
 8001662:	e9c3 0100 	strd	r0, r1, [r3]
 8001666:	e761      	b.n	800152c <HAL_UART_RxCpltCallback+0x118>
			if (controlar == true){
 8001668:	4a2c      	ldr	r2, [pc, #176]	; (800171c <HAL_UART_RxCpltCallback+0x308>)
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	2a01      	cmp	r2, #1
 800166e:	d006      	beq.n	800167e <HAL_UART_RxCpltCallback+0x26a>
				controlar = true;
 8001670:	4a2a      	ldr	r2, [pc, #168]	; (800171c <HAL_UART_RxCpltCallback+0x308>)
 8001672:	2101      	movs	r1, #1
 8001674:	6011      	str	r1, [r2, #0]
				configFlag[7] = '1';
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001678:	2131      	movs	r1, #49	; 0x31
 800167a:	71d1      	strb	r1, [r2, #7]
 800167c:	e75b      	b.n	8001536 <HAL_UART_RxCpltCallback+0x122>
				controlar = false;
 800167e:	4a27      	ldr	r2, [pc, #156]	; (800171c <HAL_UART_RxCpltCallback+0x308>)
 8001680:	2100      	movs	r1, #0
 8001682:	6011      	str	r1, [r2, #0]
				configFlag[7] = '0';
 8001684:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001686:	2130      	movs	r1, #48	; 0x30
 8001688:	71d1      	strb	r1, [r2, #7]
 800168a:	e754      	b.n	8001536 <HAL_UART_RxCpltCallback+0x122>
			if (runMode == true){
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_UART_RxCpltCallback+0x30c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d009      	beq.n	80016a8 <HAL_UART_RxCpltCallback+0x294>
				runMode = true;
 8001694:	2301      	movs	r3, #1
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_UART_RxCpltCallback+0x30c>)
 8001698:	6013      	str	r3, [r2, #0]
				controlar = true;
 800169a:	4a20      	ldr	r2, [pc, #128]	; (800171c <HAL_UART_RxCpltCallback+0x308>)
 800169c:	6013      	str	r3, [r2, #0]
				configFlag[9] = '1';
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 80016a0:	2231      	movs	r2, #49	; 0x31
 80016a2:	725a      	strb	r2, [r3, #9]
				configFlag[7] = '1';
 80016a4:	71da      	strb	r2, [r3, #7]
 80016a6:	e749      	b.n	800153c <HAL_UART_RxCpltCallback+0x128>
				runMode = false;
 80016a8:	2300      	movs	r3, #0
 80016aa:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_UART_RxCpltCallback+0x30c>)
 80016ac:	6013      	str	r3, [r2, #0]
				controlar = false;
 80016ae:	4a1b      	ldr	r2, [pc, #108]	; (800171c <HAL_UART_RxCpltCallback+0x308>)
 80016b0:	6013      	str	r3, [r2, #0]
				configFlag[9] = '0';
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_UART_RxCpltCallback+0x2e4>)
 80016b4:	2230      	movs	r2, #48	; 0x30
 80016b6:	725a      	strb	r2, [r3, #9]
				configFlag[7] = '0';
 80016b8:	71da      	strb	r2, [r3, #7]
 80016ba:	e73f      	b.n	800153c <HAL_UART_RxCpltCallback+0x128>
		HAL_GPIO_WritePin(M1A_GPIO_Port, M1A_Pin, SET);
 80016bc:	4c11      	ldr	r4, [pc, #68]	; (8001704 <HAL_UART_RxCpltCallback+0x2f0>)
 80016be:	2201      	movs	r2, #1
 80016c0:	2110      	movs	r1, #16
 80016c2:	4620      	mov	r0, r4
 80016c4:	f000 fe74 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1B_GPIO_Port, M1B_Pin, RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2120      	movs	r1, #32
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 fe6f 	bl	80023b0 <HAL_GPIO_WritePin>
 80016d2:	e6f0      	b.n	80014b6 <HAL_UART_RxCpltCallback+0xa2>
 80016d4:	40011000 	.word	0x40011000
 80016d8:	20000bc8 	.word	0x20000bc8
 80016dc:	20000198 	.word	0x20000198
 80016e0:	2000019c 	.word	0x2000019c
 80016e4:	20000180 	.word	0x20000180
 80016e8:	2000018c 	.word	0x2000018c
 80016ec:	20000050 	.word	0x20000050
 80016f0:	20000c30 	.word	0x20000c30
 80016f4:	20000be8 	.word	0x20000be8
 80016f8:	20000038 	.word	0x20000038
 80016fc:	200001a0 	.word	0x200001a0
 8001700:	20000054 	.word	0x20000054
 8001704:	40010c00 	.word	0x40010c00
 8001708:	200000fc 	.word	0x200000fc
 800170c:	20000100 	.word	0x20000100
 8001710:	40590000 	.word	0x40590000
 8001714:	20000b28 	.word	0x20000b28
 8001718:	20000b30 	.word	0x20000b30
 800171c:	20000044 	.word	0x20000044
 8001720:	2000004c 	.word	0x2000004c
		HAL_GPIO_WritePin(M1A_GPIO_Port, M1A_Pin, RESET);
 8001724:	4c34      	ldr	r4, [pc, #208]	; (80017f8 <HAL_UART_RxCpltCallback+0x3e4>)
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	4620      	mov	r0, r4
 800172c:	f000 fe40 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1B_GPIO_Port, M1B_Pin, SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2120      	movs	r1, #32
 8001734:	4620      	mov	r0, r4
 8001736:	f000 fe3b 	bl	80023b0 <HAL_GPIO_WritePin>
 800173a:	e6c1      	b.n	80014c0 <HAL_UART_RxCpltCallback+0xac>
		speedM2 = 0;
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_UART_RxCpltCallback+0x3e8>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e6c2      	b.n	80014ca <HAL_UART_RxCpltCallback+0xb6>
		HAL_GPIO_WritePin(M2A_GPIO_Port, M2A_Pin, SET);
 8001744:	4c2c      	ldr	r4, [pc, #176]	; (80017f8 <HAL_UART_RxCpltCallback+0x3e4>)
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800174c:	4620      	mov	r0, r4
 800174e:	f000 fe2f 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_GPIO_Port, M2B_Pin, RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001758:	4620      	mov	r0, r4
 800175a:	f000 fe29 	bl	80023b0 <HAL_GPIO_WritePin>
 800175e:	e6b9      	b.n	80014d4 <HAL_UART_RxCpltCallback+0xc0>
		HAL_GPIO_WritePin(M2A_GPIO_Port, M2A_Pin, RESET);
 8001760:	4c25      	ldr	r4, [pc, #148]	; (80017f8 <HAL_UART_RxCpltCallback+0x3e4>)
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001768:	4620      	mov	r0, r4
 800176a:	f000 fe21 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_GPIO_Port, M2B_Pin, SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001774:	4620      	mov	r0, r4
 8001776:	f000 fe1b 	bl	80023b0 <HAL_GPIO_WritePin>
 800177a:	e6b0      	b.n	80014de <HAL_UART_RxCpltCallback+0xca>
		HAL_GPIO_WritePin(M2A_GPIO_Port, M2A_Pin, RESET);
 800177c:	4c1e      	ldr	r4, [pc, #120]	; (80017f8 <HAL_UART_RxCpltCallback+0x3e4>)
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	4620      	mov	r0, r4
 8001786:	f000 fe13 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2A_GPIO_Port, M2B_Pin, RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001790:	4620      	mov	r0, r4
 8001792:	f000 fe0d 	bl	80023b0 <HAL_GPIO_WritePin>
		speedM2 = 0;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_UART_RxCpltCallback+0x3e8>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e6a5      	b.n	80014ea <HAL_UART_RxCpltCallback+0xd6>
	if(medir_vel == false && runMode == false){
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <HAL_UART_RxCpltCallback+0x3ec>)
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	f47f aea6 	bne.w	80014f4 <HAL_UART_RxCpltCallback+0xe0>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speedM1);
 80017a8:	4a16      	ldr	r2, [pc, #88]	; (8001804 <HAL_UART_RxCpltCallback+0x3f0>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4916      	ldr	r1, [pc, #88]	; (8001808 <HAL_UART_RxCpltCallback+0x3f4>)
 80017ae:	6809      	ldr	r1, [r1, #0]
 80017b0:	6351      	str	r1, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speedM2);
 80017b2:	4912      	ldr	r1, [pc, #72]	; (80017fc <HAL_UART_RxCpltCallback+0x3e8>)
 80017b4:	6809      	ldr	r1, [r1, #0]
 80017b6:	6391      	str	r1, [r2, #56]	; 0x38
 80017b8:	e69c      	b.n	80014f4 <HAL_UART_RxCpltCallback+0xe0>
	if(medir_vel == false && runMode == true){
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_UART_RxCpltCallback+0x3ec>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	f47f ae9b 	bne.w	80014fa <HAL_UART_RxCpltCallback+0xe6>
		w_targetM1 = speedM1/100.0;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_UART_RxCpltCallback+0x3f4>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f7fe fe14 	bl	80003f4 <__aeabi_i2d>
 80017cc:	2200      	movs	r2, #0
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_UART_RxCpltCallback+0x3f8>)
 80017d0:	f7fe ffa4 	bl	800071c <__aeabi_ddiv>
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_UART_RxCpltCallback+0x3fc>)
 80017d6:	e9c3 0100 	strd	r0, r1, [r3]
		w_targetM2 = speedM2/100.0;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_UART_RxCpltCallback+0x3e8>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	f7fe fe09 	bl	80003f4 <__aeabi_i2d>
 80017e2:	2200      	movs	r2, #0
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_UART_RxCpltCallback+0x3f8>)
 80017e6:	f7fe ff99 	bl	800071c <__aeabi_ddiv>
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_UART_RxCpltCallback+0x400>)
 80017ec:	e9c3 0100 	strd	r0, r1, [r3]
 80017f0:	e683      	b.n	80014fa <HAL_UART_RxCpltCallback+0xe6>
	if(retorno == 1) returnMsg();
 80017f2:	f7ff faab 	bl	8000d4c <returnMsg>
 80017f6:	e685      	b.n	8001504 <HAL_UART_RxCpltCallback+0xf0>
 80017f8:	40010c00 	.word	0x40010c00
 80017fc:	2000019c 	.word	0x2000019c
 8001800:	2000004c 	.word	0x2000004c
 8001804:	20000be8 	.word	0x20000be8
 8001808:	20000198 	.word	0x20000198
 800180c:	40590000 	.word	0x40590000
 8001810:	20000b28 	.word	0x20000b28
 8001814:	20000b30 	.word	0x20000b30

08001818 <HAL_UART_TxCpltCallback>:
	__NOP();
 8001818:	bf00      	nop
}
 800181a:	4770      	bx	lr

0800181c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800181c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(Led_i_GPIO_Port, Led_i_Pin);
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	4802      	ldr	r0, [pc, #8]	; (800182c <HAL_UART_ErrorCallback+0x10>)
 8001824:	f000 fdca 	bl	80023bc <HAL_GPIO_TogglePin>
}
 8001828:	bd08      	pop	{r3, pc}
 800182a:	bf00      	nop
 800182c:	40011000 	.word	0x40011000

08001830 <HAL_TIM_PeriodElapsedCallback>:
	cont_controle++;
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001832:	6813      	ldr	r3, [r2, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	6013      	str	r3, [r2, #0]
	if (cont_controle == cont_loop){
 8001838:	2bc8      	cmp	r3, #200	; 0xc8
 800183a:	d000      	beq.n	800183e <HAL_TIM_PeriodElapsedCallback+0xe>
}
 800183c:	4770      	bx	lr
		cont_controle = 0;
 800183e:	4613      	mov	r3, r2
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
		flag_controle = true;
 8001844:	2301      	movs	r3, #1
 8001846:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001848:	6013      	str	r3, [r2, #0]
		flag_velocidade	= true;
 800184a:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	e7f5      	b.n	800183c <HAL_TIM_PeriodElapsedCallback+0xc>
 8001850:	2000012c 	.word	0x2000012c
 8001854:	20000178 	.word	0x20000178
 8001858:	2000017c 	.word	0x2000017c

0800185c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800185e:	e7fe      	b.n	800185e <Error_Handler+0x2>

08001860 <MX_TIM2_Init>:
{
 8001860:	b500      	push	{lr}
 8001862:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001864:	2300      	movs	r3, #0
 8001866:	930a      	str	r3, [sp, #40]	; 0x28
 8001868:	930b      	str	r3, [sp, #44]	; 0x2c
 800186a:	930c      	str	r3, [sp, #48]	; 0x30
 800186c:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	9308      	str	r3, [sp, #32]
 8001870:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	9304      	str	r3, [sp, #16]
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	9306      	str	r3, [sp, #24]
 800187e:	9307      	str	r3, [sp, #28]
	htim2.Instance = TIM2;
 8001880:	482d      	ldr	r0, [pc, #180]	; (8001938 <MX_TIM2_Init+0xd8>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 0;
 8001888:	6043      	str	r3, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 3199;
 800188c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001890:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001896:	f001 fac7 	bl	8002e28 <HAL_TIM_Base_Init>
 800189a:	2800      	cmp	r0, #0
 800189c:	d13d      	bne.n	800191a <MX_TIM2_Init+0xba>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018a4:	a90a      	add	r1, sp, #40	; 0x28
 80018a6:	4824      	ldr	r0, [pc, #144]	; (8001938 <MX_TIM2_Init+0xd8>)
 80018a8:	f001 fc13 	bl	80030d2 <HAL_TIM_ConfigClockSource>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d136      	bne.n	800191e <MX_TIM2_Init+0xbe>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018b0:	4821      	ldr	r0, [pc, #132]	; (8001938 <MX_TIM2_Init+0xd8>)
 80018b2:	f001 fae5 	bl	8002e80 <HAL_TIM_PWM_Init>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d133      	bne.n	8001922 <MX_TIM2_Init+0xc2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018be:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c0:	a908      	add	r1, sp, #32
 80018c2:	481d      	ldr	r0, [pc, #116]	; (8001938 <MX_TIM2_Init+0xd8>)
 80018c4:	f001 fd56 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	bb68      	cbnz	r0, 8001926 <MX_TIM2_Init+0xc6>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ca:	2360      	movs	r3, #96	; 0x60
 80018cc:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 80018ce:	2200      	movs	r2, #0
 80018d0:	9202      	str	r2, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d2:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d4:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	a901      	add	r1, sp, #4
 80018d8:	4817      	ldr	r0, [pc, #92]	; (8001938 <MX_TIM2_Init+0xd8>)
 80018da:	f001 fb87 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 80018de:	bb20      	cbnz	r0, 800192a <MX_TIM2_Init+0xca>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80018e0:	4815      	ldr	r0, [pc, #84]	; (8001938 <MX_TIM2_Init+0xd8>)
 80018e2:	6802      	ldr	r2, [r0, #0]
 80018e4:	6993      	ldr	r3, [r2, #24]
 80018e6:	f023 0308 	bic.w	r3, r3, #8
 80018ea:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ec:	2204      	movs	r2, #4
 80018ee:	eb0d 0102 	add.w	r1, sp, r2
 80018f2:	f001 fb7b 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 80018f6:	b9d0      	cbnz	r0, 800192e <MX_TIM2_Init+0xce>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <MX_TIM2_Init+0xd8>)
 80018fa:	6802      	ldr	r2, [r0, #0]
 80018fc:	6993      	ldr	r3, [r2, #24]
 80018fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001902:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001904:	2208      	movs	r2, #8
 8001906:	a901      	add	r1, sp, #4
 8001908:	f001 fb70 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 800190c:	b988      	cbnz	r0, 8001932 <MX_TIM2_Init+0xd2>
	HAL_TIM_MspPostInit(&htim2);
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <MX_TIM2_Init+0xd8>)
 8001910:	f000 fa3e 	bl	8001d90 <HAL_TIM_MspPostInit>
}
 8001914:	b00f      	add	sp, #60	; 0x3c
 8001916:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800191a:	f7ff ff9f 	bl	800185c <Error_Handler>
		Error_Handler();
 800191e:	f7ff ff9d 	bl	800185c <Error_Handler>
		Error_Handler();
 8001922:	f7ff ff9b 	bl	800185c <Error_Handler>
		Error_Handler();
 8001926:	f7ff ff99 	bl	800185c <Error_Handler>
		Error_Handler();
 800192a:	f7ff ff97 	bl	800185c <Error_Handler>
		Error_Handler();
 800192e:	f7ff ff95 	bl	800185c <Error_Handler>
		Error_Handler();
 8001932:	f7ff ff93 	bl	800185c <Error_Handler>
 8001936:	bf00      	nop
 8001938:	20000be8 	.word	0x20000be8

0800193c <MX_TIM3_Init>:
{
 800193c:	b500      	push	{lr}
 800193e:	b08d      	sub	sp, #52	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	2300      	movs	r3, #0
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	9302      	str	r3, [sp, #8]
	htim3.Instance = TIM3;
 8001946:	4813      	ldr	r0, [pc, #76]	; (8001994 <MX_TIM3_Init+0x58>)
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <MX_TIM3_Init+0x5c>)
 800194a:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 0;
 800194c:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 59999;
 8001950:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001954:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800195a:	2201      	movs	r2, #1
 800195c:	9203      	str	r2, [sp, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800195e:	9304      	str	r3, [sp, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001960:	9205      	str	r2, [sp, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001962:	9306      	str	r3, [sp, #24]
	sConfig.IC1Filter = 0;
 8001964:	9307      	str	r3, [sp, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001966:	9308      	str	r3, [sp, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001968:	9209      	str	r2, [sp, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800196a:	930a      	str	r3, [sp, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800196c:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800196e:	a903      	add	r1, sp, #12
 8001970:	f001 fab2 	bl	8002ed8 <HAL_TIM_Encoder_Init>
 8001974:	b950      	cbnz	r0, 800198c <MX_TIM3_Init+0x50>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800197c:	a901      	add	r1, sp, #4
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM3_Init+0x58>)
 8001980:	f001 fcf8 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	b920      	cbnz	r0, 8001990 <MX_TIM3_Init+0x54>
}
 8001986:	b00d      	add	sp, #52	; 0x34
 8001988:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800198c:	f7ff ff66 	bl	800185c <Error_Handler>
		Error_Handler();
 8001990:	f7ff ff64 	bl	800185c <Error_Handler>
 8001994:	20000b80 	.word	0x20000b80
 8001998:	40000400 	.word	0x40000400

0800199c <MX_TIM4_Init>:
{
 800199c:	b500      	push	{lr}
 800199e:	b08d      	sub	sp, #52	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	9302      	str	r3, [sp, #8]
	htim4.Instance = TIM4;
 80019a6:	4813      	ldr	r0, [pc, #76]	; (80019f4 <MX_TIM4_Init+0x58>)
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_TIM4_Init+0x5c>)
 80019aa:	6002      	str	r2, [r0, #0]
	htim4.Init.Prescaler = 0;
 80019ac:	6043      	str	r3, [r0, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	6083      	str	r3, [r0, #8]
	htim4.Init.Period = 59999;
 80019b0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80019b4:	60c2      	str	r2, [r0, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	6103      	str	r3, [r0, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019ba:	2201      	movs	r2, #1
 80019bc:	9203      	str	r2, [sp, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019be:	9304      	str	r3, [sp, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019c0:	9205      	str	r2, [sp, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019c2:	9306      	str	r3, [sp, #24]
	sConfig.IC1Filter = 0;
 80019c4:	9307      	str	r3, [sp, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019c6:	9308      	str	r3, [sp, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c8:	9209      	str	r2, [sp, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ca:	930a      	str	r3, [sp, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80019cc:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019ce:	a903      	add	r1, sp, #12
 80019d0:	f001 fa82 	bl	8002ed8 <HAL_TIM_Encoder_Init>
 80019d4:	b950      	cbnz	r0, 80019ec <MX_TIM4_Init+0x50>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019dc:	a901      	add	r1, sp, #4
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_TIM4_Init+0x58>)
 80019e0:	f001 fcc8 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 80019e4:	b920      	cbnz	r0, 80019f0 <MX_TIM4_Init+0x54>
}
 80019e6:	b00d      	add	sp, #52	; 0x34
 80019e8:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80019ec:	f7ff ff36 	bl	800185c <Error_Handler>
		Error_Handler();
 80019f0:	f7ff ff34 	bl	800185c <Error_Handler>
 80019f4:	20000b38 	.word	0x20000b38
 80019f8:	40000800 	.word	0x40000800

080019fc <MX_USART2_UART_Init>:
{
 80019fc:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 80019fe:	480a      	ldr	r0, [pc, #40]	; (8001a28 <MX_USART2_UART_Init+0x2c>)
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_USART2_UART_Init+0x30>)
 8001a02:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8001a04:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a08:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a0e:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a10:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a12:	220c      	movs	r2, #12
 8001a14:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a1a:	f001 fd73 	bl	8003504 <HAL_UART_Init>
 8001a1e:	b900      	cbnz	r0, 8001a22 <MX_USART2_UART_Init+0x26>
}
 8001a20:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001a22:	f7ff ff1b 	bl	800185c <Error_Handler>
 8001a26:	bf00      	nop
 8001a28:	20000c30 	.word	0x20000c30
 8001a2c:	40004400 	.word	0x40004400

08001a30 <SystemClock_Config>:
{
 8001a30:	b500      	push	{lr}
 8001a32:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a34:	2300      	movs	r3, #0
 8001a36:	9307      	str	r3, [sp, #28]
 8001a38:	9308      	str	r3, [sp, #32]
 8001a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a3c:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	9303      	str	r3, [sp, #12]
 8001a44:	9304      	str	r3, [sp, #16]
 8001a46:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a48:	2202      	movs	r2, #2
 8001a4a:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	910a      	str	r1, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a50:	2110      	movs	r1, #16
 8001a52:	910b      	str	r1, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a54:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a56:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a58:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001a5c:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5e:	a806      	add	r0, sp, #24
 8001a60:	f000 fccc 	bl	80023fc <HAL_RCC_OscConfig>
 8001a64:	b980      	cbnz	r0, 8001a88 <SystemClock_Config+0x58>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	230f      	movs	r3, #15
 8001a68:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a76:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a78:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a7a:	a801      	add	r0, sp, #4
 8001a7c:	f000 fefc 	bl	8002878 <HAL_RCC_ClockConfig>
 8001a80:	b920      	cbnz	r0, 8001a8c <SystemClock_Config+0x5c>
}
 8001a82:	b011      	add	sp, #68	; 0x44
 8001a84:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001a88:	f7ff fee8 	bl	800185c <Error_Handler>
		Error_Handler();
 8001a8c:	f7ff fee6 	bl	800185c <Error_Handler>

08001a90 <main>:
{
 8001a90:	b538      	push	{r3, r4, r5, lr}
	HAL_Init();
 8001a92:	f000 fa6d 	bl	8001f70 <HAL_Init>
	SystemClock_Config();
 8001a96:	f7ff ffcb 	bl	8001a30 <SystemClock_Config>
	MX_GPIO_Init();
 8001a9a:	f7ff f971 	bl	8000d80 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001a9e:	f7ff fedf 	bl	8001860 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001aa2:	f7ff ff4b 	bl	800193c <MX_TIM3_Init>
	MX_TIM4_Init();
 8001aa6:	f7ff ff79 	bl	800199c <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8001aaa:	f7ff ffa7 	bl	80019fc <MX_USART2_UART_Init>
	HAL_UART_Transmit_IT(&huart2, tx_buffer, size_msg);
 8001aae:	4d58      	ldr	r5, [pc, #352]	; (8001c10 <main+0x180>)
 8001ab0:	4c58      	ldr	r4, [pc, #352]	; (8001c14 <main+0x184>)
 8001ab2:	782a      	ldrb	r2, [r5, #0]
 8001ab4:	4958      	ldr	r1, [pc, #352]	; (8001c18 <main+0x188>)
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f001 fd53 	bl	8003562 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart2, configFlag, 11);// envia a msg inicial
 8001abc:	220b      	movs	r2, #11
 8001abe:	4957      	ldr	r1, [pc, #348]	; (8001c1c <main+0x18c>)
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f001 fd4e 	bl	8003562 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, rx_buffer, size_msg);// Faz com que o robô ligue o receptor de msg
 8001ac6:	782a      	ldrb	r2, [r5, #0]
 8001ac8:	4955      	ldr	r1, [pc, #340]	; (8001c20 <main+0x190>)
 8001aca:	4620      	mov	r0, r4
 8001acc:	f001 ff0b 	bl	80038e6 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Inicia o Timer 2 do PWM
 8001ad0:	4c54      	ldr	r4, [pc, #336]	; (8001c24 <main+0x194>)
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f001 fb7b 	bl	80031d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ada:	2100      	movs	r1, #0
 8001adc:	4620      	mov	r0, r4
 8001ade:	f001 fb77 	bl	80031d0 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2); // Inicia o Timer 2 no modo de interrupção.
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f001 f856 	bl	8002b94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Inicia o encoder M1
 8001ae8:	213c      	movs	r1, #60	; 0x3c
 8001aea:	484f      	ldr	r0, [pc, #316]	; (8001c28 <main+0x198>)
 8001aec:	f001 fbde 	bl	80032ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //Inicia o módulo de leitura do encoder M2
 8001af0:	213c      	movs	r1, #60	; 0x3c
 8001af2:	484e      	ldr	r0, [pc, #312]	; (8001c2c <main+0x19c>)
 8001af4:	f001 fbda 	bl	80032ac <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(Led_i_GPIO_Port, Led_i_Pin, SET);// Desliga o led da placa de desenvolvimento
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001afe:	484c      	ldr	r0, [pc, #304]	; (8001c30 <main+0x1a0>)
 8001b00:	f000 fc56 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2A_GPIO_Port, M2A_Pin, SET);
 8001b04:	4c4b      	ldr	r4, [pc, #300]	; (8001c34 <main+0x1a4>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f000 fc4f 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2B_GPIO_Port, M2B_Pin, RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f000 fc49 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1A_GPIO_Port, M1A_Pin, SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2110      	movs	r1, #16
 8001b22:	4620      	mov	r0, r4
 8001b24:	f000 fc44 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1B_GPIO_Port, M1B_Pin, RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f000 fc3f 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Hbridge_GPIO_Port,Hbridge_Pin,SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b38:	483f      	ldr	r0, [pc, #252]	; (8001c38 <main+0x1a8>)
 8001b3a:	f000 fc39 	bl	80023b0 <HAL_GPIO_WritePin>
	for (int i = 0; i < vetor_dados; i++) {
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e00c      	b.n	8001b5c <main+0xcc>
		velocidadesM1[i] = 0.0;
 8001b42:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <main+0x1ac>)
 8001b44:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001b48:	2000      	movs	r0, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	e9c2 0100 	strd	r0, r1, [r2]
		velocidadesM2[i] = 0.0;
 8001b50:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <main+0x1b0>)
 8001b52:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001b56:	e9c2 0100 	strd	r0, r1, [r2]
	for (int i = 0; i < vetor_dados; i++) {
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <main+0x1b4>)
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dcee      	bgt.n	8001b42 <main+0xb2>
 8001b64:	e009      	b.n	8001b7a <main+0xea>
		if (testEncoder == true) testPulsos();
 8001b66:	f7ff f971 	bl	8000e4c <testPulsos>
 8001b6a:	e00a      	b.n	8001b82 <main+0xf2>
		if(flag_velocidade == true) speedGet();
 8001b6c:	f7fe ffa4 	bl	8000ab8 <speedGet>
 8001b70:	e00b      	b.n	8001b8a <main+0xfa>
		if (medir_vel == true){
 8001b72:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <main+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d012      	beq.n	8001ba0 <main+0x110>
		if (testEncoder == true) testPulsos();
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <main+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d0f1      	beq.n	8001b66 <main+0xd6>
		if(flag_velocidade == true) speedGet();
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <main+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d0f0      	beq.n	8001b6c <main+0xdc>
		if(flag_controle == true){
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <main+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d1ef      	bne.n	8001b72 <main+0xe2>
			if(controlar == true) controlador();
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <main+0x1c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d1eb      	bne.n	8001b72 <main+0xe2>
 8001b9a:	f7ff fa13 	bl	8000fc4 <controlador>
 8001b9e:	e7e8      	b.n	8001b72 <main+0xe2>
			if(stopMedir == true){
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <main+0x1cc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00d      	beq.n	8001bc4 <main+0x134>
			if (cont_vel >= vetor_dados){
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <main+0x1d0>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <main+0x1b4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbe2      	blt.n	8001b7a <main+0xea>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <main+0x194>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
				medir();
 8001bbe:	f7ff faef 	bl	80011a0 <medir>
 8001bc2:	e7da      	b.n	8001b7a <main+0xea>
				stopMedir = false;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <main+0x1cc>)
 8001bc8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <main+0x194>)
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	6353      	str	r3, [r2, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001bd0:	6393      	str	r3, [r2, #56]	; 0x38
				for (int i = 0; i < vetor_dados; i++) {
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <main+0x1b4>)
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dd0d      	ble.n	8001bf6 <main+0x166>
					velocidadesM1[i] = 0.0;
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <main+0x1ac>)
 8001bdc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001be0:	2000      	movs	r0, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	e9c2 0100 	strd	r0, r1, [r2]
					velocidadesM2[i] = 0.0;
 8001be8:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <main+0x1b0>)
 8001bea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001bee:	e9c2 0100 	strd	r0, r1, [r2]
				for (int i = 0; i < vetor_dados; i++) {
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	e7ed      	b.n	8001bd2 <main+0x142>
				HAL_TIM_Base_Stop_IT(&htim2);
 8001bf6:	4c0b      	ldr	r4, [pc, #44]	; (8001c24 <main+0x194>)
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f000 ffff 	bl	8002bfc <HAL_TIM_Base_Stop_IT>
				HAL_Delay(1000); // Delay para esperar zerar a velocidade dos motores
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f000 f9d9 	bl	8001fb8 <HAL_Delay>
				HAL_TIM_Base_Start_IT(&htim2);
 8001c06:	4620      	mov	r0, r4
 8001c08:	f000 ffc4 	bl	8002b94 <HAL_TIM_Base_Start_IT>
 8001c0c:	e7cc      	b.n	8001ba8 <main+0x118>
 8001c0e:	bf00      	nop
 8001c10:	20000050 	.word	0x20000050
 8001c14:	20000c30 	.word	0x20000c30
 8001c18:	20000058 	.word	0x20000058
 8001c1c:	20000038 	.word	0x20000038
 8001c20:	20000bc8 	.word	0x20000bc8
 8001c24:	20000be8 	.word	0x20000be8
 8001c28:	20000b80 	.word	0x20000b80
 8001c2c:	20000b38 	.word	0x20000b38
 8001c30:	40011000 	.word	0x40011000
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	200001a8 	.word	0x200001a8
 8001c40:	20000658 	.word	0x20000658
 8001c44:	20000064 	.word	0x20000064
 8001c48:	20000180 	.word	0x20000180
 8001c4c:	200001a0 	.word	0x200001a0
 8001c50:	2000017c 	.word	0x2000017c
 8001c54:	20000178 	.word	0x20000178
 8001c58:	20000044 	.word	0x20000044
 8001c5c:	20000054 	.word	0x20000054
 8001c60:	20000130 	.word	0x20000130

08001c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_MspInit+0x3c>)
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	619a      	str	r2, [r3, #24]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	f002 0201 	and.w	r2, r2, #1
 8001c76:	9200      	str	r2, [sp, #0]
 8001c78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_MspInit+0x40>)
 8001c8e:	6853      	ldr	r3, [r2, #4]
 8001c90:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	b002      	add	sp, #8
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001ca8:	6803      	ldr	r3, [r0, #0]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cae:	d000      	beq.n	8001cb2 <HAL_TIM_Base_MspInit+0xa>
 8001cb0:	4770      	bx	lr
{
 8001cb2:	b500      	push	{lr}
 8001cb4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	61da      	str	r2, [r3, #28]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4611      	mov	r1, r2
 8001cd0:	201c      	movs	r0, #28
 8001cd2:	f000 f997 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cd6:	201c      	movs	r0, #28
 8001cd8:	f000 f9c8 	bl	800206c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cdc:	b003      	add	sp, #12
 8001cde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ce4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ce4:	b500      	push	{lr}
 8001ce6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9304      	str	r3, [sp, #16]
 8001cec:	9305      	str	r3, [sp, #20]
 8001cee:	9306      	str	r3, [sp, #24]
 8001cf0:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM3)
 8001cf2:	6803      	ldr	r3, [r0, #0]
 8001cf4:	4a21      	ldr	r2, [pc, #132]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x98>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d005      	beq.n	8001d06 <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 8001cfa:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d01f      	beq.n	8001d40 <HAL_TIM_Encoder_MspInit+0x5c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d00:	b009      	add	sp, #36	; 0x24
 8001d02:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	f042 0202 	orr.w	r2, r2, #2
 8001d0e:	61da      	str	r2, [r3, #28]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	f002 0202 	and.w	r2, r2, #2
 8001d16:	9200      	str	r2, [sp, #0]
 8001d18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	f042 0204 	orr.w	r2, r2, #4
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	a904      	add	r1, sp, #16
 8001d38:	4813      	ldr	r0, [pc, #76]	; (8001d88 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001d3a:	f000 fa29 	bl	8002190 <HAL_GPIO_Init>
 8001d3e:	e7df      	b.n	8001d00 <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	f042 0204 	orr.w	r2, r2, #4
 8001d48:	61da      	str	r2, [r3, #28]
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	f002 0204 	and.w	r2, r2, #4
 8001d50:	9202      	str	r2, [sp, #8]
 8001d52:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	a904      	add	r1, sp, #16
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001d74:	f000 fa0c 	bl	8002190 <HAL_GPIO_Init>
}
 8001d78:	e7c2      	b.n	8001d00 <HAL_TIM_Encoder_MspInit+0x1c>
 8001d7a:	bf00      	nop
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010800 	.word	0x40010800
 8001d8c:	40010c00 	.word	0x40010c00

08001d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d90:	b510      	push	{r4, lr}
 8001d92:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	2300      	movs	r3, #0
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	9303      	str	r3, [sp, #12]
 8001d9a:	9304      	str	r3, [sp, #16]
 8001d9c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8001d9e:	6803      	ldr	r3, [r0, #0]
 8001da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da4:	d001      	beq.n	8001daa <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001da6:	b006      	add	sp, #24
 8001da8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	f042 0208 	orr.w	r2, r2, #8
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	f002 0208 	and.w	r2, r2, #8
 8001dbc:	9200      	str	r2, [sp, #0]
 8001dbe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	f042 0204 	orr.w	r2, r2, #4
 8001dc6:	619a      	str	r2, [r3, #24]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001dd2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001dd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2402      	movs	r4, #2
 8001dda:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	a902      	add	r1, sp, #8
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <HAL_TIM_MspPostInit+0x78>)
 8001de2:	f000 f9d5 	bl	8002190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	a902      	add	r1, sp, #8
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <HAL_TIM_MspPostInit+0x7c>)
 8001df4:	f000 f9cc 	bl	8002190 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001df8:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <HAL_TIM_MspPostInit+0x80>)
 8001dfa:	6853      	ldr	r3, [r2, #4]
 8001dfc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e04:	6053      	str	r3, [r2, #4]
}
 8001e06:	e7ce      	b.n	8001da6 <HAL_TIM_MspPostInit+0x16>
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010000 	.word	0x40010000

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b530      	push	{r4, r5, lr}
 8001e16:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	9303      	str	r3, [sp, #12]
 8001e1e:	9304      	str	r3, [sp, #16]
 8001e20:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART2)
 8001e22:	6802      	ldr	r2, [r0, #0]
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_UART_MspInit+0x80>)
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e2a:	b007      	add	sp, #28
 8001e2c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e38:	61da      	str	r2, [r3, #28]
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	f042 0204 	orr.w	r2, r2, #4
 8001e4a:	619a      	str	r2, [r3, #24]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e56:	2304      	movs	r3, #4
 8001e58:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	4d0d      	ldr	r5, [pc, #52]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e64:	a902      	add	r1, sp, #8
 8001e66:	4628      	mov	r0, r5
 8001e68:	f000 f992 	bl	8002190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2400      	movs	r4, #0
 8001e72:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	eb0d 0103 	add.w	r1, sp, r3
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f000 f988 	bl	8002190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e80:	4622      	mov	r2, r4
 8001e82:	4621      	mov	r1, r4
 8001e84:	2026      	movs	r0, #38	; 0x26
 8001e86:	f000 f8bd 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e8a:	2026      	movs	r0, #38	; 0x26
 8001e8c:	f000 f8ee 	bl	800206c <HAL_NVIC_EnableIRQ>
}
 8001e90:	e7cb      	b.n	8001e2a <HAL_UART_MspInit+0x16>
 8001e92:	bf00      	nop
 8001e94:	40004400 	.word	0x40004400
 8001e98:	40010800 	.word	0x40010800

08001e9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler>

08001e9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <HardFault_Handler>

08001ea0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <MemManage_Handler>

08001ea2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler>

08001ea4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler>

08001ea6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea6:	4770      	bx	lr

08001ea8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	4770      	bx	lr

08001eaa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eae:	f000 f871 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb2:	bd08      	pop	{r3, pc}

08001eb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <TIM2_IRQHandler+0xc>)
 8001eb8:	f000 febe 	bl	8002c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ebc:	bd08      	pop	{r3, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000be8 	.word	0x20000be8

08001ec4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ec6:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <USART2_IRQHandler+0xc>)
 8001ec8:	f001 fbf0 	bl	80036ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ecc:	bd08      	pop	{r3, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000c30 	.word	0x20000c30

08001ed4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	4770      	bx	lr
	...

08001ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eda:	490d      	ldr	r1, [pc, #52]	; (8001f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	; (8001f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001efe:	f7ff ffe9 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f02:	f002 fda1 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f06:	f7ff fdc3 	bl	8001a90 <main>
  bx lr
 8001f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001f14:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8001f18:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001f1c:	20000c78 	.word	0x20000c78

08001f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC1_2_IRQHandler>
	...

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_InitTick+0x40>)
 8001f2a:	7818      	ldrb	r0, [r3, #0]
 8001f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f30:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f34:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_InitTick+0x44>)
 8001f36:	6810      	ldr	r0, [r2, #0]
 8001f38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f3c:	f000 f8a4 	bl	8002088 <HAL_SYSTICK_Config>
 8001f40:	b968      	cbnz	r0, 8001f5e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	2c0f      	cmp	r4, #15
 8001f44:	d901      	bls.n	8001f4a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
 8001f48:	e00a      	b.n	8001f60 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f52:	f000 f857 	bl	8002004 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_InitTick+0x48>)
 8001f58:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
}
 8001f60:	bd10      	pop	{r4, pc}
 8001f62:	bf00      	nop
 8001f64:	2000006c 	.word	0x2000006c
 8001f68:	20000068 	.word	0x20000068
 8001f6c:	20000070 	.word	0x20000070

08001f70 <HAL_Init>:
{
 8001f70:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_Init+0x20>)
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f043 0310 	orr.w	r3, r3, #16
 8001f7a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 f82f 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f82:	200f      	movs	r0, #15
 8001f84:	f7ff ffce 	bl	8001f24 <HAL_InitTick>
  HAL_MspInit();
 8001f88:	f7ff fe6c 	bl	8001c64 <HAL_MspInit>
}
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	bd08      	pop	{r3, pc}
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <HAL_IncTick+0x10>)
 8001f96:	6811      	ldr	r1, [r2, #0]
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_IncTick+0x14>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	440b      	add	r3, r1
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000c74 	.word	0x20000c74
 8001fa8:	2000006c 	.word	0x2000006c

08001fac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fac:	4b01      	ldr	r3, [pc, #4]	; (8001fb4 <HAL_GetTick+0x8>)
 8001fae:	6818      	ldr	r0, [r3, #0]
}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000c74 	.word	0x20000c74

08001fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff fff6 	bl	8001fac <HAL_GetTick>
 8001fc0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001fc6:	d002      	beq.n	8001fce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_Delay+0x24>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	f7ff ffed 	bl	8001fac <HAL_GetTick>
 8001fd2:	1b40      	subs	r0, r0, r5
 8001fd4:	42a0      	cmp	r0, r4
 8001fd6:	d3fa      	bcc.n	8001fce <HAL_Delay+0x16>
  {
  }
}
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000006c 	.word	0x2000006c

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fe2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fec:	0200      	lsls	r0, r0, #8
 8001fee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ffc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002004:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_NVIC_SetPriority+0x60>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200e:	f1c3 0407 	rsb	r4, r3, #7
 8002012:	2c04      	cmp	r4, #4
 8002014:	bf28      	it	cs
 8002016:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002018:	1d1d      	adds	r5, r3, #4
 800201a:	2d06      	cmp	r5, #6
 800201c:	d918      	bls.n	8002050 <HAL_NVIC_SetPriority+0x4c>
 800201e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 35ff 	mov.w	r5, #4294967295
 8002024:	fa05 f404 	lsl.w	r4, r5, r4
 8002028:	ea21 0104 	bic.w	r1, r1, r4
 800202c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202e:	fa05 f303 	lsl.w	r3, r5, r3
 8002032:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002036:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002038:	2800      	cmp	r0, #0
 800203a:	db0b      	blt.n	8002054 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	0109      	lsls	r1, r1, #4
 800203e:	b2c9      	uxtb	r1, r1
 8002040:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002044:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002048:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800204c:	bc30      	pop	{r4, r5}
 800204e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002050:	2300      	movs	r3, #0
 8002052:	e7e5      	b.n	8002020 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	f000 000f 	and.w	r0, r0, #15
 8002058:	0109      	lsls	r1, r1, #4
 800205a:	b2c9      	uxtb	r1, r1
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_NVIC_SetPriority+0x64>)
 800205e:	5419      	strb	r1, [r3, r0]
 8002060:	e7f4      	b.n	800204c <HAL_NVIC_SetPriority+0x48>
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00
 8002068:	e000ed14 	.word	0xe000ed14

0800206c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800206c:	2800      	cmp	r0, #0
 800206e:	db07      	blt.n	8002080 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002070:	f000 021f 	and.w	r2, r0, #31
 8002074:	0940      	lsrs	r0, r0, #5
 8002076:	2301      	movs	r3, #1
 8002078:	4093      	lsls	r3, r2
 800207a:	4a02      	ldr	r2, [pc, #8]	; (8002084 <HAL_NVIC_EnableIRQ+0x18>)
 800207c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	3801      	subs	r0, #1
 800208a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800208e:	d20a      	bcs.n	80020a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_SYSTICK_Config+0x24>)
 8002092:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <HAL_SYSTICK_Config+0x28>)
 8002096:	21f0      	movs	r1, #240	; 0xf0
 8002098:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	2000      	movs	r0, #0
 800209e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80020a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d006      	beq.n	80020ca <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	2304      	movs	r3, #4
 80020be:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	2300      	movs	r3, #0
 80020c2:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
 80020c8:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ca:	6802      	ldr	r2, [r0, #0]
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f023 030e 	bic.w	r3, r3, #14
 80020d2:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d4:	6802      	ldr	r2, [r0, #0]
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020e0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80020e2:	2201      	movs	r2, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020ee:	2300      	movs	r3, #0
 80020f0:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 80020f4:	4618      	mov	r0, r3
}
 80020f6:	4770      	bx	lr

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020fa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002102:	2304      	movs	r3, #4
 8002104:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002106:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002108:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210a:	6802      	ldr	r2, [r0, #0]
 800210c:	6813      	ldr	r3, [r2, #0]
 800210e:	f023 030e 	bic.w	r3, r3, #14
 8002112:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002114:	6802      	ldr	r2, [r0, #0]
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_DMA_Abort_IT+0x90>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d014      	beq.n	8002150 <HAL_DMA_Abort_IT+0x58>
 8002126:	3214      	adds	r2, #20
 8002128:	4293      	cmp	r3, r2
 800212a:	d01f      	beq.n	800216c <HAL_DMA_Abort_IT+0x74>
 800212c:	3214      	adds	r2, #20
 800212e:	4293      	cmp	r3, r2
 8002130:	d01e      	beq.n	8002170 <HAL_DMA_Abort_IT+0x78>
 8002132:	3214      	adds	r2, #20
 8002134:	4293      	cmp	r3, r2
 8002136:	d01e      	beq.n	8002176 <HAL_DMA_Abort_IT+0x7e>
 8002138:	3214      	adds	r2, #20
 800213a:	4293      	cmp	r3, r2
 800213c:	d01e      	beq.n	800217c <HAL_DMA_Abort_IT+0x84>
 800213e:	3214      	adds	r2, #20
 8002140:	4293      	cmp	r3, r2
 8002142:	d002      	beq.n	800214a <HAL_DMA_Abort_IT+0x52>
 8002144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002148:	e003      	b.n	8002152 <HAL_DMA_Abort_IT+0x5a>
 800214a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800214e:	e000      	b.n	8002152 <HAL_DMA_Abort_IT+0x5a>
 8002150:	2201      	movs	r2, #1
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_DMA_Abort_IT+0x94>)
 8002154:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002156:	2301      	movs	r3, #1
 8002158:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800215c:	2300      	movs	r3, #0
 800215e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002162:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002164:	b16b      	cbz	r3, 8002182 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002166:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2000      	movs	r0, #0
 800216a:	e7cd      	b.n	8002108 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800216c:	2210      	movs	r2, #16
 800216e:	e7f0      	b.n	8002152 <HAL_DMA_Abort_IT+0x5a>
 8002170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002174:	e7ed      	b.n	8002152 <HAL_DMA_Abort_IT+0x5a>
 8002176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800217a:	e7ea      	b.n	8002152 <HAL_DMA_Abort_IT+0x5a>
 800217c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002180:	e7e7      	b.n	8002152 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2000      	movs	r0, #0
 8002184:	e7c0      	b.n	8002108 <HAL_DMA_Abort_IT+0x10>
 8002186:	bf00      	nop
 8002188:	40020008 	.word	0x40020008
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b4f0      	push	{r4, r5, r6, r7}
 8002192:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002194:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8002196:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002198:	e0a3      	b.n	80022e2 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800219a:	4f7f      	ldr	r7, [pc, #508]	; (8002398 <HAL_GPIO_Init+0x208>)
 800219c:	42bb      	cmp	r3, r7
 800219e:	d010      	beq.n	80021c2 <HAL_GPIO_Init+0x32>
 80021a0:	d907      	bls.n	80021b2 <HAL_GPIO_Init+0x22>
 80021a2:	4f7e      	ldr	r7, [pc, #504]	; (800239c <HAL_GPIO_Init+0x20c>)
 80021a4:	42bb      	cmp	r3, r7
 80021a6:	d00c      	beq.n	80021c2 <HAL_GPIO_Init+0x32>
 80021a8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80021ac:	42bb      	cmp	r3, r7
 80021ae:	d008      	beq.n	80021c2 <HAL_GPIO_Init+0x32>
 80021b0:	e013      	b.n	80021da <HAL_GPIO_Init+0x4a>
 80021b2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80021b6:	42bb      	cmp	r3, r7
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x32>
 80021ba:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80021be:	42bb      	cmp	r3, r7
 80021c0:	d107      	bne.n	80021d2 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021c2:	688b      	ldr	r3, [r1, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d058      	beq.n	800227a <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d051      	beq.n	8002270 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80021cc:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ce:	2508      	movs	r5, #8
 80021d0:	e003      	b.n	80021da <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80021d2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80021d6:	42bb      	cmp	r3, r7
 80021d8:	d0f3      	beq.n	80021c2 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021da:	2eff      	cmp	r6, #255	; 0xff
 80021dc:	d84f      	bhi.n	800227e <HAL_GPIO_Init+0xee>
 80021de:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e0:	2eff      	cmp	r6, #255	; 0xff
 80021e2:	d84f      	bhi.n	8002284 <HAL_GPIO_Init+0xf4>
 80021e4:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e6:	f8dc 3000 	ldr.w	r3, [ip]
 80021ea:	270f      	movs	r7, #15
 80021ec:	4097      	lsls	r7, r2
 80021ee:	ea23 0307 	bic.w	r3, r3, r7
 80021f2:	fa05 f202 	lsl.w	r2, r5, r2
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fc:	684b      	ldr	r3, [r1, #4]
 80021fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002202:	d06d      	beq.n	80022e0 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <HAL_GPIO_Init+0x210>)
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	619a      	str	r2, [r3, #24]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002218:	08a2      	lsrs	r2, r4, #2
 800221a:	1c97      	adds	r7, r2, #2
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_GPIO_Init+0x214>)
 800221e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002222:	f004 0703 	and.w	r7, r4, #3
 8002226:	00bf      	lsls	r7, r7, #2
 8002228:	f04f 0c0f 	mov.w	ip, #15
 800222c:	fa0c fc07 	lsl.w	ip, ip, r7
 8002230:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002234:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_GPIO_Init+0x218>)
 8002236:	4298      	cmp	r0, r3
 8002238:	d02a      	beq.n	8002290 <HAL_GPIO_Init+0x100>
 800223a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223e:	4298      	cmp	r0, r3
 8002240:	f000 808a 	beq.w	8002358 <HAL_GPIO_Init+0x1c8>
 8002244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002248:	4298      	cmp	r0, r3
 800224a:	f000 8087 	beq.w	800235c <HAL_GPIO_Init+0x1cc>
 800224e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002252:	4298      	cmp	r0, r3
 8002254:	d01a      	beq.n	800228c <HAL_GPIO_Init+0xfc>
 8002256:	2304      	movs	r3, #4
 8002258:	e01b      	b.n	8002292 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800225a:	68cd      	ldr	r5, [r1, #12]
          break;
 800225c:	e7bd      	b.n	80021da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800225e:	68cd      	ldr	r5, [r1, #12]
 8002260:	3504      	adds	r5, #4
          break;
 8002262:	e7ba      	b.n	80021da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002264:	68cd      	ldr	r5, [r1, #12]
 8002266:	3508      	adds	r5, #8
          break;
 8002268:	e7b7      	b.n	80021da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800226a:	68cd      	ldr	r5, [r1, #12]
 800226c:	350c      	adds	r5, #12
          break;
 800226e:	e7b4      	b.n	80021da <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002270:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002272:	2508      	movs	r5, #8
 8002274:	e7b1      	b.n	80021da <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002276:	2500      	movs	r5, #0
 8002278:	e7af      	b.n	80021da <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227a:	2504      	movs	r5, #4
 800227c:	e7ad      	b.n	80021da <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800227e:	f100 0c04 	add.w	ip, r0, #4
 8002282:	e7ad      	b.n	80021e0 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002284:	f1a4 0208 	sub.w	r2, r4, #8
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	e7ac      	b.n	80021e6 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800228c:	2303      	movs	r3, #3
 800228e:	e000      	b.n	8002292 <HAL_GPIO_Init+0x102>
 8002290:	2300      	movs	r3, #0
 8002292:	40bb      	lsls	r3, r7
 8002294:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8002298:	3202      	adds	r2, #2
 800229a:	4f42      	ldr	r7, [pc, #264]	; (80023a4 <HAL_GPIO_Init+0x214>)
 800229c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a0:	684b      	ldr	r3, [r1, #4]
 80022a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80022a6:	d05b      	beq.n	8002360 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a8:	4a40      	ldr	r2, [pc, #256]	; (80023ac <HAL_GPIO_Init+0x21c>)
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	4333      	orrs	r3, r6
 80022ae:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b0:	684b      	ldr	r3, [r1, #4]
 80022b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022b6:	d059      	beq.n	800236c <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022b8:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <HAL_GPIO_Init+0x21c>)
 80022ba:	6853      	ldr	r3, [r2, #4]
 80022bc:	4333      	orrs	r3, r6
 80022be:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c0:	684b      	ldr	r3, [r1, #4]
 80022c2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80022c6:	d057      	beq.n	8002378 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c8:	4a38      	ldr	r2, [pc, #224]	; (80023ac <HAL_GPIO_Init+0x21c>)
 80022ca:	6893      	ldr	r3, [r2, #8]
 80022cc:	4333      	orrs	r3, r6
 80022ce:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d0:	684b      	ldr	r3, [r1, #4]
 80022d2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80022d6:	d055      	beq.n	8002384 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022d8:	4a34      	ldr	r2, [pc, #208]	; (80023ac <HAL_GPIO_Init+0x21c>)
 80022da:	68d3      	ldr	r3, [r2, #12]
 80022dc:	431e      	orrs	r6, r3
 80022de:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80022e0:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e2:	680b      	ldr	r3, [r1, #0]
 80022e4:	fa33 f204 	lsrs.w	r2, r3, r4
 80022e8:	d052      	beq.n	8002390 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80022ea:	2201      	movs	r2, #1
 80022ec:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 80022f2:	ea32 0303 	bics.w	r3, r2, r3
 80022f6:	d1f3      	bne.n	80022e0 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 80022f8:	684b      	ldr	r3, [r1, #4]
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	f63f af4d 	bhi.w	800219a <HAL_GPIO_Init+0xa>
 8002300:	2b12      	cmp	r3, #18
 8002302:	f63f af6a 	bhi.w	80021da <HAL_GPIO_Init+0x4a>
 8002306:	a701      	add	r7, pc, #4	; (adr r7, 800230c <HAL_GPIO_Init+0x17c>)
 8002308:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 800230c:	080021c3 	.word	0x080021c3
 8002310:	0800225b 	.word	0x0800225b
 8002314:	08002265 	.word	0x08002265
 8002318:	08002277 	.word	0x08002277
 800231c:	080021db 	.word	0x080021db
 8002320:	080021db 	.word	0x080021db
 8002324:	080021db 	.word	0x080021db
 8002328:	080021db 	.word	0x080021db
 800232c:	080021db 	.word	0x080021db
 8002330:	080021db 	.word	0x080021db
 8002334:	080021db 	.word	0x080021db
 8002338:	080021db 	.word	0x080021db
 800233c:	080021db 	.word	0x080021db
 8002340:	080021db 	.word	0x080021db
 8002344:	080021db 	.word	0x080021db
 8002348:	080021db 	.word	0x080021db
 800234c:	080021db 	.word	0x080021db
 8002350:	0800225f 	.word	0x0800225f
 8002354:	0800226b 	.word	0x0800226b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002358:	2301      	movs	r3, #1
 800235a:	e79a      	b.n	8002292 <HAL_GPIO_Init+0x102>
 800235c:	2302      	movs	r3, #2
 800235e:	e798      	b.n	8002292 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_GPIO_Init+0x21c>)
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	ea23 0306 	bic.w	r3, r3, r6
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e7a1      	b.n	80022b0 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_GPIO_Init+0x21c>)
 800236e:	6853      	ldr	r3, [r2, #4]
 8002370:	ea23 0306 	bic.w	r3, r3, r6
 8002374:	6053      	str	r3, [r2, #4]
 8002376:	e7a3      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_GPIO_Init+0x21c>)
 800237a:	6893      	ldr	r3, [r2, #8]
 800237c:	ea23 0306 	bic.w	r3, r3, r6
 8002380:	6093      	str	r3, [r2, #8]
 8002382:	e7a5      	b.n	80022d0 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_GPIO_Init+0x21c>)
 8002386:	68d3      	ldr	r3, [r2, #12]
 8002388:	ea23 0606 	bic.w	r6, r3, r6
 800238c:	60d6      	str	r6, [r2, #12]
 800238e:	e7a7      	b.n	80022e0 <HAL_GPIO_Init+0x150>
  }
}
 8002390:	b002      	add	sp, #8
 8002392:	bcf0      	pop	{r4, r5, r6, r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	10220000 	.word	0x10220000
 800239c:	10310000 	.word	0x10310000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40010800 	.word	0x40010800
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b0:	b10a      	cbz	r2, 80023b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	6101      	str	r1, [r0, #16]
 80023b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b6:	0409      	lsls	r1, r1, #16
 80023b8:	6101      	str	r1, [r0, #16]
  }
}
 80023ba:	4770      	bx	lr

080023bc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023bc:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023be:	ea01 0203 	and.w	r2, r1, r3
 80023c2:	ea21 0103 	bic.w	r1, r1, r3
 80023c6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80023ca:	6101      	str	r1, [r0, #16]
}
 80023cc:	4770      	bx	lr
	...

080023d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <RCC_Delay+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <RCC_Delay+0x28>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	0a5b      	lsrs	r3, r3, #9
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80023e4:	bf00      	nop
  }
  while (Delay --);
 80023e6:	9b01      	ldr	r3, [sp, #4]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	9201      	str	r2, [sp, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f9      	bne.n	80023e4 <RCC_Delay+0x14>
}
 80023f0:	b002      	add	sp, #8
 80023f2:	4770      	bx	lr
 80023f4:	20000068 	.word	0x20000068
 80023f8:	10624dd3 	.word	0x10624dd3

080023fc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f000 81f1 	beq.w	80027e4 <HAL_RCC_OscConfig+0x3e8>
{
 8002402:	b570      	push	{r4, r5, r6, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002408:	6803      	ldr	r3, [r0, #0]
 800240a:	f013 0f01 	tst.w	r3, #1
 800240e:	d02c      	beq.n	800246a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002410:	4baa      	ldr	r3, [pc, #680]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	d01d      	beq.n	8002458 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241c:	4ba7      	ldr	r3, [pc, #668]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d012      	beq.n	800244e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002428:	6863      	ldr	r3, [r4, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d041      	beq.n	80024b4 <HAL_RCC_OscConfig+0xb8>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d155      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe4>
 8002434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002438:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e037      	b.n	80024be <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800244e:	4b9b      	ldr	r3, [pc, #620]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002456:	d0e7      	beq.n	8002428 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b98      	ldr	r3, [pc, #608]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002460:	d003      	beq.n	800246a <HAL_RCC_OscConfig+0x6e>
 8002462:	6863      	ldr	r3, [r4, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 81bf 	beq.w	80027e8 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	f013 0f02 	tst.w	r3, #2
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002472:	4b92      	ldr	r3, [pc, #584]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f013 0f0c 	tst.w	r3, #12
 800247a:	d05f      	beq.n	800253c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800247c:	4b8f      	ldr	r3, [pc, #572]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d054      	beq.n	8002532 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002488:	6923      	ldr	r3, [r4, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8089 	beq.w	80025a2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8002490:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <HAL_RCC_OscConfig+0x2c4>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002496:	f7ff fd89 	bl	8001fac <HAL_GetTick>
 800249a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b87      	ldr	r3, [pc, #540]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f013 0f02 	tst.w	r3, #2
 80024a4:	d174      	bne.n	8002590 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff fd81 	bl	8001fac <HAL_GetTick>
 80024aa:	1b40      	subs	r0, r0, r5
 80024ac:	2802      	cmp	r0, #2
 80024ae:	d9f5      	bls.n	800249c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80024b0:	2003      	movs	r0, #3
 80024b2:	e19e      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	4a81      	ldr	r2, [pc, #516]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024be:	6863      	ldr	r3, [r4, #4]
 80024c0:	b343      	cbz	r3, 8002514 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80024c2:	f7ff fd73 	bl	8001fac <HAL_GetTick>
 80024c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	4b7c      	ldr	r3, [pc, #496]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024d0:	d1cb      	bne.n	800246a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d2:	f7ff fd6b 	bl	8001fac <HAL_GetTick>
 80024d6:	1b40      	subs	r0, r0, r5
 80024d8:	2864      	cmp	r0, #100	; 0x64
 80024da:	d9f5      	bls.n	80024c8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80024dc:	2003      	movs	r0, #3
 80024de:	e188      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_OscConfig+0xfe>
 80024e6:	4b75      	ldr	r3, [pc, #468]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e7e1      	b.n	80024be <HAL_RCC_OscConfig+0xc2>
 80024fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024fe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e7d4      	b.n	80024be <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002514:	f7ff fd4a 	bl	8001fac <HAL_GetTick>
 8002518:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002522:	d0a2      	beq.n	800246a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fd42 	bl	8001fac <HAL_GetTick>
 8002528:	1b40      	subs	r0, r0, r5
 800252a:	2864      	cmp	r0, #100	; 0x64
 800252c:	d9f5      	bls.n	800251a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800252e:	2003      	movs	r0, #3
 8002530:	e15f      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800253a:	d1a5      	bne.n	8002488 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253c:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f013 0f02 	tst.w	r3, #2
 8002544:	d003      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
 8002546:	6923      	ldr	r3, [r4, #16]
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 814f 	bne.w	80027ec <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4a5b      	ldr	r2, [pc, #364]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002556:	6961      	ldr	r1, [r4, #20]
 8002558:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800255c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	f013 0f08 	tst.w	r3, #8
 8002564:	d032      	beq.n	80025cc <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002566:	69a3      	ldr	r3, [r4, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d045      	beq.n	80025f8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 800256c:	4b55      	ldr	r3, [pc, #340]	; (80026c4 <HAL_RCC_OscConfig+0x2c8>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002572:	f7ff fd1b 	bl	8001fac <HAL_GetTick>
 8002576:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f013 0f02 	tst.w	r3, #2
 8002580:	d121      	bne.n	80025c6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002582:	f7ff fd13 	bl	8001fac <HAL_GetTick>
 8002586:	1b40      	subs	r0, r0, r5
 8002588:	2802      	cmp	r0, #2
 800258a:	d9f5      	bls.n	8002578 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 800258c:	2003      	movs	r0, #3
 800258e:	e130      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002598:	6961      	ldr	r1, [r4, #20]
 800259a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e7dd      	b.n	800255e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x2c4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025a8:	f7ff fd00 	bl	8001fac <HAL_GetTick>
 80025ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f013 0f02 	tst.w	r3, #2
 80025b6:	d0d2      	beq.n	800255e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff fcf8 	bl	8001fac <HAL_GetTick>
 80025bc:	1b40      	subs	r0, r0, r5
 80025be:	2802      	cmp	r0, #2
 80025c0:	d9f5      	bls.n	80025ae <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80025c2:	2003      	movs	r0, #3
 80025c4:	e115      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff ff02 	bl	80023d0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	f013 0f04 	tst.w	r3, #4
 80025d2:	f000 8097 	beq.w	8002704 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80025de:	d11d      	bne.n	800261c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025e8:	61da      	str	r2, [r3, #28]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025f4:	2501      	movs	r5, #1
 80025f6:	e012      	b.n	800261e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_RCC_OscConfig+0x2c8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025fe:	f7ff fcd5 	bl	8001fac <HAL_GetTick>
 8002602:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f013 0f02 	tst.w	r3, #2
 800260c:	d0de      	beq.n	80025cc <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260e:	f7ff fccd 	bl	8001fac <HAL_GetTick>
 8002612:	1b40      	subs	r0, r0, r5
 8002614:	2802      	cmp	r0, #2
 8002616:	d9f5      	bls.n	8002604 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8002618:	2003      	movs	r0, #3
 800261a:	e0ea      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 800261c:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b2a      	ldr	r3, [pc, #168]	; (80026c8 <HAL_RCC_OscConfig+0x2cc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002626:	d011      	beq.n	800264c <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	68e3      	ldr	r3, [r4, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d022      	beq.n	8002674 <HAL_RCC_OscConfig+0x278>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d138      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2a8>
 8002632:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002636:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800263a:	6a1a      	ldr	r2, [r3, #32]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	621a      	str	r2, [r3, #32]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	621a      	str	r2, [r3, #32]
 800264a:	e018      	b.n	800267e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_RCC_OscConfig+0x2cc>)
 800264e:	6813      	ldr	r3, [r2, #0]
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002656:	f7ff fca9 	bl	8001fac <HAL_GetTick>
 800265a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_OscConfig+0x2cc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002664:	d1e0      	bne.n	8002628 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7ff fca1 	bl	8001fac <HAL_GetTick>
 800266a:	1b80      	subs	r0, r0, r6
 800266c:	2864      	cmp	r0, #100	; 0x64
 800266e:	d9f5      	bls.n	800265c <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8002670:	2003      	movs	r0, #3
 8002672:	e0be      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 8002676:	6a13      	ldr	r3, [r2, #32]
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	68e3      	ldr	r3, [r4, #12]
 8002680:	b373      	cbz	r3, 80026e0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8002682:	f7ff fc93 	bl	8001fac <HAL_GetTick>
 8002686:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f013 0f02 	tst.w	r3, #2
 8002690:	d137      	bne.n	8002702 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff fc8b 	bl	8001fac <HAL_GetTick>
 8002696:	1b80      	subs	r0, r0, r6
 8002698:	f241 3388 	movw	r3, #5000	; 0x1388
 800269c:	4298      	cmp	r0, r3
 800269e:	d9f3      	bls.n	8002688 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 80026a0:	2003      	movs	r0, #3
 80026a2:	e0a6      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d011      	beq.n	80026cc <HAL_RCC_OscConfig+0x2d0>
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <HAL_RCC_OscConfig+0x2c0>)
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	621a      	str	r2, [r3, #32]
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	f022 0204 	bic.w	r2, r2, #4
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e7e0      	b.n	800267e <HAL_RCC_OscConfig+0x282>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	42420000 	.word	0x42420000
 80026c4:	42420480 	.word	0x42420480
 80026c8:	40007000 	.word	0x40007000
 80026cc:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	f042 0204 	orr.w	r2, r2, #4
 80026d4:	621a      	str	r2, [r3, #32]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	621a      	str	r2, [r3, #32]
 80026de:	e7ce      	b.n	800267e <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 80026e0:	f7ff fc64 	bl	8001fac <HAL_GetTick>
 80026e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f013 0f02 	tst.w	r3, #2
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7ff fc5c 	bl	8001fac <HAL_GetTick>
 80026f4:	1b80      	subs	r0, r0, r6
 80026f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80026fa:	4298      	cmp	r0, r3
 80026fc:	d9f3      	bls.n	80026e6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80026fe:	2003      	movs	r0, #3
 8002700:	e077      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002702:	b9e5      	cbnz	r5, 800273e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002704:	69e3      	ldr	r3, [r4, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d072      	beq.n	80027f0 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270a:	4a3e      	ldr	r2, [pc, #248]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 800270c:	6852      	ldr	r2, [r2, #4]
 800270e:	f002 020c 	and.w	r2, r2, #12
 8002712:	2a08      	cmp	r2, #8
 8002714:	d056      	beq.n	80027c4 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002716:	2b02      	cmp	r3, #2
 8002718:	d017      	beq.n	800274a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCC_OscConfig+0x40c>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002720:	f7ff fc44 	bl	8001fac <HAL_GetTick>
 8002724:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800272e:	d047      	beq.n	80027c0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff fc3c 	bl	8001fac <HAL_GetTick>
 8002734:	1b00      	subs	r0, r0, r4
 8002736:	2802      	cmp	r0, #2
 8002738:	d9f5      	bls.n	8002726 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800273a:	2003      	movs	r0, #3
 800273c:	e059      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800273e:	4a31      	ldr	r2, [pc, #196]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 8002740:	69d3      	ldr	r3, [r2, #28]
 8002742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002746:	61d3      	str	r3, [r2, #28]
 8002748:	e7dc      	b.n	8002704 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <HAL_RCC_OscConfig+0x40c>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002750:	f7ff fc2c 	bl	8001fac <HAL_GetTick>
 8002754:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800275e:	d006      	beq.n	800276e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7ff fc24 	bl	8001fac <HAL_GetTick>
 8002764:	1b40      	subs	r0, r0, r5
 8002766:	2802      	cmp	r0, #2
 8002768:	d9f5      	bls.n	8002756 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800276a:	2003      	movs	r0, #3
 800276c:	e041      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800276e:	6a23      	ldr	r3, [r4, #32]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d01a      	beq.n	80027ac <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002776:	4923      	ldr	r1, [pc, #140]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 8002778:	684b      	ldr	r3, [r1, #4]
 800277a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800277e:	6a22      	ldr	r2, [r4, #32]
 8002780:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002782:	4302      	orrs	r2, r0
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_RCC_OscConfig+0x40c>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800278e:	f7ff fc0d 	bl	8001fac <HAL_GetTick>
 8002792:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800279c:	d10e      	bne.n	80027bc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7ff fc05 	bl	8001fac <HAL_GetTick>
 80027a2:	1b00      	subs	r0, r0, r4
 80027a4:	2802      	cmp	r0, #2
 80027a6:	d9f5      	bls.n	8002794 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80027a8:	2003      	movs	r0, #3
 80027aa:	e022      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 80027ae:	6853      	ldr	r3, [r2, #4]
 80027b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027b4:	68a1      	ldr	r1, [r4, #8]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6053      	str	r3, [r2, #4]
 80027ba:	e7dc      	b.n	8002776 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80027bc:	2000      	movs	r0, #0
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
 80027c0:	2000      	movs	r0, #0
 80027c2:	e016      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d016      	beq.n	80027f6 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_RCC_OscConfig+0x408>)
 80027ca:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027cc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80027d0:	6a22      	ldr	r2, [r4, #32]
 80027d2:	4291      	cmp	r1, r2
 80027d4:	d111      	bne.n	80027fa <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027d6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027da:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10e      	bne.n	80027fe <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80027e0:	2000      	movs	r0, #0
 80027e2:	e006      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80027e4:	2001      	movs	r0, #1
}
 80027e6:	4770      	bx	lr
        return HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80027f0:	2000      	movs	r0, #0
}
 80027f2:	b002      	add	sp, #8
 80027f4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80027f6:	2001      	movs	r0, #1
 80027f8:	e7fb      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
 80027fc:	e7f9      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
 80027fe:	2001      	movs	r0, #1
 8002800:	e7f7      	b.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	42420060 	.word	0x42420060

0800280c <HAL_RCC_GetSysClockFreq>:
{
 800280c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002812:	f10d 0c18 	add.w	ip, sp, #24
 8002816:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800281a:	f240 2301 	movw	r3, #513	; 0x201
 800281e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_GetSysClockFreq+0x60>)
 8002824:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	2a08      	cmp	r2, #8
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800282e:	4810      	ldr	r0, [pc, #64]	; (8002870 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002830:	b006      	add	sp, #24
 8002832:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002834:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002838:	4462      	add	r2, ip
 800283a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800283e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002842:	d00c      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_GetSysClockFreq+0x60>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800284c:	4463      	add	r3, ip
 800284e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002852:	4807      	ldr	r0, [pc, #28]	; (8002870 <HAL_RCC_GetSysClockFreq+0x64>)
 8002854:	fb00 f002 	mul.w	r0, r0, r2
 8002858:	fbb0 f0f3 	udiv	r0, r0, r3
 800285c:	e7e8      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <HAL_RCC_GetSysClockFreq+0x68>)
 8002860:	fb00 f002 	mul.w	r0, r0, r2
 8002864:	e7e4      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x24>
 8002866:	bf00      	nop
 8002868:	08004ad8 	.word	0x08004ad8
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	003d0900 	.word	0x003d0900

08002878 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002878:	2800      	cmp	r0, #0
 800287a:	f000 80a0 	beq.w	80029be <HAL_RCC_ClockConfig+0x146>
{
 800287e:	b570      	push	{r4, r5, r6, lr}
 8002880:	460d      	mov	r5, r1
 8002882:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_RCC_ClockConfig+0x158>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	428b      	cmp	r3, r1
 800288e:	d20b      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002890:	4a4f      	ldr	r2, [pc, #316]	; (80029d0 <HAL_RCC_ClockConfig+0x158>)
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	f023 0307 	bic.w	r3, r3, #7
 8002898:	430b      	orrs	r3, r1
 800289a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289c:	6813      	ldr	r3, [r2, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	428b      	cmp	r3, r1
 80028a4:	f040 808d 	bne.w	80029c2 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	f013 0f02 	tst.w	r3, #2
 80028ae:	d017      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	f013 0f04 	tst.w	r3, #4
 80028b4:	d004      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b6:	4a47      	ldr	r2, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 80028b8:	6853      	ldr	r3, [r2, #4]
 80028ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028be:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	f013 0f08 	tst.w	r3, #8
 80028c6:	d004      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c8:	4a42      	ldr	r2, [pc, #264]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 80028ca:	6853      	ldr	r3, [r2, #4]
 80028cc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028d0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d2:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 80028d4:	6853      	ldr	r3, [r2, #4]
 80028d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028da:	68a1      	ldr	r1, [r4, #8]
 80028dc:	430b      	orrs	r3, r1
 80028de:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	f013 0f01 	tst.w	r3, #1
 80028e6:	d031      	beq.n	800294c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e8:	6863      	ldr	r3, [r4, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d020      	beq.n	8002930 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d025      	beq.n	800293e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	f012 0f02 	tst.w	r2, #2
 80028fa:	d064      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fc:	4935      	ldr	r1, [pc, #212]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 80028fe:	684a      	ldr	r2, [r1, #4]
 8002900:	f022 0203 	bic.w	r2, r2, #3
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002908:	f7ff fb50 	bl	8001fac <HAL_GetTick>
 800290c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800291c:	d016      	beq.n	800294c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f7ff fb45 	bl	8001fac <HAL_GetTick>
 8002922:	1b80      	subs	r0, r0, r6
 8002924:	f241 3388 	movw	r3, #5000	; 0x1388
 8002928:	4298      	cmp	r0, r3
 800292a:	d9f0      	bls.n	800290e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800292c:	2003      	movs	r0, #3
 800292e:	e045      	b.n	80029bc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002930:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002938:	d1e0      	bne.n	80028fc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800293a:	2001      	movs	r0, #1
 800293c:	e03e      	b.n	80029bc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002946:	d1d9      	bne.n	80028fc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002948:	2001      	movs	r0, #1
 800294a:	e037      	b.n	80029bc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x158>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	42ab      	cmp	r3, r5
 8002956:	d90a      	bls.n	800296e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002958:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_RCC_ClockConfig+0x158>)
 800295a:	6813      	ldr	r3, [r2, #0]
 800295c:	f023 0307 	bic.w	r3, r3, #7
 8002960:	432b      	orrs	r3, r5
 8002962:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002964:	6813      	ldr	r3, [r2, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	42ab      	cmp	r3, r5
 800296c:	d12d      	bne.n	80029ca <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	f013 0f04 	tst.w	r3, #4
 8002974:	d006      	beq.n	8002984 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002976:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 8002978:	6853      	ldr	r3, [r2, #4]
 800297a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800297e:	68e1      	ldr	r1, [r4, #12]
 8002980:	430b      	orrs	r3, r1
 8002982:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	f013 0f08 	tst.w	r3, #8
 800298a:	d007      	beq.n	800299c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298c:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 800298e:	6853      	ldr	r3, [r2, #4]
 8002990:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002994:	6921      	ldr	r1, [r4, #16]
 8002996:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800299a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299c:	f7ff ff36 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCC_ClockConfig+0x15c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x160>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	40d8      	lsrs	r0, r3
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_ClockConfig+0x164>)
 80029b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x168>)
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	f7ff fab5 	bl	8001f24 <HAL_InitTick>
  return HAL_OK;
 80029ba:	2000      	movs	r0, #0
}
 80029bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
}
 80029c0:	4770      	bx	lr
    return HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
 80029c4:	e7fa      	b.n	80029bc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
 80029c8:	e7f8      	b.n	80029bc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
 80029cc:	e7f6      	b.n	80029bc <HAL_RCC_ClockConfig+0x144>
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08004ac0 	.word	0x08004ac0
 80029dc:	20000068 	.word	0x20000068
 80029e0:	20000070 	.word	0x20000070

080029e4 <HAL_RCC_GetHCLKFreq>:
}
 80029e4:	4b01      	ldr	r3, [pc, #4]	; (80029ec <HAL_RCC_GetHCLKFreq+0x8>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000068 	.word	0x20000068

080029f0 <HAL_RCC_GetPCLK1Freq>:
{
 80029f0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f2:	f7ff fff7 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029fe:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a02:	40d8      	lsrs	r0, r3
 8002a04:	bd08      	pop	{r3, pc}
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08004ad0 	.word	0x08004ad0

08002a10 <HAL_RCC_GetPCLK2Freq>:
{
 8002a10:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a12:	f7ff ffe7 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a1e:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a22:	40d8      	lsrs	r0, r3
 8002a24:	bd08      	pop	{r3, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08004ad0 	.word	0x08004ad0

08002a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a30:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a32:	6a03      	ldr	r3, [r0, #32]
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a3e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a40:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a44:	680c      	ldr	r4, [r1, #0]
 8002a46:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a4a:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a4e:	688b      	ldr	r3, [r1, #8]
 8002a50:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a52:	4c0d      	ldr	r4, [pc, #52]	; (8002a88 <TIM_OC1_SetConfig+0x58>)
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d009      	beq.n	8002a6c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a58:	4c0b      	ldr	r4, [pc, #44]	; (8002a88 <TIM_OC1_SetConfig+0x58>)
 8002a5a:	42a0      	cmp	r0, r4
 8002a5c:	d00d      	beq.n	8002a7a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5e:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a60:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a62:	684a      	ldr	r2, [r1, #4]
 8002a64:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a66:	6203      	str	r3, [r0, #32]
}
 8002a68:	bc70      	pop	{r4, r5, r6}
 8002a6a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a6c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002a70:	68ca      	ldr	r2, [r1, #12]
 8002a72:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	e7ee      	b.n	8002a58 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a7a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7e:	694a      	ldr	r2, [r1, #20]
 8002a80:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a82:	698e      	ldr	r6, [r1, #24]
 8002a84:	4316      	orrs	r6, r2
 8002a86:	e7ea      	b.n	8002a5e <TIM_OC1_SetConfig+0x2e>
 8002a88:	40012c00 	.word	0x40012c00

08002a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a8c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a8e:	6a03      	ldr	r3, [r0, #32]
 8002a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a9a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a9c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa0:	680c      	ldr	r4, [r1, #0]
 8002aa2:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa8:	688c      	ldr	r4, [r1, #8]
 8002aaa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aae:	4c0f      	ldr	r4, [pc, #60]	; (8002aec <TIM_OC3_SetConfig+0x60>)
 8002ab0:	42a0      	cmp	r0, r4
 8002ab2:	d009      	beq.n	8002ac8 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab4:	4c0d      	ldr	r4, [pc, #52]	; (8002aec <TIM_OC3_SetConfig+0x60>)
 8002ab6:	42a0      	cmp	r0, r4
 8002ab8:	d00e      	beq.n	8002ad8 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aba:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002abc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002abe:	684a      	ldr	r2, [r1, #4]
 8002ac0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac2:	6203      	str	r3, [r0, #32]
}
 8002ac4:	bc30      	pop	{r4, r5}
 8002ac6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002acc:	68cc      	ldr	r4, [r1, #12]
 8002ace:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad6:	e7ed      	b.n	8002ab4 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad8:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002adc:	694c      	ldr	r4, [r1, #20]
 8002ade:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ae2:	698c      	ldr	r4, [r1, #24]
 8002ae4:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8002ae8:	e7e7      	b.n	8002aba <TIM_OC3_SetConfig+0x2e>
 8002aea:	bf00      	nop
 8002aec:	40012c00 	.word	0x40012c00

08002af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002af2:	6a03      	ldr	r3, [r0, #32]
 8002af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002afe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b00:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b04:	680d      	ldr	r5, [r1, #0]
 8002b06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b0e:	688d      	ldr	r5, [r1, #8]
 8002b10:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b14:	4d07      	ldr	r5, [pc, #28]	; (8002b34 <TIM_OC4_SetConfig+0x44>)
 8002b16:	42a8      	cmp	r0, r5
 8002b18:	d006      	beq.n	8002b28 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b1c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b1e:	684a      	ldr	r2, [r1, #4]
 8002b20:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b22:	6203      	str	r3, [r0, #32]
}
 8002b24:	bc30      	pop	{r4, r5}
 8002b26:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b28:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b2c:	694d      	ldr	r5, [r1, #20]
 8002b2e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002b32:	e7f2      	b.n	8002b1a <TIM_OC4_SetConfig+0x2a>
 8002b34:	40012c00 	.word	0x40012c00

08002b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b38:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b3a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3c:	6a05      	ldr	r5, [r0, #32]
 8002b3e:	f025 0501 	bic.w	r5, r5, #1
 8002b42:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b44:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b46:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b4a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b4e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002b52:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b54:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b56:	6203      	str	r3, [r0, #32]
}
 8002b58:	bc30      	pop	{r4, r5}
 8002b5a:	4770      	bx	lr

08002b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5e:	6a05      	ldr	r5, [r0, #32]
 8002b60:	f025 0510 	bic.w	r5, r5, #16
 8002b64:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b66:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b68:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b6a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b6e:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b76:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7a:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b7c:	6203      	str	r3, [r0, #32]
}
 8002b7e:	bc30      	pop	{r4, r5}
 8002b80:	4770      	bx	lr

08002b82 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b82:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8e:	6083      	str	r3, [r0, #8]
}
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002b94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d127      	bne.n	8002bee <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba4:	6802      	ldr	r2, [r0, #0]
 8002ba6:	68d3      	ldr	r3, [r2, #12]
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bae:	6803      	ldr	r3, [r0, #0]
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_TIM_Base_Start_IT+0x64>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d010      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x44>
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d00d      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x44>
 8002bbc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x44>
 8002bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d005      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bde:	2a06      	cmp	r2, #6
 8002be0:	d007      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bea:	2000      	movs	r0, #0
 8002bec:	4770      	bx	lr
    return HAL_ERROR;
 8002bee:	2001      	movs	r0, #1
 8002bf0:	4770      	bx	lr
  return HAL_OK;
 8002bf2:	2000      	movs	r0, #0
}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00

08002bfc <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bfc:	6802      	ldr	r2, [r0, #0]
 8002bfe:	68d3      	ldr	r3, [r2, #12]
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8002c06:	6803      	ldr	r3, [r0, #0]
 8002c08:	6a19      	ldr	r1, [r3, #32]
 8002c0a:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c0e:	4211      	tst	r1, r2
 8002c10:	d108      	bne.n	8002c24 <HAL_TIM_Base_Stop_IT+0x28>
 8002c12:	6a19      	ldr	r1, [r3, #32]
 8002c14:	f240 4244 	movw	r2, #1092	; 0x444
 8002c18:	4211      	tst	r1, r2
 8002c1a:	d103      	bne.n	8002c24 <HAL_TIM_Base_Stop_IT+0x28>
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIM_PWM_MspInit>:
}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_IC_CaptureCallback>:
}
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_TriggerCallback>:
}
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_IRQHandler>:
{
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c3c:	6803      	ldr	r3, [r0, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	f012 0f02 	tst.w	r2, #2
 8002c44:	d011      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	f012 0f02 	tst.w	r2, #2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c4e:	f06f 0202 	mvn.w	r2, #2
 8002c52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c54:	2301      	movs	r3, #1
 8002c56:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c58:	6803      	ldr	r3, [r0, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f013 0f03 	tst.w	r3, #3
 8002c60:	d070      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	f7ff ffe6 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	2300      	movs	r3, #0
 8002c68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	f012 0f04 	tst.w	r2, #4
 8002c72:	d012      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	f012 0f04 	tst.w	r2, #4
 8002c7a:	d00e      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c7c:	f06f 0204 	mvn.w	r2, #4
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c82:	2302      	movs	r3, #2
 8002c84:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c8e:	d05f      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff ffce 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	2300      	movs	r3, #0
 8002c98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	f012 0f08 	tst.w	r2, #8
 8002ca2:	d012      	beq.n	8002cca <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	f012 0f08 	tst.w	r2, #8
 8002caa:	d00e      	beq.n	8002cca <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cac:	f06f 0208 	mvn.w	r2, #8
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f013 0f03 	tst.w	r3, #3
 8002cbe:	d04e      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f7ff ffb6 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	f012 0f10 	tst.w	r2, #16
 8002cd2:	d012      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	f012 0f10 	tst.w	r2, #16
 8002cda:	d00e      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002cee:	d03d      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f7ff ff9e 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	f012 0f01 	tst.w	r2, #1
 8002d02:	d003      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	f012 0f01 	tst.w	r2, #1
 8002d0a:	d136      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d1c:	d134      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d26:	d003      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d2e:	d132      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	f012 0f20 	tst.w	r2, #32
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	f012 0f20 	tst.w	r2, #32
 8002d40:	d130      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x16c>
}
 8002d42:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d44:	f7ff ff74 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7ff ff73 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d4e:	e78a      	b.n	8002c66 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7ff ff6d 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff ff6c 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d5c:	e79b      	b.n	8002c96 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f7ff ff66 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff ff65 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d6a:	e7ac      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff ff5f 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff ff5e 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d78:	e7bd      	b.n	8002cf6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d7a:	f06f 0201 	mvn.w	r2, #1
 8002d7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7fe fd55 	bl	8001830 <HAL_TIM_PeriodElapsedCallback>
 8002d86:	e7c1      	b.n	8002d0c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f000 fb25 	bl	80033de <HAL_TIMEx_BreakCallback>
 8002d94:	e7c3      	b.n	8002d1e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff ff4a 	bl	8002c36 <HAL_TIM_TriggerCallback>
 8002da2:	e7c5      	b.n	8002d30 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da4:	f06f 0220 	mvn.w	r2, #32
 8002da8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002daa:	4620      	mov	r0, r4
 8002dac:	f000 fb16 	bl	80033dc <HAL_TIMEx_CommutCallback>
}
 8002db0:	e7c7      	b.n	8002d42 <HAL_TIM_IRQHandler+0x10a>
	...

08002db4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002db4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <TIM_Base_SetConfig+0x70>)
 8002db8:	4290      	cmp	r0, r2
 8002dba:	d00a      	beq.n	8002dd2 <TIM_Base_SetConfig+0x1e>
 8002dbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002dc0:	d007      	beq.n	8002dd2 <TIM_Base_SetConfig+0x1e>
 8002dc2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dc6:	4290      	cmp	r0, r2
 8002dc8:	d003      	beq.n	8002dd2 <TIM_Base_SetConfig+0x1e>
 8002dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dce:	4290      	cmp	r0, r2
 8002dd0:	d103      	bne.n	8002dda <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002dd6:	684a      	ldr	r2, [r1, #4]
 8002dd8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <TIM_Base_SetConfig+0x70>)
 8002ddc:	4290      	cmp	r0, r2
 8002dde:	d00a      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002de0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002de6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dea:	4290      	cmp	r0, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002df2:	4290      	cmp	r0, r2
 8002df4:	d103      	bne.n	8002dfe <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfa:	68ca      	ldr	r2, [r1, #12]
 8002dfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e02:	694a      	ldr	r2, [r1, #20]
 8002e04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	688b      	ldr	r3, [r1, #8]
 8002e0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e0c:	680b      	ldr	r3, [r1, #0]
 8002e0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <TIM_Base_SetConfig+0x70>)
 8002e12:	4298      	cmp	r0, r3
 8002e14:	d002      	beq.n	8002e1c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8002e16:	2301      	movs	r3, #1
 8002e18:	6143      	str	r3, [r0, #20]
}
 8002e1a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	690b      	ldr	r3, [r1, #16]
 8002e1e:	6303      	str	r3, [r0, #48]	; 0x30
 8002e20:	e7f9      	b.n	8002e16 <TIM_Base_SetConfig+0x62>
 8002e22:	bf00      	nop
 8002e24:	40012c00 	.word	0x40012c00

08002e28 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002e28:	b340      	cbz	r0, 8002e7c <HAL_TIM_Base_Init+0x54>
{
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e32:	b1f3      	cbz	r3, 8002e72 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	2302      	movs	r3, #2
 8002e36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e40:	f7ff ffb8 	bl	8002db4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002e6e:	2000      	movs	r0, #0
}
 8002e70:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e76:	f7fe ff17 	bl	8001ca8 <HAL_TIM_Base_MspInit>
 8002e7a:	e7db      	b.n	8002e34 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002e80:	b340      	cbz	r0, 8002ed4 <HAL_TIM_PWM_Init+0x54>
{
 8002e82:	b510      	push	{r4, lr}
 8002e84:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e8a:	b1f3      	cbz	r3, 8002eca <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e92:	4621      	mov	r1, r4
 8002e94:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e98:	f7ff ff8c 	bl	8002db4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ea6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002eaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002eae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002ec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002ec6:	2000      	movs	r0, #0
}
 8002ec8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002eca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002ece:	f7ff feae 	bl	8002c2e <HAL_TIM_PWM_MspInit>
 8002ed2:	e7db      	b.n	8002e8c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002ed4:	2001      	movs	r0, #1
}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d053      	beq.n	8002f84 <HAL_TIM_Encoder_Init+0xac>
{
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	460d      	mov	r5, r1
 8002ee0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d047      	beq.n	8002f7a <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ef0:	6822      	ldr	r2, [r4, #0]
 8002ef2:	6893      	ldr	r3, [r2, #8]
 8002ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ef8:	f023 0307 	bic.w	r3, r3, #7
 8002efc:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efe:	4621      	mov	r1, r4
 8002f00:	f851 0b04 	ldr.w	r0, [r1], #4
 8002f04:	f7ff ff56 	bl	8002db4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	6821      	ldr	r1, [r4, #0]
 8002f0a:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002f0c:	698e      	ldr	r6, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8002f0e:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002f10:	6828      	ldr	r0, [r5, #0]
 8002f12:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f14:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 8002f18:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f1c:	68aa      	ldr	r2, [r5, #8]
 8002f1e:	69ab      	ldr	r3, [r5, #24]
 8002f20:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002f24:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f26:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8002f2a:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f2e:	68ee      	ldr	r6, [r5, #12]
 8002f30:	69ea      	ldr	r2, [r5, #28]
 8002f32:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8002f36:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f38:	6a2a      	ldr	r2, [r5, #32]
 8002f3a:	0313      	lsls	r3, r2, #12
 8002f3c:	692a      	ldr	r2, [r5, #16]
 8002f3e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002f42:	4333      	orrs	r3, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f44:	f027 0722 	bic.w	r7, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f48:	686a      	ldr	r2, [r5, #4]
 8002f4a:	696d      	ldr	r5, [r5, #20]
 8002f4c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002f50:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8002f52:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002f54:	6821      	ldr	r1, [r4, #0]
 8002f56:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8002f72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f76:	2000      	movs	r0, #0
}
 8002f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8002f7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002f7e:	f7fe feb1 	bl	8001ce4 <HAL_TIM_Encoder_MspInit>
 8002f82:	e7b2      	b.n	8002eea <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
}
 8002f86:	4770      	bx	lr

08002f88 <TIM_OC2_SetConfig>:
{
 8002f88:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8a:	6a03      	ldr	r3, [r0, #32]
 8002f8c:	f023 0310 	bic.w	r3, r3, #16
 8002f90:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f92:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002f94:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f96:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f98:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f9c:	680d      	ldr	r5, [r1, #0]
 8002f9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002fa2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fa6:	688d      	ldr	r5, [r1, #8]
 8002fa8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fac:	4d0e      	ldr	r5, [pc, #56]	; (8002fe8 <TIM_OC2_SetConfig+0x60>)
 8002fae:	42a8      	cmp	r0, r5
 8002fb0:	d009      	beq.n	8002fc6 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb2:	4d0d      	ldr	r5, [pc, #52]	; (8002fe8 <TIM_OC2_SetConfig+0x60>)
 8002fb4:	42a8      	cmp	r0, r5
 8002fb6:	d00e      	beq.n	8002fd6 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002fb8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002fbc:	684a      	ldr	r2, [r1, #4]
 8002fbe:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002fc0:	6203      	str	r3, [r0, #32]
}
 8002fc2:	bc30      	pop	{r4, r5}
 8002fc4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fca:	68cd      	ldr	r5, [r1, #12]
 8002fcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd4:	e7ed      	b.n	8002fb2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fd6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fda:	694d      	ldr	r5, [r1, #20]
 8002fdc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fe0:	698d      	ldr	r5, [r1, #24]
 8002fe2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002fe6:	e7e7      	b.n	8002fb8 <TIM_OC2_SetConfig+0x30>
 8002fe8:	40012c00 	.word	0x40012c00

08002fec <HAL_TIM_PWM_ConfigChannel>:
{
 8002fec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002fee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d060      	beq.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	460d      	mov	r5, r1
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003000:	2a0c      	cmp	r2, #12
 8003002:	d81a      	bhi.n	800303a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003004:	e8df f002 	tbb	[pc, r2]
 8003008:	19191907 	.word	0x19191907
 800300c:	1919191d 	.word	0x1919191d
 8003010:	19191931 	.word	0x19191931
 8003014:	44          	.byte	0x44
 8003015:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003016:	6800      	ldr	r0, [r0, #0]
 8003018:	f7ff fd0a 	bl	8002a30 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	6993      	ldr	r3, [r2, #24]
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	6993      	ldr	r3, [r2, #24]
 800302a:	f023 0304 	bic.w	r3, r3, #4
 800302e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003030:	6822      	ldr	r2, [r4, #0]
 8003032:	6993      	ldr	r3, [r2, #24]
 8003034:	6929      	ldr	r1, [r5, #16]
 8003036:	430b      	orrs	r3, r1
 8003038:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800303a:	2000      	movs	r0, #0
 800303c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003040:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003042:	6800      	ldr	r0, [r0, #0]
 8003044:	f7ff ffa0 	bl	8002f88 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	6993      	ldr	r3, [r2, #24]
 800304c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003050:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003052:	6822      	ldr	r2, [r4, #0]
 8003054:	6993      	ldr	r3, [r2, #24]
 8003056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800305a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	6993      	ldr	r3, [r2, #24]
 8003060:	6929      	ldr	r1, [r5, #16]
 8003062:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003066:	6193      	str	r3, [r2, #24]
      break;
 8003068:	e7e7      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	f7ff fd0e 	bl	8002a8c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	69d3      	ldr	r3, [r2, #28]
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800307a:	6822      	ldr	r2, [r4, #0]
 800307c:	69d3      	ldr	r3, [r2, #28]
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	69d3      	ldr	r3, [r2, #28]
 8003088:	6929      	ldr	r1, [r5, #16]
 800308a:	430b      	orrs	r3, r1
 800308c:	61d3      	str	r3, [r2, #28]
      break;
 800308e:	e7d4      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003090:	6800      	ldr	r0, [r0, #0]
 8003092:	f7ff fd2d 	bl	8002af0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	69d3      	ldr	r3, [r2, #28]
 800309a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800309e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	69d3      	ldr	r3, [r2, #28]
 80030a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	69d3      	ldr	r3, [r2, #28]
 80030ae:	6929      	ldr	r1, [r5, #16]
 80030b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030b4:	61d3      	str	r3, [r2, #28]
      break;
 80030b6:	e7c0      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80030b8:	2002      	movs	r0, #2
 80030ba:	e7c1      	b.n	8003040 <HAL_TIM_PWM_ConfigChannel+0x54>

080030bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030bc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030be:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80030c8:	430a      	orrs	r2, r1
 80030ca:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030cc:	6082      	str	r2, [r0, #8]
}
 80030ce:	bc10      	pop	{r4}
 80030d0:	4770      	bx	lr

080030d2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80030d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d066      	beq.n	80031a8 <HAL_TIM_ConfigClockSource+0xd6>
{
 80030da:	b510      	push	{r4, lr}
 80030dc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80030de:	2301      	movs	r3, #1
 80030e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	2302      	movs	r3, #2
 80030e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80030ea:	6802      	ldr	r2, [r0, #0]
 80030ec:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80030f6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80030f8:	680b      	ldr	r3, [r1, #0]
 80030fa:	2b60      	cmp	r3, #96	; 0x60
 80030fc:	d040      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0xae>
 80030fe:	d822      	bhi.n	8003146 <HAL_TIM_ConfigClockSource+0x74>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d047      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xc2>
 8003104:	d90b      	bls.n	800311e <HAL_TIM_ConfigClockSource+0x4c>
 8003106:	2b50      	cmp	r3, #80	; 0x50
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	68ca      	ldr	r2, [r1, #12]
 800310c:	6849      	ldr	r1, [r1, #4]
 800310e:	6800      	ldr	r0, [r0, #0]
 8003110:	f7ff fd12 	bl	8002b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003114:	2150      	movs	r1, #80	; 0x50
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	f7ff fd33 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 800311c:	e004      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800311e:	2b20      	cmp	r3, #32
 8003120:	d00c      	beq.n	800313c <HAL_TIM_ConfigClockSource+0x6a>
 8003122:	d908      	bls.n	8003136 <HAL_TIM_ConfigClockSource+0x64>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d009      	beq.n	800313c <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8003128:	2301      	movs	r3, #1
 800312a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800312e:	2000      	movs	r0, #0
 8003130:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003134:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003136:	b10b      	cbz	r3, 800313c <HAL_TIM_ConfigClockSource+0x6a>
 8003138:	2b10      	cmp	r3, #16
 800313a:	d1f5      	bne.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313c:	4619      	mov	r1, r3
 800313e:	6820      	ldr	r0, [r4, #0]
 8003140:	f7ff fd1f 	bl	8002b82 <TIM_ITRx_SetConfig>
        break;
 8003144:	e7f0      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003146:	2b70      	cmp	r3, #112	; 0x70
 8003148:	d00e      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0x96>
 800314a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314e:	d1eb      	bne.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003150:	68cb      	ldr	r3, [r1, #12]
 8003152:	684a      	ldr	r2, [r1, #4]
 8003154:	6889      	ldr	r1, [r1, #8]
 8003156:	6800      	ldr	r0, [r0, #0]
 8003158:	f7ff ffb0 	bl	80030bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	6893      	ldr	r3, [r2, #8]
 8003160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003164:	6093      	str	r3, [r2, #8]
      break;
 8003166:	e7df      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003168:	68cb      	ldr	r3, [r1, #12]
 800316a:	684a      	ldr	r2, [r1, #4]
 800316c:	6889      	ldr	r1, [r1, #8]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	f7ff ffa4 	bl	80030bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800317c:	6093      	str	r3, [r2, #8]
      break;
 800317e:	e7d3      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003180:	68ca      	ldr	r2, [r1, #12]
 8003182:	6849      	ldr	r1, [r1, #4]
 8003184:	6800      	ldr	r0, [r0, #0]
 8003186:	f7ff fce9 	bl	8002b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800318a:	2160      	movs	r1, #96	; 0x60
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	f7ff fcf8 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 8003192:	e7c9      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003194:	68ca      	ldr	r2, [r1, #12]
 8003196:	6849      	ldr	r1, [r1, #4]
 8003198:	6800      	ldr	r0, [r0, #0]
 800319a:	f7ff fccd 	bl	8002b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800319e:	2140      	movs	r1, #64	; 0x40
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	f7ff fcee 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 80031a6:	e7bf      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80031a8:	2002      	movs	r0, #2
}
 80031aa:	4770      	bx	lr

080031ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031ac:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031ae:	f001 011f 	and.w	r1, r1, #31
 80031b2:	2301      	movs	r3, #1
 80031b4:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031b8:	6a03      	ldr	r3, [r0, #32]
 80031ba:	ea23 0304 	bic.w	r3, r3, r4
 80031be:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031c0:	6a03      	ldr	r3, [r0, #32]
 80031c2:	fa02 f101 	lsl.w	r1, r2, r1
 80031c6:	430b      	orrs	r3, r1
 80031c8:	6203      	str	r3, [r0, #32]
}
 80031ca:	bc10      	pop	{r4}
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_TIM_PWM_Start>:
{
 80031d0:	b510      	push	{r4, lr}
 80031d2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031d4:	4608      	mov	r0, r1
 80031d6:	bb51      	cbnz	r1, 800322e <HAL_TIM_PWM_Start+0x5e>
 80031d8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	bf18      	it	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d15b      	bne.n	80032a0 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d139      	bne.n	8003260 <HAL_TIM_PWM_Start+0x90>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031f2:	2201      	movs	r2, #1
 80031f4:	4601      	mov	r1, r0
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	f7ff ffd8 	bl	80031ac <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <HAL_TIM_PWM_Start+0xd8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d03d      	beq.n	8003280 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	4a28      	ldr	r2, [pc, #160]	; (80032a8 <HAL_TIM_PWM_Start+0xd8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d03e      	beq.n	800328a <HAL_TIM_PWM_Start+0xba>
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003210:	d03b      	beq.n	800328a <HAL_TIM_PWM_Start+0xba>
 8003212:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003216:	4293      	cmp	r3, r2
 8003218:	d037      	beq.n	800328a <HAL_TIM_PWM_Start+0xba>
 800321a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800321e:	4293      	cmp	r3, r2
 8003220:	d033      	beq.n	800328a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800322a:	2000      	movs	r0, #0
 800322c:	e039      	b.n	80032a2 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800322e:	2904      	cmp	r1, #4
 8003230:	d008      	beq.n	8003244 <HAL_TIM_PWM_Start+0x74>
 8003232:	2908      	cmp	r1, #8
 8003234:	d00d      	beq.n	8003252 <HAL_TIM_PWM_Start+0x82>
 8003236:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	bf18      	it	ne
 8003240:	2301      	movne	r3, #1
 8003242:	e7cf      	b.n	80031e4 <HAL_TIM_PWM_Start+0x14>
 8003244:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	bf18      	it	ne
 800324e:	2301      	movne	r3, #1
 8003250:	e7c8      	b.n	80031e4 <HAL_TIM_PWM_Start+0x14>
 8003252:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	bf18      	it	ne
 800325c:	2301      	movne	r3, #1
 800325e:	e7c1      	b.n	80031e4 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003260:	2804      	cmp	r0, #4
 8003262:	d005      	beq.n	8003270 <HAL_TIM_PWM_Start+0xa0>
 8003264:	2808      	cmp	r0, #8
 8003266:	d007      	beq.n	8003278 <HAL_TIM_PWM_Start+0xa8>
 8003268:	2302      	movs	r3, #2
 800326a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800326e:	e7c0      	b.n	80031f2 <HAL_TIM_PWM_Start+0x22>
 8003270:	2302      	movs	r3, #2
 8003272:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003276:	e7bc      	b.n	80031f2 <HAL_TIM_PWM_Start+0x22>
 8003278:	2302      	movs	r3, #2
 800327a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800327e:	e7b8      	b.n	80031f2 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
 8003288:	e7bc      	b.n	8003204 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	2a06      	cmp	r2, #6
 8003292:	d007      	beq.n	80032a4 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800329c:	2000      	movs	r0, #0
 800329e:	e000      	b.n	80032a2 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 80032a0:	2001      	movs	r0, #1
}
 80032a2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80032a4:	2000      	movs	r0, #0
 80032a6:	e7fc      	b.n	80032a2 <HAL_TIM_PWM_Start+0xd2>
 80032a8:	40012c00 	.word	0x40012c00

080032ac <HAL_TIM_Encoder_Start>:
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032b0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80032b4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032b6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032ba:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80032be:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032c0:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 80032c4:	460e      	mov	r6, r1
 80032c6:	b9b1      	cbnz	r1, 80032f6 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c8:	2801      	cmp	r0, #1
 80032ca:	d146      	bne.n	800335a <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032cc:	2a01      	cmp	r2, #1
 80032ce:	d145      	bne.n	800335c <HAL_TIM_Encoder_Start+0xb0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d0:	2302      	movs	r3, #2
 80032d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  switch (Channel)
 80032da:	b366      	cbz	r6, 8003336 <HAL_TIM_Encoder_Start+0x8a>
 80032dc:	2e04      	cmp	r6, #4
 80032de:	d036      	beq.n	800334e <HAL_TIM_Encoder_Start+0xa2>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032e0:	2201      	movs	r2, #1
 80032e2:	2100      	movs	r1, #0
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	f7ff ff61 	bl	80031ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032ea:	2201      	movs	r2, #1
 80032ec:	2104      	movs	r1, #4
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	f7ff ff5c 	bl	80031ac <TIM_CCxChannelCmd>
      break;
 80032f4:	e024      	b.n	8003340 <HAL_TIM_Encoder_Start+0x94>
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	b2ed      	uxtb	r5, r5
  else if (Channel == TIM_CHANNEL_2)
 80032fa:	2904      	cmp	r1, #4
 80032fc:	d011      	beq.n	8003322 <HAL_TIM_Encoder_Start+0x76>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032fe:	2801      	cmp	r0, #1
 8003300:	d131      	bne.n	8003366 <HAL_TIM_Encoder_Start+0xba>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003302:	2b01      	cmp	r3, #1
 8003304:	d12a      	bne.n	800335c <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003306:	2a01      	cmp	r2, #1
 8003308:	d12f      	bne.n	800336a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800330a:	2d01      	cmp	r5, #1
 800330c:	d12f      	bne.n	800336e <HAL_TIM_Encoder_Start+0xc2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800330e:	2302      	movs	r3, #2
 8003310:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003314:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800331c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003320:	e7db      	b.n	80032da <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003322:	2b01      	cmp	r3, #1
 8003324:	d11b      	bne.n	800335e <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003326:	2d01      	cmp	r5, #1
 8003328:	d11b      	bne.n	8003362 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800332a:	2302      	movs	r3, #2
 800332c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003334:	e7d1      	b.n	80032da <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003336:	2201      	movs	r2, #1
 8003338:	2100      	movs	r1, #0
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	f7ff ff36 	bl	80031ac <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800334a:	2000      	movs	r0, #0
 800334c:	e006      	b.n	800335c <HAL_TIM_Encoder_Start+0xb0>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800334e:	2201      	movs	r2, #1
 8003350:	2104      	movs	r1, #4
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	f7ff ff2a 	bl	80031ac <TIM_CCxChannelCmd>
      break;
 8003358:	e7f2      	b.n	8003340 <HAL_TIM_Encoder_Start+0x94>
      return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
}
 800335c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800335e:	2001      	movs	r0, #1
 8003360:	e7fc      	b.n	800335c <HAL_TIM_Encoder_Start+0xb0>
 8003362:	4618      	mov	r0, r3
 8003364:	e7fa      	b.n	800335c <HAL_TIM_Encoder_Start+0xb0>
      return HAL_ERROR;
 8003366:	2001      	movs	r0, #1
 8003368:	e7f8      	b.n	800335c <HAL_TIM_Encoder_Start+0xb0>
 800336a:	4618      	mov	r0, r3
 800336c:	e7f6      	b.n	800335c <HAL_TIM_Encoder_Start+0xb0>
 800336e:	4610      	mov	r0, r2
 8003370:	e7f4      	b.n	800335c <HAL_TIM_Encoder_Start+0xb0>
	...

08003374 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003374:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d02b      	beq.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800337c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800337e:	2301      	movs	r3, #1
 8003380:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	2302      	movs	r3, #2
 8003386:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338a:	6803      	ldr	r3, [r0, #0]
 800338c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800338e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003390:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003394:	680a      	ldr	r2, [r1, #0]
 8003396:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	6803      	ldr	r3, [r0, #0]
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00a      	beq.n	80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d007      	beq.n	80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80033a8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80033b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d104      	bne.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033b8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033bc:	684a      	ldr	r2, [r1, #4]
 80033be:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	2300      	movs	r3, #0
 80033ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80033ce:	4618      	mov	r0, r3
}
 80033d0:	bc30      	pop	{r4, r5}
 80033d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80033d4:	2002      	movs	r0, #2
}
 80033d6:	4770      	bx	lr
 80033d8:	40012c00 	.word	0x40012c00

080033dc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033dc:	4770      	bx	lr

080033de <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033de:	4770      	bx	lr

080033e0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e0:	6802      	ldr	r2, [r0, #0]
 80033e2:	68d3      	ldr	r3, [r2, #12]
 80033e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	6802      	ldr	r2, [r0, #0]
 80033ec:	6953      	ldr	r3, [r2, #20]
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d005      	beq.n	8003406 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fa:	2320      	movs	r3, #32
 80033fc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	2300      	movs	r3, #0
 8003402:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003404:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003406:	6802      	ldr	r2, [r0, #0]
 8003408:	68d3      	ldr	r3, [r2, #12]
 800340a:	f023 0310 	bic.w	r3, r3, #16
 800340e:	60d3      	str	r3, [r2, #12]
 8003410:	e7f3      	b.n	80033fa <UART_EndRxTransfer+0x1a>

08003412 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003412:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b21      	cmp	r3, #33	; 0x21
 800341a:	d001      	beq.n	8003420 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800341c:	2002      	movs	r0, #2
  }
}
 800341e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003420:	6883      	ldr	r3, [r0, #8]
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d017      	beq.n	8003458 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003428:	6a03      	ldr	r3, [r0, #32]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	6202      	str	r2, [r0, #32]
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	6803      	ldr	r3, [r0, #0]
 8003432:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003434:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29b      	uxth	r3, r3
 800343c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800343e:	b94b      	cbnz	r3, 8003454 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003440:	6802      	ldr	r2, [r0, #0]
 8003442:	68d3      	ldr	r3, [r2, #12]
 8003444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003448:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800344a:	6802      	ldr	r2, [r0, #0]
 800344c:	68d3      	ldr	r3, [r2, #12]
 800344e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003452:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003454:	2000      	movs	r0, #0
 8003456:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	6903      	ldr	r3, [r0, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e4      	bne.n	8003428 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800345e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	6802      	ldr	r2, [r0, #0]
 8003464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003468:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800346a:	6a03      	ldr	r3, [r0, #32]
 800346c:	3302      	adds	r3, #2
 800346e:	6203      	str	r3, [r0, #32]
 8003470:	e7e0      	b.n	8003434 <UART_Transmit_IT+0x22>
	...

08003474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	b510      	push	{r4, lr}
 8003476:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	6802      	ldr	r2, [r0, #0]
 800347a:	6913      	ldr	r3, [r2, #16]
 800347c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003480:	68c1      	ldr	r1, [r0, #12]
 8003482:	430b      	orrs	r3, r1
 8003484:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003486:	6883      	ldr	r3, [r0, #8]
 8003488:	6902      	ldr	r2, [r0, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	6942      	ldr	r2, [r0, #20]
 800348e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003490:	6801      	ldr	r1, [r0, #0]
 8003492:	68cb      	ldr	r3, [r1, #12]
 8003494:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003498:	f023 030c 	bic.w	r3, r3, #12
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034a0:	6802      	ldr	r2, [r0, #0]
 80034a2:	6953      	ldr	r3, [r2, #20]
 80034a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a8:	6981      	ldr	r1, [r0, #24]
 80034aa:	430b      	orrs	r3, r1
 80034ac:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80034ae:	6802      	ldr	r2, [r0, #0]
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <UART_SetConfig+0x88>)
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d01f      	beq.n	80034f6 <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034b6:	f7ff fa9b 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ba:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80034be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034c2:	6862      	ldr	r2, [r4, #4]
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80034ca:	480d      	ldr	r0, [pc, #52]	; (8003500 <UART_SetConfig+0x8c>)
 80034cc:	fba0 3102 	umull	r3, r1, r0, r2
 80034d0:	0949      	lsrs	r1, r1, #5
 80034d2:	2364      	movs	r3, #100	; 0x64
 80034d4:	fb03 2311 	mls	r3, r3, r1, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	3332      	adds	r3, #50	; 0x32
 80034dc:	fba0 2303 	umull	r2, r3, r0, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	6821      	ldr	r1, [r4, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80034f4:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80034f6:	f7ff fa8b 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 80034fa:	e7de      	b.n	80034ba <UART_SetConfig+0x46>
 80034fc:	40013800 	.word	0x40013800
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <HAL_UART_Init>:
  if (huart == NULL)
 8003504:	b358      	cbz	r0, 800355e <HAL_UART_Init+0x5a>
{
 8003506:	b510      	push	{r4, lr}
 8003508:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800350e:	b30b      	cbz	r3, 8003554 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003510:	2324      	movs	r3, #36	; 0x24
 8003512:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	68d3      	ldr	r3, [r2, #12]
 800351a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff ffa7 	bl	8003474 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	6913      	ldr	r3, [r2, #16]
 800352a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800352e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	6953      	ldr	r3, [r2, #20]
 8003534:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003538:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800353a:	6822      	ldr	r2, [r4, #0]
 800353c:	68d3      	ldr	r3, [r2, #12]
 800353e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003542:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	2000      	movs	r0, #0
 8003546:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003548:	2320      	movs	r3, #32
 800354a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800354e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003552:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003554:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003558:	f7fe fc5c 	bl	8001e14 <HAL_UART_MspInit>
 800355c:	e7d8      	b.n	8003510 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800355e:	2001      	movs	r0, #1
}
 8003560:	4770      	bx	lr

08003562 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003562:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b20      	cmp	r3, #32
 800356a:	d116      	bne.n	800359a <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 800356c:	b1b9      	cbz	r1, 800359e <HAL_UART_Transmit_IT+0x3c>
 800356e:	b1c2      	cbz	r2, 80035a2 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8003570:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d016      	beq.n	80035a6 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8003578:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800357a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800357c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	2300      	movs	r3, #0
 8003580:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003582:	2221      	movs	r2, #33	; 0x21
 8003584:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8003588:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800358c:	6801      	ldr	r1, [r0, #0]
 800358e:	68ca      	ldr	r2, [r1, #12]
 8003590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003594:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003596:	4618      	mov	r0, r3
 8003598:	4770      	bx	lr
    return HAL_BUSY;
 800359a:	2002      	movs	r0, #2
 800359c:	4770      	bx	lr
      return HAL_ERROR;
 800359e:	2001      	movs	r0, #1
 80035a0:	4770      	bx	lr
 80035a2:	2001      	movs	r0, #1
 80035a4:	4770      	bx	lr
    __HAL_LOCK(huart);
 80035a6:	2002      	movs	r0, #2
}
 80035a8:	4770      	bx	lr

080035aa <UART_EndTransmit_IT>:
{
 80035aa:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035ac:	6801      	ldr	r1, [r0, #0]
 80035ae:	68ca      	ldr	r2, [r1, #12]
 80035b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b4:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80035b6:	2220      	movs	r2, #32
 80035b8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80035bc:	f7fe f92c 	bl	8001818 <HAL_UART_TxCpltCallback>
}
 80035c0:	2000      	movs	r0, #0
 80035c2:	bd08      	pop	{r3, pc}

080035c4 <UART_DMAAbortOnError>:
{
 80035c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035cc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80035ce:	f7fe f925 	bl	800181c <HAL_UART_ErrorCallback>
}
 80035d2:	bd08      	pop	{r3, pc}

080035d4 <HAL_UARTEx_RxEventCallback>:
}
 80035d4:	4770      	bx	lr

080035d6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035d6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b22      	cmp	r3, #34	; 0x22
 80035de:	d160      	bne.n	80036a2 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e0:	6883      	ldr	r3, [r0, #8]
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e6:	d046      	beq.n	8003676 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	d004      	beq.n	80035fa <UART_Receive_IT+0x24>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d14d      	bne.n	8003690 <UART_Receive_IT+0xba>
 80035f4:	6903      	ldr	r3, [r0, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d14a      	bne.n	8003690 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003600:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003602:	3301      	adds	r3, #1
 8003604:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003606:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003610:	2b00      	cmp	r3, #0
 8003612:	d148      	bne.n	80036a6 <UART_Receive_IT+0xd0>
{
 8003614:	b500      	push	{lr}
 8003616:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003618:	6802      	ldr	r2, [r0, #0]
 800361a:	68d3      	ldr	r3, [r2, #12]
 800361c:	f023 0320 	bic.w	r3, r3, #32
 8003620:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003622:	6802      	ldr	r2, [r0, #0]
 8003624:	68d3      	ldr	r3, [r2, #12]
 8003626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800362a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800362c:	6802      	ldr	r2, [r0, #0]
 800362e:	6953      	ldr	r3, [r2, #20]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003636:	2320      	movs	r3, #32
 8003638:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800363e:	2b01      	cmp	r3, #1
 8003640:	d12c      	bne.n	800369c <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	2300      	movs	r3, #0
 8003644:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003646:	6802      	ldr	r2, [r0, #0]
 8003648:	68d3      	ldr	r3, [r2, #12]
 800364a:	f023 0310 	bic.w	r3, r3, #16
 800364e:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	f012 0f10 	tst.w	r2, #16
 8003658:	d006      	beq.n	8003668 <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800365a:	2200      	movs	r2, #0
 800365c:	9201      	str	r2, [sp, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	9201      	str	r2, [sp, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003668:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800366a:	f7ff ffb3 	bl	80035d4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800366e:	2000      	movs	r0, #0
}
 8003670:	b003      	add	sp, #12
 8003672:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003676:	6902      	ldr	r2, [r0, #16]
 8003678:	2a00      	cmp	r2, #0
 800367a:	d1b5      	bne.n	80035e8 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800367c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800367e:	6803      	ldr	r3, [r0, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003688:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800368a:	3302      	adds	r3, #2
 800368c:	6283      	str	r3, [r0, #40]	; 0x28
 800368e:	e7ba      	b.n	8003606 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003698:	7013      	strb	r3, [r2, #0]
 800369a:	e7b1      	b.n	8003600 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 800369c:	f7fd feba 	bl	8001414 <HAL_UART_RxCpltCallback>
 80036a0:	e7e5      	b.n	800366e <UART_Receive_IT+0x98>
    return HAL_BUSY;
 80036a2:	2002      	movs	r0, #2
 80036a4:	4770      	bx	lr
    return HAL_OK;
 80036a6:	2000      	movs	r0, #0
}
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_UART_IRQHandler>:
{
 80036ac:	b530      	push	{r4, r5, lr}
 80036ae:	b083      	sub	sp, #12
 80036b0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b2:	6802      	ldr	r2, [r0, #0]
 80036b4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036b6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036b8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80036ba:	f013 050f 	ands.w	r5, r3, #15
 80036be:	d105      	bne.n	80036cc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036c0:	f013 0f20 	tst.w	r3, #32
 80036c4:	d002      	beq.n	80036cc <HAL_UART_IRQHandler+0x20>
 80036c6:	f010 0f20 	tst.w	r0, #32
 80036ca:	d119      	bne.n	8003700 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036cc:	b12d      	cbz	r5, 80036da <HAL_UART_IRQHandler+0x2e>
 80036ce:	f011 0101 	ands.w	r1, r1, #1
 80036d2:	d119      	bne.n	8003708 <HAL_UART_IRQHandler+0x5c>
 80036d4:	f410 7f90 	tst.w	r0, #288	; 0x120
 80036d8:	d116      	bne.n	8003708 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80036dc:	2901      	cmp	r1, #1
 80036de:	d075      	beq.n	80037cc <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036e4:	d003      	beq.n	80036ee <HAL_UART_IRQHandler+0x42>
 80036e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036ea:	f040 80d7 	bne.w	800389c <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036f2:	d003      	beq.n	80036fc <HAL_UART_IRQHandler+0x50>
 80036f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036f8:	f040 80d4 	bne.w	80038a4 <HAL_UART_IRQHandler+0x1f8>
}
 80036fc:	b003      	add	sp, #12
 80036fe:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff ff68 	bl	80035d6 <UART_Receive_IT>
      return;
 8003706:	e7f9      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003708:	f013 0f01 	tst.w	r3, #1
 800370c:	d006      	beq.n	800371c <HAL_UART_IRQHandler+0x70>
 800370e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003712:	d003      	beq.n	800371c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003714:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371c:	f013 0f04 	tst.w	r3, #4
 8003720:	d004      	beq.n	800372c <HAL_UART_IRQHandler+0x80>
 8003722:	b119      	cbz	r1, 800372c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003724:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003726:	f042 0202 	orr.w	r2, r2, #2
 800372a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800372c:	f013 0f02 	tst.w	r3, #2
 8003730:	d004      	beq.n	800373c <HAL_UART_IRQHandler+0x90>
 8003732:	b119      	cbz	r1, 800373c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003734:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003736:	f042 0204 	orr.w	r2, r2, #4
 800373a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800373c:	f013 0f08 	tst.w	r3, #8
 8003740:	d007      	beq.n	8003752 <HAL_UART_IRQHandler+0xa6>
 8003742:	f010 0f20 	tst.w	r0, #32
 8003746:	d100      	bne.n	800374a <HAL_UART_IRQHandler+0x9e>
 8003748:	b119      	cbz	r1, 8003752 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800374a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800374c:	f042 0208 	orr.w	r2, r2, #8
 8003750:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003752:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003754:	2a00      	cmp	r2, #0
 8003756:	d0d1      	beq.n	80036fc <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003758:	f013 0f20 	tst.w	r3, #32
 800375c:	d002      	beq.n	8003764 <HAL_UART_IRQHandler+0xb8>
 800375e:	f010 0f20 	tst.w	r0, #32
 8003762:	d121      	bne.n	80037a8 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800376c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800376e:	f012 0f08 	tst.w	r2, #8
 8003772:	d100      	bne.n	8003776 <HAL_UART_IRQHandler+0xca>
 8003774:	b323      	cbz	r3, 80037c0 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8003776:	4620      	mov	r0, r4
 8003778:	f7ff fe32 	bl	80033e0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003784:	d018      	beq.n	80037b8 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800378e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003790:	b173      	cbz	r3, 80037b0 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003792:	4a46      	ldr	r2, [pc, #280]	; (80038ac <HAL_UART_IRQHandler+0x200>)
 8003794:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003796:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003798:	f7fe fcae 	bl	80020f8 <HAL_DMA_Abort_IT>
 800379c:	2800      	cmp	r0, #0
 800379e:	d0ad      	beq.n	80036fc <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80037a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037a4:	4798      	blx	r3
 80037a6:	e7a9      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7ff ff14 	bl	80035d6 <UART_Receive_IT>
 80037ae:	e7d9      	b.n	8003764 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7fe f833 	bl	800181c <HAL_UART_ErrorCallback>
 80037b6:	e7a1      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7fe f82f 	bl	800181c <HAL_UART_ErrorCallback>
 80037be:	e79d      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7fe f82b 	bl	800181c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 80037ca:	e797      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037cc:	f013 0f10 	tst.w	r3, #16
 80037d0:	d086      	beq.n	80036e0 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037d2:	f010 0f10 	tst.w	r0, #16
 80037d6:	d083      	beq.n	80036e0 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037d8:	2300      	movs	r3, #0
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	6853      	ldr	r3, [r2, #4]
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e6:	6953      	ldr	r3, [r2, #20]
 80037e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037ec:	d032      	beq.n	8003854 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80037f0:	680b      	ldr	r3, [r1, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d080      	beq.n	80036fc <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80037fa:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80037fc:	4298      	cmp	r0, r3
 80037fe:	f67f af7d 	bls.w	80036fc <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8003802:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003804:	698b      	ldr	r3, [r1, #24]
 8003806:	2b20      	cmp	r3, #32
 8003808:	d108      	bne.n	800381c <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800380a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800380c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800380e:	b29b      	uxth	r3, r3
 8003810:	1ac9      	subs	r1, r1, r3
 8003812:	b289      	uxth	r1, r1
 8003814:	4620      	mov	r0, r4
 8003816:	f7ff fedd 	bl	80035d4 <HAL_UARTEx_RxEventCallback>
      return;
 800381a:	e76f      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800381c:	68d3      	ldr	r3, [r2, #12]
 800381e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003822:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	6822      	ldr	r2, [r4, #0]
 8003826:	6953      	ldr	r3, [r2, #20]
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	6953      	ldr	r3, [r2, #20]
 8003832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003836:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003838:	2320      	movs	r3, #32
 800383a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383e:	2300      	movs	r3, #0
 8003840:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	68d3      	ldr	r3, [r2, #12]
 8003846:	f023 0310 	bic.w	r3, r3, #16
 800384a:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800384c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800384e:	f7fe fc31 	bl	80020b4 <HAL_DMA_Abort>
 8003852:	e7da      	b.n	800380a <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003854:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003856:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003858:	b29b      	uxth	r3, r3
 800385a:	1ac9      	subs	r1, r1, r3
 800385c:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800385e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	f43f af4a 	beq.w	80036fc <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8003868:	2900      	cmp	r1, #0
 800386a:	f43f af47 	beq.w	80036fc <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800386e:	68d3      	ldr	r3, [r2, #12]
 8003870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003874:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	6953      	ldr	r3, [r2, #20]
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8003880:	2320      	movs	r3, #32
 8003882:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003886:	2300      	movs	r3, #0
 8003888:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	68d3      	ldr	r3, [r2, #12]
 800388e:	f023 0310 	bic.w	r3, r3, #16
 8003892:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003894:	4620      	mov	r0, r4
 8003896:	f7ff fe9d 	bl	80035d4 <HAL_UARTEx_RxEventCallback>
      return;
 800389a:	e72f      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 800389c:	4620      	mov	r0, r4
 800389e:	f7ff fdb8 	bl	8003412 <UART_Transmit_IT>
    return;
 80038a2:	e72b      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7ff fe80 	bl	80035aa <UART_EndTransmit_IT>
    return;
 80038aa:	e727      	b.n	80036fc <HAL_UART_IRQHandler+0x50>
 80038ac:	080035c5 	.word	0x080035c5

080038b0 <UART_Start_Receive_IT>:
{
 80038b0:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 80038b2:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 80038b4:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038b6:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	2000      	movs	r0, #0
 80038ba:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038bc:	2222      	movs	r2, #34	; 0x22
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 80038c2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	68ca      	ldr	r2, [r1, #12]
 80038ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ce:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	694a      	ldr	r2, [r1, #20]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68d3      	ldr	r3, [r2, #12]
 80038de:	f043 0320 	orr.w	r3, r3, #32
 80038e2:	60d3      	str	r3, [r2, #12]
}
 80038e4:	4770      	bx	lr

080038e6 <HAL_UART_Receive_IT>:
{
 80038e6:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d10d      	bne.n	800390e <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 80038f2:	b171      	cbz	r1, 8003912 <HAL_UART_Receive_IT+0x2c>
 80038f4:	b17a      	cbz	r2, 8003916 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 80038f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d00d      	beq.n	800391a <HAL_UART_Receive_IT+0x34>
 80038fe:	2301      	movs	r3, #1
 8003900:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003904:	2300      	movs	r3, #0
 8003906:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003908:	f7ff ffd2 	bl	80038b0 <UART_Start_Receive_IT>
 800390c:	e000      	b.n	8003910 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 800390e:	2002      	movs	r0, #2
}
 8003910:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8003912:	2001      	movs	r0, #1
 8003914:	e7fc      	b.n	8003910 <HAL_UART_Receive_IT+0x2a>
 8003916:	2001      	movs	r0, #1
 8003918:	e7fa      	b.n	8003910 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 800391a:	2002      	movs	r0, #2
 800391c:	e7f8      	b.n	8003910 <HAL_UART_Receive_IT+0x2a>
	...

08003920 <ceil>:
 8003920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003924:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003928:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800392c:	2e13      	cmp	r6, #19
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4607      	mov	r7, r0
 8003934:	460c      	mov	r4, r1
 8003936:	4605      	mov	r5, r0
 8003938:	dc31      	bgt.n	800399e <ceil+0x7e>
 800393a:	2e00      	cmp	r6, #0
 800393c:	da12      	bge.n	8003964 <ceil+0x44>
 800393e:	a334      	add	r3, pc, #208	; (adr r3, 8003a10 <ceil+0xf0>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f7fc fc0a 	bl	800015c <__adddf3>
 8003948:	2200      	movs	r2, #0
 800394a:	2300      	movs	r3, #0
 800394c:	f7fd f84c 	bl	80009e8 <__aeabi_dcmpgt>
 8003950:	b128      	cbz	r0, 800395e <ceil+0x3e>
 8003952:	2c00      	cmp	r4, #0
 8003954:	db56      	blt.n	8003a04 <ceil+0xe4>
 8003956:	433c      	orrs	r4, r7
 8003958:	d058      	beq.n	8003a0c <ceil+0xec>
 800395a:	2500      	movs	r5, #0
 800395c:	4c2e      	ldr	r4, [pc, #184]	; (8003a18 <ceil+0xf8>)
 800395e:	4623      	mov	r3, r4
 8003960:	462f      	mov	r7, r5
 8003962:	e025      	b.n	80039b0 <ceil+0x90>
 8003964:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <ceil+0xfc>)
 8003966:	fa42 f806 	asr.w	r8, r2, r6
 800396a:	ea01 0208 	and.w	r2, r1, r8
 800396e:	4302      	orrs	r2, r0
 8003970:	d01e      	beq.n	80039b0 <ceil+0x90>
 8003972:	a327      	add	r3, pc, #156	; (adr r3, 8003a10 <ceil+0xf0>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fc fbf0 	bl	800015c <__adddf3>
 800397c:	2200      	movs	r2, #0
 800397e:	2300      	movs	r3, #0
 8003980:	f7fd f832 	bl	80009e8 <__aeabi_dcmpgt>
 8003984:	2800      	cmp	r0, #0
 8003986:	d0ea      	beq.n	800395e <ceil+0x3e>
 8003988:	2c00      	cmp	r4, #0
 800398a:	bfc2      	ittt	gt
 800398c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8003990:	fa43 f606 	asrgt.w	r6, r3, r6
 8003994:	19a4      	addgt	r4, r4, r6
 8003996:	2500      	movs	r5, #0
 8003998:	ea24 0408 	bic.w	r4, r4, r8
 800399c:	e7df      	b.n	800395e <ceil+0x3e>
 800399e:	2e33      	cmp	r6, #51	; 0x33
 80039a0:	dd0a      	ble.n	80039b8 <ceil+0x98>
 80039a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80039a6:	d103      	bne.n	80039b0 <ceil+0x90>
 80039a8:	f7fc fbd8 	bl	800015c <__adddf3>
 80039ac:	4607      	mov	r7, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4638      	mov	r0, r7
 80039b2:	4619      	mov	r1, r3
 80039b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295
 80039bc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80039c0:	fa22 f808 	lsr.w	r8, r2, r8
 80039c4:	ea18 0f00 	tst.w	r8, r0
 80039c8:	d0f2      	beq.n	80039b0 <ceil+0x90>
 80039ca:	a311      	add	r3, pc, #68	; (adr r3, 8003a10 <ceil+0xf0>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fbc4 	bl	800015c <__adddf3>
 80039d4:	2200      	movs	r2, #0
 80039d6:	2300      	movs	r3, #0
 80039d8:	f7fd f806 	bl	80009e8 <__aeabi_dcmpgt>
 80039dc:	2800      	cmp	r0, #0
 80039de:	d0be      	beq.n	800395e <ceil+0x3e>
 80039e0:	2c00      	cmp	r4, #0
 80039e2:	dd02      	ble.n	80039ea <ceil+0xca>
 80039e4:	2e14      	cmp	r6, #20
 80039e6:	d103      	bne.n	80039f0 <ceil+0xd0>
 80039e8:	3401      	adds	r4, #1
 80039ea:	ea25 0508 	bic.w	r5, r5, r8
 80039ee:	e7b6      	b.n	800395e <ceil+0x3e>
 80039f0:	2301      	movs	r3, #1
 80039f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80039f6:	fa03 f606 	lsl.w	r6, r3, r6
 80039fa:	4435      	add	r5, r6
 80039fc:	42bd      	cmp	r5, r7
 80039fe:	bf38      	it	cc
 8003a00:	18e4      	addcc	r4, r4, r3
 8003a02:	e7f2      	b.n	80039ea <ceil+0xca>
 8003a04:	2500      	movs	r5, #0
 8003a06:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003a0a:	e7a8      	b.n	800395e <ceil+0x3e>
 8003a0c:	4625      	mov	r5, r4
 8003a0e:	e7a6      	b.n	800395e <ceil+0x3e>
 8003a10:	8800759c 	.word	0x8800759c
 8003a14:	7e37e43c 	.word	0x7e37e43c
 8003a18:	3ff00000 	.word	0x3ff00000
 8003a1c:	000fffff 	.word	0x000fffff

08003a20 <floor>:
 8003a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a24:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003a28:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8003a2c:	2e13      	cmp	r6, #19
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4607      	mov	r7, r0
 8003a34:	460c      	mov	r4, r1
 8003a36:	4605      	mov	r5, r0
 8003a38:	dc34      	bgt.n	8003aa4 <floor+0x84>
 8003a3a:	2e00      	cmp	r6, #0
 8003a3c:	da15      	bge.n	8003a6a <floor+0x4a>
 8003a3e:	a334      	add	r3, pc, #208	; (adr r3, 8003b10 <floor+0xf0>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fb8a 	bl	800015c <__adddf3>
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f7fc ffcc 	bl	80009e8 <__aeabi_dcmpgt>
 8003a50:	b140      	cbz	r0, 8003a64 <floor+0x44>
 8003a52:	2c00      	cmp	r4, #0
 8003a54:	da59      	bge.n	8003b0a <floor+0xea>
 8003a56:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003a5a:	ea57 0503 	orrs.w	r5, r7, r3
 8003a5e:	d001      	beq.n	8003a64 <floor+0x44>
 8003a60:	2500      	movs	r5, #0
 8003a62:	4c2d      	ldr	r4, [pc, #180]	; (8003b18 <floor+0xf8>)
 8003a64:	4623      	mov	r3, r4
 8003a66:	462f      	mov	r7, r5
 8003a68:	e025      	b.n	8003ab6 <floor+0x96>
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <floor+0xfc>)
 8003a6c:	fa42 f806 	asr.w	r8, r2, r6
 8003a70:	ea01 0208 	and.w	r2, r1, r8
 8003a74:	4302      	orrs	r2, r0
 8003a76:	d01e      	beq.n	8003ab6 <floor+0x96>
 8003a78:	a325      	add	r3, pc, #148	; (adr r3, 8003b10 <floor+0xf0>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f7fc fb6d 	bl	800015c <__adddf3>
 8003a82:	2200      	movs	r2, #0
 8003a84:	2300      	movs	r3, #0
 8003a86:	f7fc ffaf 	bl	80009e8 <__aeabi_dcmpgt>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d0ea      	beq.n	8003a64 <floor+0x44>
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	bfbe      	ittt	lt
 8003a92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003a96:	fa43 f606 	asrlt.w	r6, r3, r6
 8003a9a:	19a4      	addlt	r4, r4, r6
 8003a9c:	2500      	movs	r5, #0
 8003a9e:	ea24 0408 	bic.w	r4, r4, r8
 8003aa2:	e7df      	b.n	8003a64 <floor+0x44>
 8003aa4:	2e33      	cmp	r6, #51	; 0x33
 8003aa6:	dd0a      	ble.n	8003abe <floor+0x9e>
 8003aa8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003aac:	d103      	bne.n	8003ab6 <floor+0x96>
 8003aae:	f7fc fb55 	bl	800015c <__adddf3>
 8003ab2:	4607      	mov	r7, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	4619      	mov	r1, r3
 8003aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003abe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8003ac6:	fa22 f808 	lsr.w	r8, r2, r8
 8003aca:	ea18 0f00 	tst.w	r8, r0
 8003ace:	d0f2      	beq.n	8003ab6 <floor+0x96>
 8003ad0:	a30f      	add	r3, pc, #60	; (adr r3, 8003b10 <floor+0xf0>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc fb41 	bl	800015c <__adddf3>
 8003ada:	2200      	movs	r2, #0
 8003adc:	2300      	movs	r3, #0
 8003ade:	f7fc ff83 	bl	80009e8 <__aeabi_dcmpgt>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d0be      	beq.n	8003a64 <floor+0x44>
 8003ae6:	2c00      	cmp	r4, #0
 8003ae8:	da02      	bge.n	8003af0 <floor+0xd0>
 8003aea:	2e14      	cmp	r6, #20
 8003aec:	d103      	bne.n	8003af6 <floor+0xd6>
 8003aee:	3401      	adds	r4, #1
 8003af0:	ea25 0508 	bic.w	r5, r5, r8
 8003af4:	e7b6      	b.n	8003a64 <floor+0x44>
 8003af6:	2301      	movs	r3, #1
 8003af8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003afc:	fa03 f606 	lsl.w	r6, r3, r6
 8003b00:	4435      	add	r5, r6
 8003b02:	42bd      	cmp	r5, r7
 8003b04:	bf38      	it	cc
 8003b06:	18e4      	addcc	r4, r4, r3
 8003b08:	e7f2      	b.n	8003af0 <floor+0xd0>
 8003b0a:	2500      	movs	r5, #0
 8003b0c:	462c      	mov	r4, r5
 8003b0e:	e7a9      	b.n	8003a64 <floor+0x44>
 8003b10:	8800759c 	.word	0x8800759c
 8003b14:	7e37e43c 	.word	0x7e37e43c
 8003b18:	bff00000 	.word	0xbff00000
 8003b1c:	000fffff 	.word	0x000fffff

08003b20 <pow>:
 8003b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b24:	461f      	mov	r7, r3
 8003b26:	4680      	mov	r8, r0
 8003b28:	4689      	mov	r9, r1
 8003b2a:	4616      	mov	r6, r2
 8003b2c:	f000 f8a4 	bl	8003c78 <__ieee754_pow>
 8003b30:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <pow+0x148>)
 8003b32:	4604      	mov	r4, r0
 8003b34:	f993 3000 	ldrsb.w	r3, [r3]
 8003b38:	460d      	mov	r5, r1
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	d015      	beq.n	8003b6a <pow+0x4a>
 8003b3e:	4632      	mov	r2, r6
 8003b40:	463b      	mov	r3, r7
 8003b42:	4630      	mov	r0, r6
 8003b44:	4639      	mov	r1, r7
 8003b46:	f7fc ff59 	bl	80009fc <__aeabi_dcmpun>
 8003b4a:	b970      	cbnz	r0, 8003b6a <pow+0x4a>
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	4640      	mov	r0, r8
 8003b52:	4649      	mov	r1, r9
 8003b54:	f7fc ff52 	bl	80009fc <__aeabi_dcmpun>
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	b148      	cbz	r0, 8003b72 <pow+0x52>
 8003b5e:	4630      	mov	r0, r6
 8003b60:	4639      	mov	r1, r7
 8003b62:	f7fc ff19 	bl	8000998 <__aeabi_dcmpeq>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d17b      	bne.n	8003c62 <pow+0x142>
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b72:	4640      	mov	r0, r8
 8003b74:	4649      	mov	r1, r9
 8003b76:	f7fc ff0f 	bl	8000998 <__aeabi_dcmpeq>
 8003b7a:	b1e0      	cbz	r0, 8003bb6 <pow+0x96>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	4630      	mov	r0, r6
 8003b82:	4639      	mov	r1, r7
 8003b84:	f7fc ff08 	bl	8000998 <__aeabi_dcmpeq>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d16a      	bne.n	8003c62 <pow+0x142>
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	4639      	mov	r1, r7
 8003b90:	f000 fe37 	bl	8004802 <finite>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d0e8      	beq.n	8003b6a <pow+0x4a>
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	f7fc ff04 	bl	80009ac <__aeabi_dcmplt>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d0e0      	beq.n	8003b6a <pow+0x4a>
 8003ba8:	f000 ff48 	bl	8004a3c <__errno>
 8003bac:	2321      	movs	r3, #33	; 0x21
 8003bae:	2400      	movs	r4, #0
 8003bb0:	6003      	str	r3, [r0, #0]
 8003bb2:	4d2e      	ldr	r5, [pc, #184]	; (8003c6c <pow+0x14c>)
 8003bb4:	e7d9      	b.n	8003b6a <pow+0x4a>
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f000 fe22 	bl	8004802 <finite>
 8003bbe:	bba8      	cbnz	r0, 8003c2c <pow+0x10c>
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	f000 fe1d 	bl	8004802 <finite>
 8003bc8:	b380      	cbz	r0, 8003c2c <pow+0x10c>
 8003bca:	4630      	mov	r0, r6
 8003bcc:	4639      	mov	r1, r7
 8003bce:	f000 fe18 	bl	8004802 <finite>
 8003bd2:	b358      	cbz	r0, 8003c2c <pow+0x10c>
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	462b      	mov	r3, r5
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f7fc ff0e 	bl	80009fc <__aeabi_dcmpun>
 8003be0:	b160      	cbz	r0, 8003bfc <pow+0xdc>
 8003be2:	f000 ff2b 	bl	8004a3c <__errno>
 8003be6:	2321      	movs	r3, #33	; 0x21
 8003be8:	2200      	movs	r2, #0
 8003bea:	6003      	str	r3, [r0, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f7fc fd93 	bl	800071c <__aeabi_ddiv>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	e7b6      	b.n	8003b6a <pow+0x4a>
 8003bfc:	f000 ff1e 	bl	8004a3c <__errno>
 8003c00:	2322      	movs	r3, #34	; 0x22
 8003c02:	2200      	movs	r2, #0
 8003c04:	6003      	str	r3, [r0, #0]
 8003c06:	4649      	mov	r1, r9
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	f7fc fece 	bl	80009ac <__aeabi_dcmplt>
 8003c10:	2400      	movs	r4, #0
 8003c12:	b148      	cbz	r0, 8003c28 <pow+0x108>
 8003c14:	4630      	mov	r0, r6
 8003c16:	4639      	mov	r1, r7
 8003c18:	f000 fe00 	bl	800481c <rint>
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	463b      	mov	r3, r7
 8003c20:	f7fc feba 	bl	8000998 <__aeabi_dcmpeq>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d0c4      	beq.n	8003bb2 <pow+0x92>
 8003c28:	4d11      	ldr	r5, [pc, #68]	; (8003c70 <pow+0x150>)
 8003c2a:	e79e      	b.n	8003b6a <pow+0x4a>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4620      	mov	r0, r4
 8003c32:	4629      	mov	r1, r5
 8003c34:	f7fc feb0 	bl	8000998 <__aeabi_dcmpeq>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d096      	beq.n	8003b6a <pow+0x4a>
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	4649      	mov	r1, r9
 8003c40:	f000 fddf 	bl	8004802 <finite>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d090      	beq.n	8003b6a <pow+0x4a>
 8003c48:	4630      	mov	r0, r6
 8003c4a:	4639      	mov	r1, r7
 8003c4c:	f000 fdd9 	bl	8004802 <finite>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d08a      	beq.n	8003b6a <pow+0x4a>
 8003c54:	f000 fef2 	bl	8004a3c <__errno>
 8003c58:	2322      	movs	r3, #34	; 0x22
 8003c5a:	2400      	movs	r4, #0
 8003c5c:	2500      	movs	r5, #0
 8003c5e:	6003      	str	r3, [r0, #0]
 8003c60:	e783      	b.n	8003b6a <pow+0x4a>
 8003c62:	2400      	movs	r4, #0
 8003c64:	4d03      	ldr	r5, [pc, #12]	; (8003c74 <pow+0x154>)
 8003c66:	e780      	b.n	8003b6a <pow+0x4a>
 8003c68:	20000074 	.word	0x20000074
 8003c6c:	fff00000 	.word	0xfff00000
 8003c70:	7ff00000 	.word	0x7ff00000
 8003c74:	3ff00000 	.word	0x3ff00000

08003c78 <__ieee754_pow>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	b093      	sub	sp, #76	; 0x4c
 8003c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c82:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8003c86:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003c8a:	ea55 0302 	orrs.w	r3, r5, r2
 8003c8e:	4607      	mov	r7, r0
 8003c90:	4688      	mov	r8, r1
 8003c92:	f000 84bf 	beq.w	8004614 <__ieee754_pow+0x99c>
 8003c96:	4b7e      	ldr	r3, [pc, #504]	; (8003e90 <__ieee754_pow+0x218>)
 8003c98:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	4689      	mov	r9, r1
 8003ca0:	4682      	mov	sl, r0
 8003ca2:	dc09      	bgt.n	8003cb8 <__ieee754_pow+0x40>
 8003ca4:	d103      	bne.n	8003cae <__ieee754_pow+0x36>
 8003ca6:	b978      	cbnz	r0, 8003cc8 <__ieee754_pow+0x50>
 8003ca8:	42a5      	cmp	r5, r4
 8003caa:	dd02      	ble.n	8003cb2 <__ieee754_pow+0x3a>
 8003cac:	e00c      	b.n	8003cc8 <__ieee754_pow+0x50>
 8003cae:	429d      	cmp	r5, r3
 8003cb0:	dc02      	bgt.n	8003cb8 <__ieee754_pow+0x40>
 8003cb2:	429d      	cmp	r5, r3
 8003cb4:	d10e      	bne.n	8003cd4 <__ieee754_pow+0x5c>
 8003cb6:	b16a      	cbz	r2, 8003cd4 <__ieee754_pow+0x5c>
 8003cb8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003cbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003cc0:	ea54 030a 	orrs.w	r3, r4, sl
 8003cc4:	f000 84a6 	beq.w	8004614 <__ieee754_pow+0x99c>
 8003cc8:	4872      	ldr	r0, [pc, #456]	; (8003e94 <__ieee754_pow+0x21c>)
 8003cca:	b013      	add	sp, #76	; 0x4c
 8003ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd0:	f000 bd9e 	b.w	8004810 <nan>
 8003cd4:	f1b9 0f00 	cmp.w	r9, #0
 8003cd8:	da39      	bge.n	8003d4e <__ieee754_pow+0xd6>
 8003cda:	4b6f      	ldr	r3, [pc, #444]	; (8003e98 <__ieee754_pow+0x220>)
 8003cdc:	429d      	cmp	r5, r3
 8003cde:	dc54      	bgt.n	8003d8a <__ieee754_pow+0x112>
 8003ce0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003ce4:	429d      	cmp	r5, r3
 8003ce6:	f340 84a6 	ble.w	8004636 <__ieee754_pow+0x9be>
 8003cea:	152b      	asrs	r3, r5, #20
 8003cec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003cf0:	2b14      	cmp	r3, #20
 8003cf2:	dd0f      	ble.n	8003d14 <__ieee754_pow+0x9c>
 8003cf4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003cf8:	fa22 f103 	lsr.w	r1, r2, r3
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	4293      	cmp	r3, r2
 8003d02:	f040 8498 	bne.w	8004636 <__ieee754_pow+0x9be>
 8003d06:	f001 0101 	and.w	r1, r1, #1
 8003d0a:	f1c1 0302 	rsb	r3, r1, #2
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	b182      	cbz	r2, 8003d34 <__ieee754_pow+0xbc>
 8003d12:	e05e      	b.n	8003dd2 <__ieee754_pow+0x15a>
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	d15a      	bne.n	8003dce <__ieee754_pow+0x156>
 8003d18:	f1c3 0314 	rsb	r3, r3, #20
 8003d1c:	fa45 f103 	asr.w	r1, r5, r3
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	42ab      	cmp	r3, r5
 8003d26:	f040 8483 	bne.w	8004630 <__ieee754_pow+0x9b8>
 8003d2a:	f001 0101 	and.w	r1, r1, #1
 8003d2e:	f1c1 0302 	rsb	r3, r1, #2
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <__ieee754_pow+0x224>)
 8003d36:	429d      	cmp	r5, r3
 8003d38:	d130      	bne.n	8003d9c <__ieee754_pow+0x124>
 8003d3a:	2e00      	cmp	r6, #0
 8003d3c:	f280 8474 	bge.w	8004628 <__ieee754_pow+0x9b0>
 8003d40:	463a      	mov	r2, r7
 8003d42:	4643      	mov	r3, r8
 8003d44:	2000      	movs	r0, #0
 8003d46:	4955      	ldr	r1, [pc, #340]	; (8003e9c <__ieee754_pow+0x224>)
 8003d48:	f7fc fce8 	bl	800071c <__aeabi_ddiv>
 8003d4c:	e02f      	b.n	8003dae <__ieee754_pow+0x136>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d13d      	bne.n	8003dd2 <__ieee754_pow+0x15a>
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <__ieee754_pow+0x218>)
 8003d58:	429d      	cmp	r5, r3
 8003d5a:	d1eb      	bne.n	8003d34 <__ieee754_pow+0xbc>
 8003d5c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003d60:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003d64:	ea53 030a 	orrs.w	r3, r3, sl
 8003d68:	f000 8454 	beq.w	8004614 <__ieee754_pow+0x99c>
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <__ieee754_pow+0x228>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	dd0d      	ble.n	8003d8e <__ieee754_pow+0x116>
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	f280 8454 	bge.w	8004620 <__ieee754_pow+0x9a8>
 8003d78:	f04f 0b00 	mov.w	fp, #0
 8003d7c:	f04f 0c00 	mov.w	ip, #0
 8003d80:	4658      	mov	r0, fp
 8003d82:	4661      	mov	r1, ip
 8003d84:	b013      	add	sp, #76	; 0x4c
 8003d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e7e0      	b.n	8003d50 <__ieee754_pow+0xd8>
 8003d8e:	2e00      	cmp	r6, #0
 8003d90:	daf2      	bge.n	8003d78 <__ieee754_pow+0x100>
 8003d92:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003d96:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003d9a:	e7f1      	b.n	8003d80 <__ieee754_pow+0x108>
 8003d9c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003da0:	d108      	bne.n	8003db4 <__ieee754_pow+0x13c>
 8003da2:	463a      	mov	r2, r7
 8003da4:	4643      	mov	r3, r8
 8003da6:	4638      	mov	r0, r7
 8003da8:	4641      	mov	r1, r8
 8003daa:	f7fc fb8d 	bl	80004c8 <__aeabi_dmul>
 8003dae:	4683      	mov	fp, r0
 8003db0:	468c      	mov	ip, r1
 8003db2:	e7e5      	b.n	8003d80 <__ieee754_pow+0x108>
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <__ieee754_pow+0x22c>)
 8003db6:	429e      	cmp	r6, r3
 8003db8:	d10b      	bne.n	8003dd2 <__ieee754_pow+0x15a>
 8003dba:	f1b9 0f00 	cmp.w	r9, #0
 8003dbe:	db08      	blt.n	8003dd2 <__ieee754_pow+0x15a>
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	b013      	add	sp, #76	; 0x4c
 8003dc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	f000 bc6b 	b.w	80046a4 <__ieee754_sqrt>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	f000 fd11 	bl	80047fc <fabs>
 8003dda:	4683      	mov	fp, r0
 8003ddc:	468c      	mov	ip, r1
 8003dde:	f1ba 0f00 	cmp.w	sl, #0
 8003de2:	d129      	bne.n	8003e38 <__ieee754_pow+0x1c0>
 8003de4:	b124      	cbz	r4, 8003df0 <__ieee754_pow+0x178>
 8003de6:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <__ieee754_pow+0x224>)
 8003de8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d123      	bne.n	8003e38 <__ieee754_pow+0x1c0>
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	da07      	bge.n	8003e04 <__ieee754_pow+0x18c>
 8003df4:	465a      	mov	r2, fp
 8003df6:	4663      	mov	r3, ip
 8003df8:	2000      	movs	r0, #0
 8003dfa:	4928      	ldr	r1, [pc, #160]	; (8003e9c <__ieee754_pow+0x224>)
 8003dfc:	f7fc fc8e 	bl	800071c <__aeabi_ddiv>
 8003e00:	4683      	mov	fp, r0
 8003e02:	468c      	mov	ip, r1
 8003e04:	f1b9 0f00 	cmp.w	r9, #0
 8003e08:	daba      	bge.n	8003d80 <__ieee754_pow+0x108>
 8003e0a:	9b00      	ldr	r3, [sp, #0]
 8003e0c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003e10:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003e14:	4323      	orrs	r3, r4
 8003e16:	d108      	bne.n	8003e2a <__ieee754_pow+0x1b2>
 8003e18:	465a      	mov	r2, fp
 8003e1a:	4663      	mov	r3, ip
 8003e1c:	4658      	mov	r0, fp
 8003e1e:	4661      	mov	r1, ip
 8003e20:	f7fc f99a 	bl	8000158 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	e78e      	b.n	8003d48 <__ieee754_pow+0xd0>
 8003e2a:	9b00      	ldr	r3, [sp, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d1a7      	bne.n	8003d80 <__ieee754_pow+0x108>
 8003e30:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003e34:	469c      	mov	ip, r3
 8003e36:	e7a3      	b.n	8003d80 <__ieee754_pow+0x108>
 8003e38:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	930c      	str	r3, [sp, #48]	; 0x30
 8003e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e42:	9b00      	ldr	r3, [sp, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d104      	bne.n	8003e52 <__ieee754_pow+0x1da>
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4643      	mov	r3, r8
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	4641      	mov	r1, r8
 8003e50:	e7e6      	b.n	8003e20 <__ieee754_pow+0x1a8>
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <__ieee754_pow+0x230>)
 8003e54:	429d      	cmp	r5, r3
 8003e56:	f340 80f9 	ble.w	800404c <__ieee754_pow+0x3d4>
 8003e5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003e5e:	429d      	cmp	r5, r3
 8003e60:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <__ieee754_pow+0x228>)
 8003e62:	dd09      	ble.n	8003e78 <__ieee754_pow+0x200>
 8003e64:	429c      	cmp	r4, r3
 8003e66:	dc0c      	bgt.n	8003e82 <__ieee754_pow+0x20a>
 8003e68:	2e00      	cmp	r6, #0
 8003e6a:	da85      	bge.n	8003d78 <__ieee754_pow+0x100>
 8003e6c:	a306      	add	r3, pc, #24	; (adr r3, 8003e88 <__ieee754_pow+0x210>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	e798      	b.n	8003daa <__ieee754_pow+0x132>
 8003e78:	429c      	cmp	r4, r3
 8003e7a:	dbf5      	blt.n	8003e68 <__ieee754_pow+0x1f0>
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <__ieee754_pow+0x224>)
 8003e7e:	429c      	cmp	r4, r3
 8003e80:	dd14      	ble.n	8003eac <__ieee754_pow+0x234>
 8003e82:	2e00      	cmp	r6, #0
 8003e84:	dcf2      	bgt.n	8003e6c <__ieee754_pow+0x1f4>
 8003e86:	e777      	b.n	8003d78 <__ieee754_pow+0x100>
 8003e88:	8800759c 	.word	0x8800759c
 8003e8c:	7e37e43c 	.word	0x7e37e43c
 8003e90:	7ff00000 	.word	0x7ff00000
 8003e94:	08004ae9 	.word	0x08004ae9
 8003e98:	433fffff 	.word	0x433fffff
 8003e9c:	3ff00000 	.word	0x3ff00000
 8003ea0:	3fefffff 	.word	0x3fefffff
 8003ea4:	3fe00000 	.word	0x3fe00000
 8003ea8:	41e00000 	.word	0x41e00000
 8003eac:	4661      	mov	r1, ip
 8003eae:	2200      	movs	r2, #0
 8003eb0:	4658      	mov	r0, fp
 8003eb2:	4b61      	ldr	r3, [pc, #388]	; (8004038 <__ieee754_pow+0x3c0>)
 8003eb4:	f7fc f950 	bl	8000158 <__aeabi_dsub>
 8003eb8:	a355      	add	r3, pc, #340	; (adr r3, 8004010 <__ieee754_pow+0x398>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	460d      	mov	r5, r1
 8003ec2:	f7fc fb01 	bl	80004c8 <__aeabi_dmul>
 8003ec6:	a354      	add	r3, pc, #336	; (adr r3, 8004018 <__ieee754_pow+0x3a0>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	4606      	mov	r6, r0
 8003ece:	460f      	mov	r7, r1
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f7fc faf8 	bl	80004c8 <__aeabi_dmul>
 8003ed8:	2200      	movs	r2, #0
 8003eda:	4682      	mov	sl, r0
 8003edc:	468b      	mov	fp, r1
 8003ede:	4620      	mov	r0, r4
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4b56      	ldr	r3, [pc, #344]	; (800403c <__ieee754_pow+0x3c4>)
 8003ee4:	f7fc faf0 	bl	80004c8 <__aeabi_dmul>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	a14c      	add	r1, pc, #304	; (adr r1, 8004020 <__ieee754_pow+0x3a8>)
 8003eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ef2:	f7fc f931 	bl	8000158 <__aeabi_dsub>
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	f7fc fae5 	bl	80004c8 <__aeabi_dmul>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	2000      	movs	r0, #0
 8003f04:	494e      	ldr	r1, [pc, #312]	; (8004040 <__ieee754_pow+0x3c8>)
 8003f06:	f7fc f927 	bl	8000158 <__aeabi_dsub>
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	4680      	mov	r8, r0
 8003f10:	4689      	mov	r9, r1
 8003f12:	4620      	mov	r0, r4
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7fc fad7 	bl	80004c8 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc fad1 	bl	80004c8 <__aeabi_dmul>
 8003f26:	a340      	add	r3, pc, #256	; (adr r3, 8004028 <__ieee754_pow+0x3b0>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc facc 	bl	80004c8 <__aeabi_dmul>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4650      	mov	r0, sl
 8003f36:	4659      	mov	r1, fp
 8003f38:	f7fc f90e 	bl	8000158 <__aeabi_dsub>
 8003f3c:	f04f 0a00 	mov.w	sl, #0
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4604      	mov	r4, r0
 8003f46:	460d      	mov	r5, r1
 8003f48:	4630      	mov	r0, r6
 8003f4a:	4639      	mov	r1, r7
 8003f4c:	f7fc f906 	bl	800015c <__adddf3>
 8003f50:	4632      	mov	r2, r6
 8003f52:	463b      	mov	r3, r7
 8003f54:	4650      	mov	r0, sl
 8003f56:	468b      	mov	fp, r1
 8003f58:	f7fc f8fe 	bl	8000158 <__aeabi_dsub>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4620      	mov	r0, r4
 8003f62:	4629      	mov	r1, r5
 8003f64:	f7fc f8f8 	bl	8000158 <__aeabi_dsub>
 8003f68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f6c:	9b00      	ldr	r3, [sp, #0]
 8003f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f70:	3b01      	subs	r3, #1
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f04f 0600 	mov.w	r6, #0
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	bf0c      	ite	eq
 8003f7e:	4b31      	ldreq	r3, [pc, #196]	; (8004044 <__ieee754_pow+0x3cc>)
 8003f80:	4b2d      	ldrne	r3, [pc, #180]	; (8004038 <__ieee754_pow+0x3c0>)
 8003f82:	4604      	mov	r4, r0
 8003f84:	460d      	mov	r5, r1
 8003f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f8a:	e9cd 2300 	strd	r2, r3, [sp]
 8003f8e:	4632      	mov	r2, r6
 8003f90:	463b      	mov	r3, r7
 8003f92:	f7fc f8e1 	bl	8000158 <__aeabi_dsub>
 8003f96:	4652      	mov	r2, sl
 8003f98:	465b      	mov	r3, fp
 8003f9a:	f7fc fa95 	bl	80004c8 <__aeabi_dmul>
 8003f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fa2:	4680      	mov	r8, r0
 8003fa4:	4689      	mov	r9, r1
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7fc fa8d 	bl	80004c8 <__aeabi_dmul>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	f7fc f8d1 	bl	800015c <__adddf3>
 8003fba:	4632      	mov	r2, r6
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	4680      	mov	r8, r0
 8003fc0:	4689      	mov	r9, r1
 8003fc2:	4650      	mov	r0, sl
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	f7fc fa7f 	bl	80004c8 <__aeabi_dmul>
 8003fca:	4604      	mov	r4, r0
 8003fcc:	460d      	mov	r5, r1
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003fda:	f7fc f8bf 	bl	800015c <__adddf3>
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <__ieee754_pow+0x3d0>)
 8003fe0:	4682      	mov	sl, r0
 8003fe2:	4299      	cmp	r1, r3
 8003fe4:	460f      	mov	r7, r1
 8003fe6:	460e      	mov	r6, r1
 8003fe8:	f340 82ed 	ble.w	80045c6 <__ieee754_pow+0x94e>
 8003fec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003ff0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003ff4:	4303      	orrs	r3, r0
 8003ff6:	f000 81e7 	beq.w	80043c8 <__ieee754_pow+0x750>
 8003ffa:	a30d      	add	r3, pc, #52	; (adr r3, 8004030 <__ieee754_pow+0x3b8>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004004:	f7fc fa60 	bl	80004c8 <__aeabi_dmul>
 8004008:	a309      	add	r3, pc, #36	; (adr r3, 8004030 <__ieee754_pow+0x3b8>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	e6cc      	b.n	8003daa <__ieee754_pow+0x132>
 8004010:	60000000 	.word	0x60000000
 8004014:	3ff71547 	.word	0x3ff71547
 8004018:	f85ddf44 	.word	0xf85ddf44
 800401c:	3e54ae0b 	.word	0x3e54ae0b
 8004020:	55555555 	.word	0x55555555
 8004024:	3fd55555 	.word	0x3fd55555
 8004028:	652b82fe 	.word	0x652b82fe
 800402c:	3ff71547 	.word	0x3ff71547
 8004030:	8800759c 	.word	0x8800759c
 8004034:	7e37e43c 	.word	0x7e37e43c
 8004038:	3ff00000 	.word	0x3ff00000
 800403c:	3fd00000 	.word	0x3fd00000
 8004040:	3fe00000 	.word	0x3fe00000
 8004044:	bff00000 	.word	0xbff00000
 8004048:	408fffff 	.word	0x408fffff
 800404c:	4bd4      	ldr	r3, [pc, #848]	; (80043a0 <__ieee754_pow+0x728>)
 800404e:	2200      	movs	r2, #0
 8004050:	ea09 0303 	and.w	r3, r9, r3
 8004054:	b943      	cbnz	r3, 8004068 <__ieee754_pow+0x3f0>
 8004056:	4658      	mov	r0, fp
 8004058:	4661      	mov	r1, ip
 800405a:	4bd2      	ldr	r3, [pc, #840]	; (80043a4 <__ieee754_pow+0x72c>)
 800405c:	f7fc fa34 	bl	80004c8 <__aeabi_dmul>
 8004060:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004064:	4683      	mov	fp, r0
 8004066:	460c      	mov	r4, r1
 8004068:	1523      	asrs	r3, r4, #20
 800406a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800406e:	4413      	add	r3, r2
 8004070:	930b      	str	r3, [sp, #44]	; 0x2c
 8004072:	4bcd      	ldr	r3, [pc, #820]	; (80043a8 <__ieee754_pow+0x730>)
 8004074:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004078:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800407c:	429c      	cmp	r4, r3
 800407e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004082:	dd08      	ble.n	8004096 <__ieee754_pow+0x41e>
 8004084:	4bc9      	ldr	r3, [pc, #804]	; (80043ac <__ieee754_pow+0x734>)
 8004086:	429c      	cmp	r4, r3
 8004088:	f340 819c 	ble.w	80043c4 <__ieee754_pow+0x74c>
 800408c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800408e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004092:	3301      	adds	r3, #1
 8004094:	930b      	str	r3, [sp, #44]	; 0x2c
 8004096:	2600      	movs	r6, #0
 8004098:	00f3      	lsls	r3, r6, #3
 800409a:	930d      	str	r3, [sp, #52]	; 0x34
 800409c:	4bc4      	ldr	r3, [pc, #784]	; (80043b0 <__ieee754_pow+0x738>)
 800409e:	4658      	mov	r0, fp
 80040a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80040a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040a8:	4629      	mov	r1, r5
 80040aa:	461a      	mov	r2, r3
 80040ac:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80040b0:	4623      	mov	r3, r4
 80040b2:	f7fc f851 	bl	8000158 <__aeabi_dsub>
 80040b6:	46da      	mov	sl, fp
 80040b8:	462b      	mov	r3, r5
 80040ba:	4652      	mov	r2, sl
 80040bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80040c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80040c4:	f7fc f84a 	bl	800015c <__adddf3>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	2000      	movs	r0, #0
 80040ce:	49b9      	ldr	r1, [pc, #740]	; (80043b4 <__ieee754_pow+0x73c>)
 80040d0:	f7fc fb24 	bl	800071c <__aeabi_ddiv>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80040e0:	f7fc f9f2 	bl	80004c8 <__aeabi_dmul>
 80040e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040e8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80040ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040f0:	2300      	movs	r3, #0
 80040f2:	2200      	movs	r2, #0
 80040f4:	46ab      	mov	fp, r5
 80040f6:	106d      	asrs	r5, r5, #1
 80040f8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004102:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004106:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800410a:	4640      	mov	r0, r8
 800410c:	4649      	mov	r1, r9
 800410e:	4614      	mov	r4, r2
 8004110:	461d      	mov	r5, r3
 8004112:	f7fc f9d9 	bl	80004c8 <__aeabi_dmul>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800411e:	f7fc f81b 	bl	8000158 <__aeabi_dsub>
 8004122:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004126:	4606      	mov	r6, r0
 8004128:	460f      	mov	r7, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc f813 	bl	8000158 <__aeabi_dsub>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4650      	mov	r0, sl
 8004138:	4659      	mov	r1, fp
 800413a:	f7fc f80d 	bl	8000158 <__aeabi_dsub>
 800413e:	4642      	mov	r2, r8
 8004140:	464b      	mov	r3, r9
 8004142:	f7fc f9c1 	bl	80004c8 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4630      	mov	r0, r6
 800414c:	4639      	mov	r1, r7
 800414e:	f7fc f803 	bl	8000158 <__aeabi_dsub>
 8004152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004156:	f7fc f9b7 	bl	80004c8 <__aeabi_dmul>
 800415a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800415e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f7fc f9af 	bl	80004c8 <__aeabi_dmul>
 800416a:	a37b      	add	r3, pc, #492	; (adr r3, 8004358 <__ieee754_pow+0x6e0>)
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	4604      	mov	r4, r0
 8004172:	460d      	mov	r5, r1
 8004174:	f7fc f9a8 	bl	80004c8 <__aeabi_dmul>
 8004178:	a379      	add	r3, pc, #484	; (adr r3, 8004360 <__ieee754_pow+0x6e8>)
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f7fb ffed 	bl	800015c <__adddf3>
 8004182:	4622      	mov	r2, r4
 8004184:	462b      	mov	r3, r5
 8004186:	f7fc f99f 	bl	80004c8 <__aeabi_dmul>
 800418a:	a377      	add	r3, pc, #476	; (adr r3, 8004368 <__ieee754_pow+0x6f0>)
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f7fb ffe4 	bl	800015c <__adddf3>
 8004194:	4622      	mov	r2, r4
 8004196:	462b      	mov	r3, r5
 8004198:	f7fc f996 	bl	80004c8 <__aeabi_dmul>
 800419c:	a374      	add	r3, pc, #464	; (adr r3, 8004370 <__ieee754_pow+0x6f8>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f7fb ffdb 	bl	800015c <__adddf3>
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	f7fc f98d 	bl	80004c8 <__aeabi_dmul>
 80041ae:	a372      	add	r3, pc, #456	; (adr r3, 8004378 <__ieee754_pow+0x700>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fb ffd2 	bl	800015c <__adddf3>
 80041b8:	4622      	mov	r2, r4
 80041ba:	462b      	mov	r3, r5
 80041bc:	f7fc f984 	bl	80004c8 <__aeabi_dmul>
 80041c0:	a36f      	add	r3, pc, #444	; (adr r3, 8004380 <__ieee754_pow+0x708>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f7fb ffc9 	bl	800015c <__adddf3>
 80041ca:	4622      	mov	r2, r4
 80041cc:	4606      	mov	r6, r0
 80041ce:	460f      	mov	r7, r1
 80041d0:	462b      	mov	r3, r5
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f977 	bl	80004c8 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4630      	mov	r0, r6
 80041e0:	4639      	mov	r1, r7
 80041e2:	f7fc f971 	bl	80004c8 <__aeabi_dmul>
 80041e6:	4604      	mov	r4, r0
 80041e8:	460d      	mov	r5, r1
 80041ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041ee:	4642      	mov	r2, r8
 80041f0:	464b      	mov	r3, r9
 80041f2:	f7fb ffb3 	bl	800015c <__adddf3>
 80041f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041fa:	f7fc f965 	bl	80004c8 <__aeabi_dmul>
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	f7fb ffab 	bl	800015c <__adddf3>
 8004206:	4642      	mov	r2, r8
 8004208:	4606      	mov	r6, r0
 800420a:	460f      	mov	r7, r1
 800420c:	464b      	mov	r3, r9
 800420e:	4640      	mov	r0, r8
 8004210:	4649      	mov	r1, r9
 8004212:	f7fc f959 	bl	80004c8 <__aeabi_dmul>
 8004216:	2200      	movs	r2, #0
 8004218:	4b67      	ldr	r3, [pc, #412]	; (80043b8 <__ieee754_pow+0x740>)
 800421a:	4682      	mov	sl, r0
 800421c:	468b      	mov	fp, r1
 800421e:	f7fb ff9d 	bl	800015c <__adddf3>
 8004222:	4632      	mov	r2, r6
 8004224:	463b      	mov	r3, r7
 8004226:	f7fb ff99 	bl	800015c <__adddf3>
 800422a:	9c04      	ldr	r4, [sp, #16]
 800422c:	460d      	mov	r5, r1
 800422e:	4622      	mov	r2, r4
 8004230:	460b      	mov	r3, r1
 8004232:	4640      	mov	r0, r8
 8004234:	4649      	mov	r1, r9
 8004236:	f7fc f947 	bl	80004c8 <__aeabi_dmul>
 800423a:	2200      	movs	r2, #0
 800423c:	4680      	mov	r8, r0
 800423e:	4689      	mov	r9, r1
 8004240:	4620      	mov	r0, r4
 8004242:	4629      	mov	r1, r5
 8004244:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <__ieee754_pow+0x740>)
 8004246:	f7fb ff87 	bl	8000158 <__aeabi_dsub>
 800424a:	4652      	mov	r2, sl
 800424c:	465b      	mov	r3, fp
 800424e:	f7fb ff83 	bl	8000158 <__aeabi_dsub>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4630      	mov	r0, r6
 8004258:	4639      	mov	r1, r7
 800425a:	f7fb ff7d 	bl	8000158 <__aeabi_dsub>
 800425e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004262:	f7fc f931 	bl	80004c8 <__aeabi_dmul>
 8004266:	4622      	mov	r2, r4
 8004268:	4606      	mov	r6, r0
 800426a:	460f      	mov	r7, r1
 800426c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004270:	462b      	mov	r3, r5
 8004272:	f7fc f929 	bl	80004c8 <__aeabi_dmul>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4630      	mov	r0, r6
 800427c:	4639      	mov	r1, r7
 800427e:	f7fb ff6d 	bl	800015c <__adddf3>
 8004282:	4606      	mov	r6, r0
 8004284:	460f      	mov	r7, r1
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4640      	mov	r0, r8
 800428c:	4649      	mov	r1, r9
 800428e:	f7fb ff65 	bl	800015c <__adddf3>
 8004292:	a33d      	add	r3, pc, #244	; (adr r3, 8004388 <__ieee754_pow+0x710>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	9c04      	ldr	r4, [sp, #16]
 800429a:	460d      	mov	r5, r1
 800429c:	4620      	mov	r0, r4
 800429e:	f7fc f913 	bl	80004c8 <__aeabi_dmul>
 80042a2:	4642      	mov	r2, r8
 80042a4:	464b      	mov	r3, r9
 80042a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042aa:	4620      	mov	r0, r4
 80042ac:	4629      	mov	r1, r5
 80042ae:	f7fb ff53 	bl	8000158 <__aeabi_dsub>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4630      	mov	r0, r6
 80042b8:	4639      	mov	r1, r7
 80042ba:	f7fb ff4d 	bl	8000158 <__aeabi_dsub>
 80042be:	a334      	add	r3, pc, #208	; (adr r3, 8004390 <__ieee754_pow+0x718>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f7fc f900 	bl	80004c8 <__aeabi_dmul>
 80042c8:	a333      	add	r3, pc, #204	; (adr r3, 8004398 <__ieee754_pow+0x720>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	4606      	mov	r6, r0
 80042d0:	460f      	mov	r7, r1
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f7fc f8f7 	bl	80004c8 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4630      	mov	r0, r6
 80042e0:	4639      	mov	r1, r7
 80042e2:	f7fb ff3b 	bl	800015c <__adddf3>
 80042e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042e8:	4b34      	ldr	r3, [pc, #208]	; (80043bc <__ieee754_pow+0x744>)
 80042ea:	4413      	add	r3, r2
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fb ff34 	bl	800015c <__adddf3>
 80042f4:	4680      	mov	r8, r0
 80042f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042f8:	4689      	mov	r9, r1
 80042fa:	f7fc f87b 	bl	80003f4 <__aeabi_i2d>
 80042fe:	4604      	mov	r4, r0
 8004300:	460d      	mov	r5, r1
 8004302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <__ieee754_pow+0x748>)
 8004306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800430a:	4413      	add	r3, r2
 800430c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	f7fb ff22 	bl	800015c <__adddf3>
 8004318:	4632      	mov	r2, r6
 800431a:	463b      	mov	r3, r7
 800431c:	f7fb ff1e 	bl	800015c <__adddf3>
 8004320:	4622      	mov	r2, r4
 8004322:	462b      	mov	r3, r5
 8004324:	f7fb ff1a 	bl	800015c <__adddf3>
 8004328:	f8dd a010 	ldr.w	sl, [sp, #16]
 800432c:	4622      	mov	r2, r4
 800432e:	462b      	mov	r3, r5
 8004330:	4650      	mov	r0, sl
 8004332:	468b      	mov	fp, r1
 8004334:	f7fb ff10 	bl	8000158 <__aeabi_dsub>
 8004338:	4632      	mov	r2, r6
 800433a:	463b      	mov	r3, r7
 800433c:	f7fb ff0c 	bl	8000158 <__aeabi_dsub>
 8004340:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004344:	f7fb ff08 	bl	8000158 <__aeabi_dsub>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4640      	mov	r0, r8
 800434e:	4649      	mov	r1, r9
 8004350:	e608      	b.n	8003f64 <__ieee754_pow+0x2ec>
 8004352:	bf00      	nop
 8004354:	f3af 8000 	nop.w
 8004358:	4a454eef 	.word	0x4a454eef
 800435c:	3fca7e28 	.word	0x3fca7e28
 8004360:	93c9db65 	.word	0x93c9db65
 8004364:	3fcd864a 	.word	0x3fcd864a
 8004368:	a91d4101 	.word	0xa91d4101
 800436c:	3fd17460 	.word	0x3fd17460
 8004370:	518f264d 	.word	0x518f264d
 8004374:	3fd55555 	.word	0x3fd55555
 8004378:	db6fabff 	.word	0xdb6fabff
 800437c:	3fdb6db6 	.word	0x3fdb6db6
 8004380:	33333303 	.word	0x33333303
 8004384:	3fe33333 	.word	0x3fe33333
 8004388:	e0000000 	.word	0xe0000000
 800438c:	3feec709 	.word	0x3feec709
 8004390:	dc3a03fd 	.word	0xdc3a03fd
 8004394:	3feec709 	.word	0x3feec709
 8004398:	145b01f5 	.word	0x145b01f5
 800439c:	be3e2fe0 	.word	0xbe3e2fe0
 80043a0:	7ff00000 	.word	0x7ff00000
 80043a4:	43400000 	.word	0x43400000
 80043a8:	0003988e 	.word	0x0003988e
 80043ac:	000bb679 	.word	0x000bb679
 80043b0:	08004af0 	.word	0x08004af0
 80043b4:	3ff00000 	.word	0x3ff00000
 80043b8:	40080000 	.word	0x40080000
 80043bc:	08004b10 	.word	0x08004b10
 80043c0:	08004b00 	.word	0x08004b00
 80043c4:	2601      	movs	r6, #1
 80043c6:	e667      	b.n	8004098 <__ieee754_pow+0x420>
 80043c8:	a39d      	add	r3, pc, #628	; (adr r3, 8004640 <__ieee754_pow+0x9c8>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	4640      	mov	r0, r8
 80043d0:	4649      	mov	r1, r9
 80043d2:	f7fb fec3 	bl	800015c <__adddf3>
 80043d6:	4622      	mov	r2, r4
 80043d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043dc:	462b      	mov	r3, r5
 80043de:	4650      	mov	r0, sl
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fb feb9 	bl	8000158 <__aeabi_dsub>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043ee:	f7fc fafb 	bl	80009e8 <__aeabi_dcmpgt>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	f47f ae01 	bne.w	8003ffa <__ieee754_pow+0x382>
 80043f8:	4aa5      	ldr	r2, [pc, #660]	; (8004690 <__ieee754_pow+0xa18>)
 80043fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80043fe:	4293      	cmp	r3, r2
 8004400:	f340 8103 	ble.w	800460a <__ieee754_pow+0x992>
 8004404:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004408:	2000      	movs	r0, #0
 800440a:	151b      	asrs	r3, r3, #20
 800440c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004410:	fa4a f303 	asr.w	r3, sl, r3
 8004414:	4433      	add	r3, r6
 8004416:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800441a:	4f9e      	ldr	r7, [pc, #632]	; (8004694 <__ieee754_pow+0xa1c>)
 800441c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004420:	4117      	asrs	r7, r2
 8004422:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004426:	ea23 0107 	bic.w	r1, r3, r7
 800442a:	f1c2 0214 	rsb	r2, r2, #20
 800442e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004432:	460b      	mov	r3, r1
 8004434:	fa4a fa02 	asr.w	sl, sl, r2
 8004438:	2e00      	cmp	r6, #0
 800443a:	4602      	mov	r2, r0
 800443c:	4629      	mov	r1, r5
 800443e:	4620      	mov	r0, r4
 8004440:	bfb8      	it	lt
 8004442:	f1ca 0a00 	rsblt	sl, sl, #0
 8004446:	f7fb fe87 	bl	8000158 <__aeabi_dsub>
 800444a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800444e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004452:	2400      	movs	r4, #0
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	f7fb fe80 	bl	800015c <__adddf3>
 800445c:	a37a      	add	r3, pc, #488	; (adr r3, 8004648 <__ieee754_pow+0x9d0>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	4620      	mov	r0, r4
 8004464:	460d      	mov	r5, r1
 8004466:	f7fc f82f 	bl	80004c8 <__aeabi_dmul>
 800446a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fb fe6f 	bl	8000158 <__aeabi_dsub>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4640      	mov	r0, r8
 8004480:	4649      	mov	r1, r9
 8004482:	f7fb fe69 	bl	8000158 <__aeabi_dsub>
 8004486:	a372      	add	r3, pc, #456	; (adr r3, 8004650 <__ieee754_pow+0x9d8>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fc f81c 	bl	80004c8 <__aeabi_dmul>
 8004490:	a371      	add	r3, pc, #452	; (adr r3, 8004658 <__ieee754_pow+0x9e0>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	4680      	mov	r8, r0
 8004498:	4689      	mov	r9, r1
 800449a:	4620      	mov	r0, r4
 800449c:	4629      	mov	r1, r5
 800449e:	f7fc f813 	bl	80004c8 <__aeabi_dmul>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4640      	mov	r0, r8
 80044a8:	4649      	mov	r1, r9
 80044aa:	f7fb fe57 	bl	800015c <__adddf3>
 80044ae:	4604      	mov	r4, r0
 80044b0:	460d      	mov	r5, r1
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4630      	mov	r0, r6
 80044b8:	4639      	mov	r1, r7
 80044ba:	f7fb fe4f 	bl	800015c <__adddf3>
 80044be:	4632      	mov	r2, r6
 80044c0:	463b      	mov	r3, r7
 80044c2:	4680      	mov	r8, r0
 80044c4:	4689      	mov	r9, r1
 80044c6:	f7fb fe47 	bl	8000158 <__aeabi_dsub>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7fb fe41 	bl	8000158 <__aeabi_dsub>
 80044d6:	4642      	mov	r2, r8
 80044d8:	4606      	mov	r6, r0
 80044da:	460f      	mov	r7, r1
 80044dc:	464b      	mov	r3, r9
 80044de:	4640      	mov	r0, r8
 80044e0:	4649      	mov	r1, r9
 80044e2:	f7fb fff1 	bl	80004c8 <__aeabi_dmul>
 80044e6:	a35e      	add	r3, pc, #376	; (adr r3, 8004660 <__ieee754_pow+0x9e8>)
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	4604      	mov	r4, r0
 80044ee:	460d      	mov	r5, r1
 80044f0:	f7fb ffea 	bl	80004c8 <__aeabi_dmul>
 80044f4:	a35c      	add	r3, pc, #368	; (adr r3, 8004668 <__ieee754_pow+0x9f0>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fb fe2d 	bl	8000158 <__aeabi_dsub>
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f7fb ffe1 	bl	80004c8 <__aeabi_dmul>
 8004506:	a35a      	add	r3, pc, #360	; (adr r3, 8004670 <__ieee754_pow+0x9f8>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fb fe26 	bl	800015c <__adddf3>
 8004510:	4622      	mov	r2, r4
 8004512:	462b      	mov	r3, r5
 8004514:	f7fb ffd8 	bl	80004c8 <__aeabi_dmul>
 8004518:	a357      	add	r3, pc, #348	; (adr r3, 8004678 <__ieee754_pow+0xa00>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fb fe1b 	bl	8000158 <__aeabi_dsub>
 8004522:	4622      	mov	r2, r4
 8004524:	462b      	mov	r3, r5
 8004526:	f7fb ffcf 	bl	80004c8 <__aeabi_dmul>
 800452a:	a355      	add	r3, pc, #340	; (adr r3, 8004680 <__ieee754_pow+0xa08>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fb fe14 	bl	800015c <__adddf3>
 8004534:	4622      	mov	r2, r4
 8004536:	462b      	mov	r3, r5
 8004538:	f7fb ffc6 	bl	80004c8 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4640      	mov	r0, r8
 8004542:	4649      	mov	r1, r9
 8004544:	f7fb fe08 	bl	8000158 <__aeabi_dsub>
 8004548:	4604      	mov	r4, r0
 800454a:	460d      	mov	r5, r1
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4640      	mov	r0, r8
 8004552:	4649      	mov	r1, r9
 8004554:	f7fb ffb8 	bl	80004c8 <__aeabi_dmul>
 8004558:	2200      	movs	r2, #0
 800455a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800455e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004562:	4620      	mov	r0, r4
 8004564:	4629      	mov	r1, r5
 8004566:	f7fb fdf7 	bl	8000158 <__aeabi_dsub>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004572:	f7fc f8d3 	bl	800071c <__aeabi_ddiv>
 8004576:	4632      	mov	r2, r6
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
 800457c:	463b      	mov	r3, r7
 800457e:	4640      	mov	r0, r8
 8004580:	4649      	mov	r1, r9
 8004582:	f7fb ffa1 	bl	80004c8 <__aeabi_dmul>
 8004586:	4632      	mov	r2, r6
 8004588:	463b      	mov	r3, r7
 800458a:	f7fb fde7 	bl	800015c <__adddf3>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f7fb fddf 	bl	8000158 <__aeabi_dsub>
 800459a:	4642      	mov	r2, r8
 800459c:	464b      	mov	r3, r9
 800459e:	f7fb fddb 	bl	8000158 <__aeabi_dsub>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	2000      	movs	r0, #0
 80045a8:	493b      	ldr	r1, [pc, #236]	; (8004698 <__ieee754_pow+0xa20>)
 80045aa:	f7fb fdd5 	bl	8000158 <__aeabi_dsub>
 80045ae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80045b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80045b6:	da2b      	bge.n	8004610 <__ieee754_pow+0x998>
 80045b8:	4652      	mov	r2, sl
 80045ba:	f000 f9b9 	bl	8004930 <scalbn>
 80045be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045c2:	f7ff bbf2 	b.w	8003daa <__ieee754_pow+0x132>
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <__ieee754_pow+0xa24>)
 80045c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80045cc:	429f      	cmp	r7, r3
 80045ce:	f77f af13 	ble.w	80043f8 <__ieee754_pow+0x780>
 80045d2:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <__ieee754_pow+0xa28>)
 80045d4:	440b      	add	r3, r1
 80045d6:	4303      	orrs	r3, r0
 80045d8:	d00b      	beq.n	80045f2 <__ieee754_pow+0x97a>
 80045da:	a32b      	add	r3, pc, #172	; (adr r3, 8004688 <__ieee754_pow+0xa10>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045e4:	f7fb ff70 	bl	80004c8 <__aeabi_dmul>
 80045e8:	a327      	add	r3, pc, #156	; (adr r3, 8004688 <__ieee754_pow+0xa10>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7ff bbdc 	b.w	8003daa <__ieee754_pow+0x132>
 80045f2:	4622      	mov	r2, r4
 80045f4:	462b      	mov	r3, r5
 80045f6:	f7fb fdaf 	bl	8000158 <__aeabi_dsub>
 80045fa:	4642      	mov	r2, r8
 80045fc:	464b      	mov	r3, r9
 80045fe:	f7fc f9e9 	bl	80009d4 <__aeabi_dcmpge>
 8004602:	2800      	cmp	r0, #0
 8004604:	f43f aef8 	beq.w	80043f8 <__ieee754_pow+0x780>
 8004608:	e7e7      	b.n	80045da <__ieee754_pow+0x962>
 800460a:	f04f 0a00 	mov.w	sl, #0
 800460e:	e71e      	b.n	800444e <__ieee754_pow+0x7d6>
 8004610:	4621      	mov	r1, r4
 8004612:	e7d4      	b.n	80045be <__ieee754_pow+0x946>
 8004614:	f04f 0b00 	mov.w	fp, #0
 8004618:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8004698 <__ieee754_pow+0xa20>
 800461c:	f7ff bbb0 	b.w	8003d80 <__ieee754_pow+0x108>
 8004620:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004624:	f7ff bbac 	b.w	8003d80 <__ieee754_pow+0x108>
 8004628:	4638      	mov	r0, r7
 800462a:	4641      	mov	r1, r8
 800462c:	f7ff bbbf 	b.w	8003dae <__ieee754_pow+0x136>
 8004630:	9200      	str	r2, [sp, #0]
 8004632:	f7ff bb7f 	b.w	8003d34 <__ieee754_pow+0xbc>
 8004636:	2300      	movs	r3, #0
 8004638:	f7ff bb69 	b.w	8003d0e <__ieee754_pow+0x96>
 800463c:	f3af 8000 	nop.w
 8004640:	652b82fe 	.word	0x652b82fe
 8004644:	3c971547 	.word	0x3c971547
 8004648:	00000000 	.word	0x00000000
 800464c:	3fe62e43 	.word	0x3fe62e43
 8004650:	fefa39ef 	.word	0xfefa39ef
 8004654:	3fe62e42 	.word	0x3fe62e42
 8004658:	0ca86c39 	.word	0x0ca86c39
 800465c:	be205c61 	.word	0xbe205c61
 8004660:	72bea4d0 	.word	0x72bea4d0
 8004664:	3e663769 	.word	0x3e663769
 8004668:	c5d26bf1 	.word	0xc5d26bf1
 800466c:	3ebbbd41 	.word	0x3ebbbd41
 8004670:	af25de2c 	.word	0xaf25de2c
 8004674:	3f11566a 	.word	0x3f11566a
 8004678:	16bebd93 	.word	0x16bebd93
 800467c:	3f66c16c 	.word	0x3f66c16c
 8004680:	5555553e 	.word	0x5555553e
 8004684:	3fc55555 	.word	0x3fc55555
 8004688:	c2f8f359 	.word	0xc2f8f359
 800468c:	01a56e1f 	.word	0x01a56e1f
 8004690:	3fe00000 	.word	0x3fe00000
 8004694:	000fffff 	.word	0x000fffff
 8004698:	3ff00000 	.word	0x3ff00000
 800469c:	4090cbff 	.word	0x4090cbff
 80046a0:	3f6f3400 	.word	0x3f6f3400

080046a4 <__ieee754_sqrt>:
 80046a4:	f8df c150 	ldr.w	ip, [pc, #336]	; 80047f8 <__ieee754_sqrt+0x154>
 80046a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ac:	ea3c 0c01 	bics.w	ip, ip, r1
 80046b0:	460b      	mov	r3, r1
 80046b2:	4606      	mov	r6, r0
 80046b4:	460d      	mov	r5, r1
 80046b6:	460a      	mov	r2, r1
 80046b8:	4607      	mov	r7, r0
 80046ba:	4604      	mov	r4, r0
 80046bc:	d10e      	bne.n	80046dc <__ieee754_sqrt+0x38>
 80046be:	4602      	mov	r2, r0
 80046c0:	f7fb ff02 	bl	80004c8 <__aeabi_dmul>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4630      	mov	r0, r6
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7fb fd46 	bl	800015c <__adddf3>
 80046d0:	4606      	mov	r6, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	4630      	mov	r0, r6
 80046d6:	4629      	mov	r1, r5
 80046d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046dc:	2900      	cmp	r1, #0
 80046de:	dc0d      	bgt.n	80046fc <__ieee754_sqrt+0x58>
 80046e0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80046e4:	ea5c 0707 	orrs.w	r7, ip, r7
 80046e8:	d0f4      	beq.n	80046d4 <__ieee754_sqrt+0x30>
 80046ea:	b139      	cbz	r1, 80046fc <__ieee754_sqrt+0x58>
 80046ec:	4602      	mov	r2, r0
 80046ee:	f7fb fd33 	bl	8000158 <__aeabi_dsub>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	f7fc f811 	bl	800071c <__aeabi_ddiv>
 80046fa:	e7e9      	b.n	80046d0 <__ieee754_sqrt+0x2c>
 80046fc:	1512      	asrs	r2, r2, #20
 80046fe:	d074      	beq.n	80047ea <__ieee754_sqrt+0x146>
 8004700:	2000      	movs	r0, #0
 8004702:	07d5      	lsls	r5, r2, #31
 8004704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004708:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800470c:	bf5e      	ittt	pl
 800470e:	0fe3      	lsrpl	r3, r4, #31
 8004710:	0064      	lslpl	r4, r4, #1
 8004712:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8004716:	0fe3      	lsrs	r3, r4, #31
 8004718:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800471c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004720:	2516      	movs	r5, #22
 8004722:	4601      	mov	r1, r0
 8004724:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004728:	1076      	asrs	r6, r6, #1
 800472a:	0064      	lsls	r4, r4, #1
 800472c:	188f      	adds	r7, r1, r2
 800472e:	429f      	cmp	r7, r3
 8004730:	bfde      	ittt	le
 8004732:	1bdb      	suble	r3, r3, r7
 8004734:	18b9      	addle	r1, r7, r2
 8004736:	1880      	addle	r0, r0, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	3d01      	subs	r5, #1
 800473c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004740:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004744:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004748:	d1f0      	bne.n	800472c <__ieee754_sqrt+0x88>
 800474a:	462a      	mov	r2, r5
 800474c:	f04f 0e20 	mov.w	lr, #32
 8004750:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004754:	428b      	cmp	r3, r1
 8004756:	eb07 0c05 	add.w	ip, r7, r5
 800475a:	dc02      	bgt.n	8004762 <__ieee754_sqrt+0xbe>
 800475c:	d113      	bne.n	8004786 <__ieee754_sqrt+0xe2>
 800475e:	45a4      	cmp	ip, r4
 8004760:	d811      	bhi.n	8004786 <__ieee754_sqrt+0xe2>
 8004762:	f1bc 0f00 	cmp.w	ip, #0
 8004766:	eb0c 0507 	add.w	r5, ip, r7
 800476a:	da43      	bge.n	80047f4 <__ieee754_sqrt+0x150>
 800476c:	2d00      	cmp	r5, #0
 800476e:	db41      	blt.n	80047f4 <__ieee754_sqrt+0x150>
 8004770:	f101 0801 	add.w	r8, r1, #1
 8004774:	1a5b      	subs	r3, r3, r1
 8004776:	4641      	mov	r1, r8
 8004778:	45a4      	cmp	ip, r4
 800477a:	bf88      	it	hi
 800477c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004780:	eba4 040c 	sub.w	r4, r4, ip
 8004784:	443a      	add	r2, r7
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	f1be 0e01 	subs.w	lr, lr, #1
 800478c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004790:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8004794:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004798:	d1dc      	bne.n	8004754 <__ieee754_sqrt+0xb0>
 800479a:	4323      	orrs	r3, r4
 800479c:	d006      	beq.n	80047ac <__ieee754_sqrt+0x108>
 800479e:	1c54      	adds	r4, r2, #1
 80047a0:	bf0b      	itete	eq
 80047a2:	4672      	moveq	r2, lr
 80047a4:	3201      	addne	r2, #1
 80047a6:	3001      	addeq	r0, #1
 80047a8:	f022 0201 	bicne.w	r2, r2, #1
 80047ac:	1043      	asrs	r3, r0, #1
 80047ae:	07c1      	lsls	r1, r0, #31
 80047b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80047b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80047b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80047bc:	bf48      	it	mi
 80047be:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80047c2:	4610      	mov	r0, r2
 80047c4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80047c8:	e782      	b.n	80046d0 <__ieee754_sqrt+0x2c>
 80047ca:	0ae3      	lsrs	r3, r4, #11
 80047cc:	3915      	subs	r1, #21
 80047ce:	0564      	lsls	r4, r4, #21
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0fa      	beq.n	80047ca <__ieee754_sqrt+0x126>
 80047d4:	02de      	lsls	r6, r3, #11
 80047d6:	d50a      	bpl.n	80047ee <__ieee754_sqrt+0x14a>
 80047d8:	f1c2 0020 	rsb	r0, r2, #32
 80047dc:	fa24 f000 	lsr.w	r0, r4, r0
 80047e0:	1e55      	subs	r5, r2, #1
 80047e2:	4094      	lsls	r4, r2
 80047e4:	4303      	orrs	r3, r0
 80047e6:	1b4a      	subs	r2, r1, r5
 80047e8:	e78a      	b.n	8004700 <__ieee754_sqrt+0x5c>
 80047ea:	4611      	mov	r1, r2
 80047ec:	e7f0      	b.n	80047d0 <__ieee754_sqrt+0x12c>
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	3201      	adds	r2, #1
 80047f2:	e7ef      	b.n	80047d4 <__ieee754_sqrt+0x130>
 80047f4:	4688      	mov	r8, r1
 80047f6:	e7bd      	b.n	8004774 <__ieee754_sqrt+0xd0>
 80047f8:	7ff00000 	.word	0x7ff00000

080047fc <fabs>:
 80047fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004800:	4770      	bx	lr

08004802 <finite>:
 8004802:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004806:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800480a:	0fc0      	lsrs	r0, r0, #31
 800480c:	4770      	bx	lr
	...

08004810 <nan>:
 8004810:	2000      	movs	r0, #0
 8004812:	4901      	ldr	r1, [pc, #4]	; (8004818 <nan+0x8>)
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	7ff80000 	.word	0x7ff80000

0800481c <rint>:
 800481c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8004820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004822:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8004826:	2f13      	cmp	r7, #19
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	460c      	mov	r4, r1
 800482e:	4605      	mov	r5, r0
 8004830:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8004834:	dc59      	bgt.n	80048ea <rint+0xce>
 8004836:	2f00      	cmp	r7, #0
 8004838:	da2a      	bge.n	8004890 <rint+0x74>
 800483a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800483e:	4301      	orrs	r1, r0
 8004840:	d022      	beq.n	8004888 <rint+0x6c>
 8004842:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8004846:	4301      	orrs	r1, r0
 8004848:	424d      	negs	r5, r1
 800484a:	430d      	orrs	r5, r1
 800484c:	4936      	ldr	r1, [pc, #216]	; (8004928 <rint+0x10c>)
 800484e:	0c5c      	lsrs	r4, r3, #17
 8004850:	0b2d      	lsrs	r5, r5, #12
 8004852:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8004856:	0464      	lsls	r4, r4, #17
 8004858:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800485c:	ea45 0304 	orr.w	r3, r5, r4
 8004860:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004864:	4620      	mov	r0, r4
 8004866:	4629      	mov	r1, r5
 8004868:	f7fb fc78 	bl	800015c <__adddf3>
 800486c:	e9cd 0100 	strd	r0, r1, [sp]
 8004870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004874:	462b      	mov	r3, r5
 8004876:	4622      	mov	r2, r4
 8004878:	f7fb fc6e 	bl	8000158 <__aeabi_dsub>
 800487c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004880:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	b003      	add	sp, #12
 800488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004890:	4926      	ldr	r1, [pc, #152]	; (800492c <rint+0x110>)
 8004892:	4139      	asrs	r1, r7
 8004894:	ea03 0001 	and.w	r0, r3, r1
 8004898:	4310      	orrs	r0, r2
 800489a:	d0f5      	beq.n	8004888 <rint+0x6c>
 800489c:	084b      	lsrs	r3, r1, #1
 800489e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80048a2:	ea52 0501 	orrs.w	r5, r2, r1
 80048a6:	d00c      	beq.n	80048c2 <rint+0xa6>
 80048a8:	ea24 0303 	bic.w	r3, r4, r3
 80048ac:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80048b0:	2f13      	cmp	r7, #19
 80048b2:	bf0c      	ite	eq
 80048b4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80048b8:	2500      	movne	r5, #0
 80048ba:	fa44 f707 	asr.w	r7, r4, r7
 80048be:	ea43 0407 	orr.w	r4, r3, r7
 80048c2:	4919      	ldr	r1, [pc, #100]	; (8004928 <rint+0x10c>)
 80048c4:	4623      	mov	r3, r4
 80048c6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80048ca:	462a      	mov	r2, r5
 80048cc:	e9d6 4500 	ldrd	r4, r5, [r6]
 80048d0:	4620      	mov	r0, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	f7fb fc42 	bl	800015c <__adddf3>
 80048d8:	e9cd 0100 	strd	r0, r1, [sp]
 80048dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048e0:	4622      	mov	r2, r4
 80048e2:	462b      	mov	r3, r5
 80048e4:	f7fb fc38 	bl	8000158 <__aeabi_dsub>
 80048e8:	e7cc      	b.n	8004884 <rint+0x68>
 80048ea:	2f33      	cmp	r7, #51	; 0x33
 80048ec:	dd05      	ble.n	80048fa <rint+0xde>
 80048ee:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80048f2:	d1c9      	bne.n	8004888 <rint+0x6c>
 80048f4:	f7fb fc32 	bl	800015c <__adddf3>
 80048f8:	e7c4      	b.n	8004884 <rint+0x68>
 80048fa:	f04f 31ff 	mov.w	r1, #4294967295
 80048fe:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8004902:	fa21 f10c 	lsr.w	r1, r1, ip
 8004906:	4208      	tst	r0, r1
 8004908:	d0be      	beq.n	8004888 <rint+0x6c>
 800490a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800490e:	bf18      	it	ne
 8004910:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8004914:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8004918:	bf1e      	ittt	ne
 800491a:	ea20 0303 	bicne.w	r3, r0, r3
 800491e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8004922:	ea43 050c 	orrne.w	r5, r3, ip
 8004926:	e7cc      	b.n	80048c2 <rint+0xa6>
 8004928:	08004b20 	.word	0x08004b20
 800492c:	000fffff 	.word	0x000fffff

08004930 <scalbn>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004936:	4604      	mov	r4, r0
 8004938:	460d      	mov	r5, r1
 800493a:	4617      	mov	r7, r2
 800493c:	460b      	mov	r3, r1
 800493e:	b996      	cbnz	r6, 8004966 <scalbn+0x36>
 8004940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004944:	4303      	orrs	r3, r0
 8004946:	d039      	beq.n	80049bc <scalbn+0x8c>
 8004948:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <scalbn+0xf0>)
 800494a:	2200      	movs	r2, #0
 800494c:	f7fb fdbc 	bl	80004c8 <__aeabi_dmul>
 8004950:	4b34      	ldr	r3, [pc, #208]	; (8004a24 <scalbn+0xf4>)
 8004952:	4604      	mov	r4, r0
 8004954:	429f      	cmp	r7, r3
 8004956:	460d      	mov	r5, r1
 8004958:	da0f      	bge.n	800497a <scalbn+0x4a>
 800495a:	a32d      	add	r3, pc, #180	; (adr r3, 8004a10 <scalbn+0xe0>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fdb2 	bl	80004c8 <__aeabi_dmul>
 8004964:	e006      	b.n	8004974 <scalbn+0x44>
 8004966:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800496a:	4296      	cmp	r6, r2
 800496c:	d10a      	bne.n	8004984 <scalbn+0x54>
 800496e:	4602      	mov	r2, r0
 8004970:	f7fb fbf4 	bl	800015c <__adddf3>
 8004974:	4604      	mov	r4, r0
 8004976:	460d      	mov	r5, r1
 8004978:	e020      	b.n	80049bc <scalbn+0x8c>
 800497a:	460b      	mov	r3, r1
 800497c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004980:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004984:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004988:	19b9      	adds	r1, r7, r6
 800498a:	4291      	cmp	r1, r2
 800498c:	dd0e      	ble.n	80049ac <scalbn+0x7c>
 800498e:	a322      	add	r3, pc, #136	; (adr r3, 8004a18 <scalbn+0xe8>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004998:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800499c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80049a0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80049a4:	4820      	ldr	r0, [pc, #128]	; (8004a28 <scalbn+0xf8>)
 80049a6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80049aa:	e7d9      	b.n	8004960 <scalbn+0x30>
 80049ac:	2900      	cmp	r1, #0
 80049ae:	dd08      	ble.n	80049c2 <scalbn+0x92>
 80049b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80049bc:	4620      	mov	r0, r4
 80049be:	4629      	mov	r1, r5
 80049c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80049c6:	da16      	bge.n	80049f6 <scalbn+0xc6>
 80049c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80049cc:	429f      	cmp	r7, r3
 80049ce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80049d2:	dd08      	ble.n	80049e6 <scalbn+0xb6>
 80049d4:	4c15      	ldr	r4, [pc, #84]	; (8004a2c <scalbn+0xfc>)
 80049d6:	4814      	ldr	r0, [pc, #80]	; (8004a28 <scalbn+0xf8>)
 80049d8:	f363 74df 	bfi	r4, r3, #31, #1
 80049dc:	a30e      	add	r3, pc, #56	; (adr r3, 8004a18 <scalbn+0xe8>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	4621      	mov	r1, r4
 80049e4:	e7bc      	b.n	8004960 <scalbn+0x30>
 80049e6:	4c12      	ldr	r4, [pc, #72]	; (8004a30 <scalbn+0x100>)
 80049e8:	4812      	ldr	r0, [pc, #72]	; (8004a34 <scalbn+0x104>)
 80049ea:	f363 74df 	bfi	r4, r3, #31, #1
 80049ee:	a308      	add	r3, pc, #32	; (adr r3, 8004a10 <scalbn+0xe0>)
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	e7f5      	b.n	80049e2 <scalbn+0xb2>
 80049f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049fa:	3136      	adds	r1, #54	; 0x36
 80049fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <scalbn+0x108>)
 8004a0c:	e7a8      	b.n	8004960 <scalbn+0x30>
 8004a0e:	bf00      	nop
 8004a10:	c2f8f359 	.word	0xc2f8f359
 8004a14:	01a56e1f 	.word	0x01a56e1f
 8004a18:	8800759c 	.word	0x8800759c
 8004a1c:	7e37e43c 	.word	0x7e37e43c
 8004a20:	43500000 	.word	0x43500000
 8004a24:	ffff3cb0 	.word	0xffff3cb0
 8004a28:	8800759c 	.word	0x8800759c
 8004a2c:	7e37e43c 	.word	0x7e37e43c
 8004a30:	01a56e1f 	.word	0x01a56e1f
 8004a34:	c2f8f359 	.word	0xc2f8f359
 8004a38:	3c900000 	.word	0x3c900000

08004a3c <__errno>:
 8004a3c:	4b01      	ldr	r3, [pc, #4]	; (8004a44 <__errno+0x8>)
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000078 	.word	0x20000078

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	4d0c      	ldr	r5, [pc, #48]	; (8004a80 <__libc_init_array+0x38>)
 8004a4e:	4c0d      	ldr	r4, [pc, #52]	; (8004a84 <__libc_init_array+0x3c>)
 8004a50:	1b64      	subs	r4, r4, r5
 8004a52:	10a4      	asrs	r4, r4, #2
 8004a54:	42a6      	cmp	r6, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	f000 f81a 	bl	8004a90 <_init>
 8004a5c:	2600      	movs	r6, #0
 8004a5e:	4d0a      	ldr	r5, [pc, #40]	; (8004a88 <__libc_init_array+0x40>)
 8004a60:	4c0a      	ldr	r4, [pc, #40]	; (8004a8c <__libc_init_array+0x44>)
 8004a62:	1b64      	subs	r4, r4, r5
 8004a64:	10a4      	asrs	r4, r4, #2
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a70:	4798      	blx	r3
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7a:	4798      	blx	r3
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08004b30 	.word	0x08004b30
 8004a84:	08004b30 	.word	0x08004b30
 8004a88:	08004b30 	.word	0x08004b30
 8004a8c:	08004b34 	.word	0x08004b34

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
